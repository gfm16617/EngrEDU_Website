
2024_STM32C011J4M6_IMU_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f18  08003f18  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f18  08003f18  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00004f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  08003f7c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08003f7c  00005300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc31  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4b  00000000  00000000  00011cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00013a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000803  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b18  00000000  00000000  00014c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea37  00000000  00000000  0002775b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077a44  00000000  00000000  00036192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adbd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002918  00000000  00000000  000adc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b0534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e24 	.word	0x08003e24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003e24 	.word	0x08003e24

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	b085      	sub	sp, #20
 800040c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fbe3 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f91b 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f000 f9eb 	bl	80007f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800041a:	f000 f99b 	bl	8000754 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800041e:	f000 f959 	bl	80006d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // ICM42605 Init
  if(HAL_I2C_IsDeviceReady(&hi2c1, (ICM42605_ADDRESS<<1), 1, 100) == HAL_OK) {
 8000422:	4880      	ldr	r0, [pc, #512]	@ (8000624 <main+0x21c>)
 8000424:	2364      	movs	r3, #100	@ 0x64
 8000426:	2201      	movs	r2, #1
 8000428:	21d2      	movs	r1, #210	@ 0xd2
 800042a:	f001 f9b9 	bl	80017a0 <HAL_I2C_IsDeviceReady>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d111      	bne.n	8000456 <main+0x4e>
	  gSprintf_Len = sprintf(gUART_MSG, "IMU ON\r\n");
 8000432:	4a7d      	ldr	r2, [pc, #500]	@ (8000628 <main+0x220>)
 8000434:	4b7d      	ldr	r3, [pc, #500]	@ (800062c <main+0x224>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f003 f855 	bl	80034e8 <siprintf>
 800043e:	0002      	movs	r2, r0
 8000440:	4b7b      	ldr	r3, [pc, #492]	@ (8000630 <main+0x228>)
 8000442:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)gUART_MSG, gSprintf_Len, HAL_MAX_DELAY);
 8000444:	4b7a      	ldr	r3, [pc, #488]	@ (8000630 <main+0x228>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	b29a      	uxth	r2, r3
 800044a:	2301      	movs	r3, #1
 800044c:	425b      	negs	r3, r3
 800044e:	4977      	ldr	r1, [pc, #476]	@ (800062c <main+0x224>)
 8000450:	4878      	ldr	r0, [pc, #480]	@ (8000634 <main+0x22c>)
 8000452:	f002 fadf 	bl	8002a14 <HAL_UART_Transmit>
  }

  // Read Device ID
  HAL_I2C_Mem_Read(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_WHO_AM_I, 1, &gData, 1, 100);
 8000456:	4873      	ldr	r0, [pc, #460]	@ (8000624 <main+0x21c>)
 8000458:	2364      	movs	r3, #100	@ 0x64
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	4b75      	ldr	r3, [pc, #468]	@ (8000638 <main+0x230>)
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2301      	movs	r3, #1
 8000466:	2275      	movs	r2, #117	@ 0x75
 8000468:	21d2      	movs	r1, #210	@ 0xd2
 800046a:	f001 f865 	bl	8001538 <HAL_I2C_Mem_Read>

  // Follow Procedure from Page 56
  // Turn Off Accel and Gyro
  gData = 0b00111111;
 800046e:	4b72      	ldr	r3, [pc, #456]	@ (8000638 <main+0x230>)
 8000470:	223f      	movs	r2, #63	@ 0x3f
 8000472:	701a      	strb	r2, [r3, #0]
  _gStatus = HAL_I2C_Mem_Write(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_SENSOR_CONFIG0, 1, &gData, 1, 100);
 8000474:	486b      	ldr	r0, [pc, #428]	@ (8000624 <main+0x21c>)
 8000476:	2364      	movs	r3, #100	@ 0x64
 8000478:	9302      	str	r3, [sp, #8]
 800047a:	2301      	movs	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	4b6e      	ldr	r3, [pc, #440]	@ (8000638 <main+0x230>)
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2203      	movs	r2, #3
 8000486:	21d2      	movs	r1, #210	@ 0xd2
 8000488:	f000 ff28 	bl	80012dc <HAL_I2C_Mem_Write>
 800048c:	0003      	movs	r3, r0
 800048e:	001a      	movs	r2, r3
 8000490:	4b6a      	ldr	r3, [pc, #424]	@ (800063c <main+0x234>)
 8000492:	701a      	strb	r2, [r3, #0]

  // Accel and Gyro Mode
  gData = 0b00001111;  // Low Noise Mode
 8000494:	4b68      	ldr	r3, [pc, #416]	@ (8000638 <main+0x230>)
 8000496:	220f      	movs	r2, #15
 8000498:	701a      	strb	r2, [r3, #0]
  _gStatus = HAL_I2C_Mem_Write(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_PWR_MGMT0, 1, &gData, 1, 100);
 800049a:	4862      	ldr	r0, [pc, #392]	@ (8000624 <main+0x21c>)
 800049c:	2364      	movs	r3, #100	@ 0x64
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	2301      	movs	r3, #1
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	4b64      	ldr	r3, [pc, #400]	@ (8000638 <main+0x230>)
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	224e      	movs	r2, #78	@ 0x4e
 80004ac:	21d2      	movs	r1, #210	@ 0xd2
 80004ae:	f000 ff15 	bl	80012dc <HAL_I2C_Mem_Write>
 80004b2:	0003      	movs	r3, r0
 80004b4:	001a      	movs	r2, r3
 80004b6:	4b61      	ldr	r3, [pc, #388]	@ (800063c <main+0x234>)
 80004b8:	701a      	strb	r2, [r3, #0]
  // minimum wait 200us (Page 73)
  HAL_Delay(1);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 fc0a 	bl	8000cd4 <HAL_Delay>

  // Enable data to FIFO
  gData = 0b01000111;
 80004c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000638 <main+0x230>)
 80004c2:	2247      	movs	r2, #71	@ 0x47
 80004c4:	701a      	strb	r2, [r3, #0]
  _gStatus = HAL_I2C_Mem_Write(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_FIFO_CONFIG1, 1, &gData, 1, 100);
 80004c6:	4857      	ldr	r0, [pc, #348]	@ (8000624 <main+0x21c>)
 80004c8:	2364      	movs	r3, #100	@ 0x64
 80004ca:	9302      	str	r3, [sp, #8]
 80004cc:	2301      	movs	r3, #1
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	4b59      	ldr	r3, [pc, #356]	@ (8000638 <main+0x230>)
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	2301      	movs	r3, #1
 80004d6:	225f      	movs	r2, #95	@ 0x5f
 80004d8:	21d2      	movs	r1, #210	@ 0xd2
 80004da:	f000 feff 	bl	80012dc <HAL_I2C_Mem_Write>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b56      	ldr	r3, [pc, #344]	@ (800063c <main+0x234>)
 80004e4:	701a      	strb	r2, [r3, #0]

  // Turn On Accel and Gyro
  gData = 0b00000000;
 80004e6:	4b54      	ldr	r3, [pc, #336]	@ (8000638 <main+0x230>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
  _gStatus = HAL_I2C_Mem_Write(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_SENSOR_CONFIG0, 1, &gData, 1, 100);
 80004ec:	484d      	ldr	r0, [pc, #308]	@ (8000624 <main+0x21c>)
 80004ee:	2364      	movs	r3, #100	@ 0x64
 80004f0:	9302      	str	r3, [sp, #8]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4b50      	ldr	r3, [pc, #320]	@ (8000638 <main+0x230>)
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	2203      	movs	r2, #3
 80004fe:	21d2      	movs	r1, #210	@ 0xd2
 8000500:	f000 feec 	bl	80012dc <HAL_I2C_Mem_Write>
 8000504:	0003      	movs	r3, r0
 8000506:	001a      	movs	r2, r3
 8000508:	4b4c      	ldr	r3, [pc, #304]	@ (800063c <main+0x234>)
 800050a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Mem_Read(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_TEMP_DATA1, 1, gRawData, 14, 100);
 800050c:	4845      	ldr	r0, [pc, #276]	@ (8000624 <main+0x21c>)
 800050e:	2364      	movs	r3, #100	@ 0x64
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	230e      	movs	r3, #14
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <main+0x238>)
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	221d      	movs	r2, #29
 800051e:	21d2      	movs	r1, #210	@ 0xd2
 8000520:	f001 f80a 	bl	8001538 <HAL_I2C_Mem_Read>

	  gRawData_t.gTemp = (gRawData[0]<<8) | gRawData[1];  // Temp
 8000524:	4b46      	ldr	r3, [pc, #280]	@ (8000640 <main+0x238>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b44      	ldr	r3, [pc, #272]	@ (8000640 <main+0x238>)
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	b21b      	sxth	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b21b      	sxth	r3, r3
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <main+0x23c>)
 800053a:	801a      	strh	r2, [r3, #0]
	  gRawData_t.gAccel_X = (gRawData[2]<<8) | gRawData[3];  // Accel_X
 800053c:	4b40      	ldr	r3, [pc, #256]	@ (8000640 <main+0x238>)
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	4b3e      	ldr	r3, [pc, #248]	@ (8000640 <main+0x238>)
 8000546:	78db      	ldrb	r3, [r3, #3]
 8000548:	b21b      	sxth	r3, r3
 800054a:	4313      	orrs	r3, r2
 800054c:	b21b      	sxth	r3, r3
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <main+0x23c>)
 8000552:	805a      	strh	r2, [r3, #2]
	  gRawData_t.gAccel_Y = (gRawData[4]<<8) | gRawData[5];  // Accel_Y
 8000554:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <main+0x238>)
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <main+0x238>)
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21b      	sxth	r3, r3
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b36      	ldr	r3, [pc, #216]	@ (8000644 <main+0x23c>)
 800056a:	809a      	strh	r2, [r3, #4]
	  gRawData_t.gAccel_Z = (gRawData[6]<<8) | gRawData[7];  // Accel_Z
 800056c:	4b34      	ldr	r3, [pc, #208]	@ (8000640 <main+0x238>)
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	b21a      	sxth	r2, r3
 8000574:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <main+0x238>)
 8000576:	79db      	ldrb	r3, [r3, #7]
 8000578:	b21b      	sxth	r3, r3
 800057a:	4313      	orrs	r3, r2
 800057c:	b21b      	sxth	r3, r3
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <main+0x23c>)
 8000582:	80da      	strh	r2, [r3, #6]
	  gRawData_t.gGyro_X = (gRawData[8]<<8) | gRawData[9];  // Gyro_X
 8000584:	4b2e      	ldr	r3, [pc, #184]	@ (8000640 <main+0x238>)
 8000586:	7a1b      	ldrb	r3, [r3, #8]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <main+0x238>)
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b2a      	ldr	r3, [pc, #168]	@ (8000644 <main+0x23c>)
 800059a:	811a      	strh	r2, [r3, #8]
	  gRawData_t.gGyro_Y = (gRawData[10]<<8) | gRawData[11];  // Gyro_Y
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <main+0x238>)
 800059e:	7a9b      	ldrb	r3, [r3, #10]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <main+0x238>)
 80005a6:	7adb      	ldrb	r3, [r3, #11]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <main+0x23c>)
 80005b2:	815a      	strh	r2, [r3, #10]
	  gRawData_t.gGyro_Z = (gRawData[12]<<8) | gRawData[13];  // Gyro_Z
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <main+0x238>)
 80005b6:	7b1b      	ldrb	r3, [r3, #12]
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	b21a      	sxth	r2, r3
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <main+0x238>)
 80005be:	7b5b      	ldrb	r3, [r3, #13]
 80005c0:	b21b      	sxth	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <main+0x23c>)
 80005ca:	819a      	strh	r2, [r3, #12]

	  // Send Raw Data over UART
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
			  gRawData_t.gAccel_X, gRawData_t.gAccel_Y, gRawData_t.gAccel_Z,
 80005cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <main+0x23c>)
 80005ce:	885b      	ldrh	r3, [r3, #2]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005d0:	001e      	movs	r6, r3
			  gRawData_t.gAccel_X, gRawData_t.gAccel_Y, gRawData_t.gAccel_Z,
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <main+0x23c>)
 80005d4:	889b      	ldrh	r3, [r3, #4]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005d6:	469c      	mov	ip, r3
			  gRawData_t.gAccel_X, gRawData_t.gAccel_Y, gRawData_t.gAccel_Z,
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <main+0x23c>)
 80005da:	88db      	ldrh	r3, [r3, #6]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005dc:	001a      	movs	r2, r3
			  gRawData_t.gGyro_X, gRawData_t.gGyro_Y, gRawData_t.gGyro_Z);
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <main+0x23c>)
 80005e0:	891b      	ldrh	r3, [r3, #8]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005e2:	001c      	movs	r4, r3
			  gRawData_t.gGyro_X, gRawData_t.gGyro_Y, gRawData_t.gGyro_Z);
 80005e4:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <main+0x23c>)
 80005e6:	895b      	ldrh	r3, [r3, #10]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005e8:	001d      	movs	r5, r3
			  gRawData_t.gGyro_X, gRawData_t.gGyro_Y, gRawData_t.gGyro_Z);
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <main+0x23c>)
 80005ec:	899b      	ldrh	r3, [r3, #12]
	  gSprintf_Len = sprintf(gUART_MSG, "%u,%u,%u,%u,%u,%u\r\n",
 80005ee:	4916      	ldr	r1, [pc, #88]	@ (8000648 <main+0x240>)
 80005f0:	480e      	ldr	r0, [pc, #56]	@ (800062c <main+0x224>)
 80005f2:	9303      	str	r3, [sp, #12]
 80005f4:	9502      	str	r5, [sp, #8]
 80005f6:	9401      	str	r4, [sp, #4]
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	4663      	mov	r3, ip
 80005fc:	0032      	movs	r2, r6
 80005fe:	f002 ff73 	bl	80034e8 <siprintf>
 8000602:	0002      	movs	r2, r0
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <main+0x228>)
 8000606:	601a      	str	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, (uint8_t *)gUART_MSG, gSprintf_Len, HAL_MAX_DELAY);
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x228>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b29a      	uxth	r2, r3
 800060e:	2301      	movs	r3, #1
 8000610:	425b      	negs	r3, r3
 8000612:	4906      	ldr	r1, [pc, #24]	@ (800062c <main+0x224>)
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <main+0x22c>)
 8000616:	f002 f9fd 	bl	8002a14 <HAL_UART_Transmit>

	  HAL_Delay(100);  // 100ms
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 fb5a 	bl	8000cd4 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (ICM42605_ADDRESS<<1), ICM42605_TEMP_DATA1, 1, gRawData, 14, 100);
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	e773      	b.n	800050c <main+0x104>
 8000624:	20000078 	.word	0x20000078
 8000628:	08003e3c 	.word	0x08003e3c
 800062c:	20000184 	.word	0x20000184
 8000630:	200001ac 	.word	0x200001ac
 8000634:	200000cc 	.word	0x200000cc
 8000638:	20000160 	.word	0x20000160
 800063c:	20000161 	.word	0x20000161
 8000640:	20000164 	.word	0x20000164
 8000644:	20000174 	.word	0x20000174
 8000648:	08003e48 	.word	0x08003e48

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b08d      	sub	sp, #52	@ 0x34
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2414      	movs	r4, #20
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	231c      	movs	r3, #28
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f002 ff63 	bl	8003528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f002 ff5c 	bl	8003528 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2240      	movs	r2, #64	@ 0x40
 8000688:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fd2b 	bl	80020e8 <HAL_RCC_OscConfig>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000696:	f000 f8cd 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	003b      	movs	r3, r7
 800069c:	2207      	movs	r2, #7
 800069e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	003b      	movs	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	003b      	movs	r3, r7
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fef7 	bl	80024b0 <HAL_RCC_ClockConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006c6:	f000 f8b5 	bl	8000834 <Error_Handler>
  }
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b00d      	add	sp, #52	@ 0x34
 80006d0:	bd90      	pop	{r4, r7, pc}
	...

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_I2C1_Init+0x74>)
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fd3d 	bl	8001190 <HAL_I2C_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f88b 	bl	8000834 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_I2C1_Init+0x74>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fc48 	bl	8001fb8 <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f882 	bl	8000834 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <MX_I2C1_Init+0x74>)
 8000732:	2100      	movs	r1, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fc8b 	bl	8002050 <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f879 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000078 	.word	0x20000078
 800074c:	40005400 	.word	0x40005400
 8000750:	20303e5d 	.word	0x20303e5d

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 800075a:	4a24      	ldr	r2, [pc, #144]	@ (80007ec <MX_USART1_UART_Init+0x98>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000760:	22e1      	movs	r2, #225	@ 0xe1
 8000762:	0252      	lsls	r2, r2, #9
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f8e2 	bl	8002968 <HAL_UART_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f844 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fdb9 	bl	8003328 <HAL_UARTEx_SetTxFifoThreshold>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 f83b 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fdf0 	bl	80033a8 <HAL_UARTEx_SetRxFifoThreshold>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f832 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <MX_USART1_UART_Init+0x94>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fd6e 	bl	80032b4 <HAL_UARTEx_DisableFifoMode>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f82a 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	200000cc 	.word	0x200000cc
 80007ec:	40013800 	.word	0x40013800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_GPIO_Init+0x40>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_GPIO_Init+0x40>)
 80007fc:	2102      	movs	r1, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_GPIO_Init+0x40>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000806:	2202      	movs	r2, #2
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_GPIO_Init+0x40>)
 8000810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_GPIO_Init+0x40>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_GPIO_Init+0x40>)
 800081c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x48>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x48>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	641a      	str	r2, [r3, #64]	@ 0x40
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x48>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_MspInit+0x48>)
 8000860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x48>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	430a      	orrs	r2, r1
 800086a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x48>)
 800086e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	055b      	lsls	r3, r3, #21
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 800087a:	2010      	movs	r0, #16
 800087c:	f000 fa4e 	bl	8000d1c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b093      	sub	sp, #76	@ 0x4c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2334      	movs	r3, #52	@ 0x34
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 fe42 	bl	8003528 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	2418      	movs	r4, #24
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	231c      	movs	r3, #28
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fe3a 	bl	8003528 <memset>
  if(hi2c->Instance==I2C1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a36      	ldr	r2, [pc, #216]	@ (8000994 <HAL_I2C_MspInit+0x108>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d166      	bne.n	800098c <HAL_I2C_MspInit+0x100>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2240      	movs	r2, #64	@ 0x40
 80008c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 ff5d 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008d6:	f7ff ffad 	bl	8000834 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 80008e0:	2102      	movs	r1, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ea:	2202      	movs	r2, #2
 80008ec:	4013      	ands	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800090a:	2434      	movs	r4, #52	@ 0x34
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2212      	movs	r2, #18
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2201      	movs	r2, #1
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	220e      	movs	r2, #14
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <HAL_I2C_MspInit+0x110>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f000 fac3 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2212      	movs	r2, #18
 8000944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2201      	movs	r2, #1
 800094a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2206      	movs	r2, #6
 8000956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	187a      	adds	r2, r7, r1
 800095a:	23a0      	movs	r3, #160	@ 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f000 faab 	bl	8000ebc <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 8000966:	23c0      	movs	r3, #192	@ 0xc0
 8000968:	029b      	lsls	r3, r3, #10
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f9e6 	bl	8000d3c <HAL_SYSCFG_SetPinBinding>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 8000972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 8000976:	2180      	movs	r1, #128	@ 0x80
 8000978:	0389      	lsls	r1, r1, #14
 800097a:	430a      	orrs	r2, r1
 800097c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_I2C_MspInit+0x10c>)
 8000980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	039b      	lsls	r3, r3, #14
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b013      	add	sp, #76	@ 0x4c
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40005400 	.word	0x40005400
 8000998:	40021000 	.word	0x40021000
 800099c:	50000400 	.word	0x50000400

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b091      	sub	sp, #68	@ 0x44
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	232c      	movs	r3, #44	@ 0x2c
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	0018      	movs	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f002 fdb8 	bl	8003528 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	2410      	movs	r4, #16
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	231c      	movs	r3, #28
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f002 fdb0 	bl	8003528 <memset>
  if(huart->Instance==USART1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a30      	ldr	r2, [pc, #192]	@ (8000a90 <HAL_UART_MspInit+0xf0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d15a      	bne.n	8000a88 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fed3 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ea:	f7ff ff23 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 80009f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f2:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	01c9      	lsls	r1, r1, #7
 80009f8:	430a      	orrs	r2, r1
 80009fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 80009fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	01db      	lsls	r3, r3, #7
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <HAL_UART_MspInit+0xf4>)
 8000a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a22:	242c      	movs	r4, #44	@ 0x2c
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2204      	movs	r2, #4
 8000a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	193a      	adds	r2, r7, r4
 8000a44:	23a0      	movs	r3, #160	@ 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fa36 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a50:	0021      	movs	r1, r4
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2280      	movs	r2, #128	@ 0x80
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	220e      	movs	r2, #14
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	23a0      	movs	r3, #160	@ 0xa0
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fa1e 	bl	8000ebc <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA8);
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f95a 	bl	8000d3c <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b011      	add	sp, #68	@ 0x44
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	003c0004 	.word	0x003c0004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8ea 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f002 fd1a 	bl	8003538 <__errno>
 8000b04:	0003      	movs	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	425b      	negs	r3, r3
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	18d2      	adds	r2, r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <_sbrk+0x64>)
 8000b20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b006      	add	sp, #24
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20001800 	.word	0x20001800
 8000b30:	00000400 	.word	0x00000400
 8000b34:	200001b0 	.word	0x200001b0
 8000b38:	20000300 	.word	0x20000300

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SystemInit+0x14>)
 8000b42:	2280      	movs	r2, #128	@ 0x80
 8000b44:	0512      	lsls	r2, r2, #20
 8000b46:	609a      	str	r2, [r3, #8]
#endif
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f7ff fff0 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopForever+0x12>)
  b LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b78:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7a:	3204      	adds	r2, #4

08000b7c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <LoopForever+0x16>)
  cmp r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b82:	f002 fcdf 	bl	8003544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff fc3f 	bl	8000408 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b90:	08003f20 	.word	0x08003f20
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b98:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000b9c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000ba0:	20000300 	.word	0x20000300

08000ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_IRQHandler>
	...

08000ba8 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	0c12      	lsrs	r2, r2, #16
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	0c1a      	lsrs	r2, r3, #16
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f80f 	bl	8000c08 <HAL_InitTick>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e001      	b.n	8000bfa <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf6:	f7ff fe23 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_InitTick+0x88>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d02b      	beq.n	8000c78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <HAL_InitTick+0x8c>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_InitTick+0x88>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	23fa      	movs	r3, #250	@ 0xfa
 8000c2c:	0098      	lsls	r0, r3, #2
 8000c2e:	f7ff fa75 	bl	800011c <__udivsi3>
 8000c32:	0003      	movs	r3, r0
 8000c34:	0019      	movs	r1, r3
 8000c36:	0020      	movs	r0, r4
 8000c38:	f7ff fa70 	bl	800011c <__udivsi3>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f92f 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d112      	bne.n	8000c6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d80a      	bhi.n	8000c64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f90e 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_InitTick+0x90>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e00d      	b.n	8000c80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e008      	b.n	8000c80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e003      	b.n	8000c80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b005      	add	sp, #20
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_IncTick+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x20>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	18d2      	adds	r2, r2, r3
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_IncTick+0x20>)
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200001b4 	.word	0x200001b4

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	@ (8000cd0 <HAL_GetTick+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	200001b4 	.word	0x200001b4

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff fff0 	bl	8000cc0 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	189b      	adds	r3, r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	f7ff ffe0 	bl	8000cc0 <HAL_GetTick>
 8000d00:	0002      	movs	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	20000008 	.word	0x20000008

08000d1c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	4b03      	ldr	r3, [pc, #12]	@ (8000d38 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff2e 	bl	8000ba8 <LL_SYSCFG_ConfigPinMux>
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d68:	d828      	bhi.n	8000dbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e28 <__NVIC_SetPriority+0xd4>)
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	33c0      	adds	r3, #192	@ 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	589b      	ldr	r3, [r3, r2]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	@ 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	@ 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <__NVIC_SetPriority+0xd4>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	33c0      	adds	r3, #192	@ 0xc0
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dba:	e031      	b.n	8000e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3306      	adds	r3, #6
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	0011      	movs	r1, r2
 8000ddc:	2203      	movs	r2, #3
 8000dde:	400a      	ands	r2, r1
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	21ff      	movs	r1, #255	@ 0xff
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	22ff      	movs	r2, #255	@ 0xff
 8000df4:	401a      	ands	r2, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4003      	ands	r3, r0
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	4023      	ands	r3, r4
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	430a      	orrs	r2, r1
 8000e16:	3306      	adds	r3, #6
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	18c3      	adds	r3, r0, r3
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	045b      	lsls	r3, r3, #17
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d301      	bcc.n	8000e48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e44:	2301      	movs	r3, #1
 8000e46:	e010      	b.n	8000e6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e48:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <SysTick_Config+0x44>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2103      	movs	r1, #3
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ff7c 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SysTick_Config+0x44>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SysTick_Config+0x44>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	210f      	movs	r1, #15
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	1c02      	adds	r2, r0, #0
 8000e88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ffbf 	bl	8000e30 <SysTick_Config>
 8000eb2:	0003      	movs	r3, r0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000eca:	e14d      	b.n	8001168 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <HAL_GPIO_Init+0x28>
 8000ee2:	e13e      	b.n	8001162 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x38>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b12      	cmp	r3, #18
 8000ef2:	d125      	bne.n	8000f40 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	58d3      	ldr	r3, [r2, r3]
 8000f00:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2207      	movs	r2, #7
 8000f06:	4013      	ands	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	401a      	ands	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2107      	movs	r1, #7
 8000f24:	400b      	ands	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	6979      	ldr	r1, [r7, #20]
 8000f3e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d00b      	beq.n	8000f94 <HAL_GPIO_Init+0xd8>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b12      	cmp	r3, #18
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d017      	beq.n	800102e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4013      	ands	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	4013      	ands	r3, r2
 8001038:	d100      	bne.n	800103c <HAL_GPIO_Init+0x180>
 800103a:	e092      	b.n	8001162 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800103c:	4a50      	ldr	r2, [pc, #320]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3318      	adds	r3, #24
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	589b      	ldr	r3, [r3, r2]
 8001048:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	220f      	movs	r2, #15
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	43da      	mvns	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	23a0      	movs	r3, #160	@ 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	429a      	cmp	r2, r3
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1d6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	@ (8001184 <HAL_GPIO_Init+0x2c8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1d2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a44      	ldr	r2, [pc, #272]	@ (8001188 <HAL_GPIO_Init+0x2cc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1ce>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a43      	ldr	r2, [pc, #268]	@ (800118c <HAL_GPIO_Init+0x2d0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1ca>
 8001082:	2305      	movs	r3, #5
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 8001086:	2306      	movs	r3, #6
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x1d8>
 8001092:	2300      	movs	r3, #0
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	2103      	movs	r1, #3
 8001098:	400a      	ands	r2, r1
 800109a:	00d2      	lsls	r2, r2, #3
 800109c:	4093      	lsls	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010a4:	4936      	ldr	r1, [pc, #216]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3318      	adds	r3, #24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010b2:	4a33      	ldr	r2, [pc, #204]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	58d3      	ldr	r3, [r2, r3]
 80010b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43da      	mvns	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	4013      	ands	r3, r2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80010d8:	4929      	ldr	r1, [pc, #164]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80010e0:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 80010e2:	2384      	movs	r3, #132	@ 0x84
 80010e4:	58d3      	ldr	r3, [r2, r3]
 80010e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	4013      	ands	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	029b      	lsls	r3, r3, #10
 80010fa:	4013      	ands	r3, r2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001106:	491e      	ldr	r1, [pc, #120]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 8001108:	2284      	movs	r2, #132	@ 0x84
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43da      	mvns	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	035b      	lsls	r3, r3, #13
 8001126:	4013      	ands	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43da      	mvns	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	039b      	lsls	r3, r3, #14
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_GPIO_Init+0x2c4>)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3301      	adds	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	40da      	lsrs	r2, r3
 8001170:	1e13      	subs	r3, r2, #0
 8001172:	d000      	beq.n	8001176 <HAL_GPIO_Init+0x2ba>
 8001174:	e6aa      	b.n	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b006      	add	sp, #24
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021800 	.word	0x40021800
 8001184:	50000400 	.word	0x50000400
 8001188:	50000800 	.word	0x50000800
 800118c:	50001400 	.word	0x50001400

08001190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e08f      	b.n	80012c2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2241      	movs	r2, #65	@ 0x41
 80011a6:	5c9b      	ldrb	r3, [r3, r2]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2240      	movs	r2, #64	@ 0x40
 80011b2:	2100      	movs	r1, #0
 80011b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff fb67 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2241      	movs	r2, #65	@ 0x41
 80011c2:	2124      	movs	r1, #36	@ 0x24
 80011c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	438a      	bics	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	493b      	ldr	r1, [pc, #236]	@ (80012cc <HAL_I2C_Init+0x13c>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4938      	ldr	r1, [pc, #224]	@ (80012d0 <HAL_I2C_Init+0x140>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	0209      	lsls	r1, r1, #8
 8001208:	430a      	orrs	r2, r1
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e007      	b.n	800121e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2184      	movs	r1, #132	@ 0x84
 8001218:	0209      	lsls	r1, r1, #8
 800121a:	430a      	orrs	r2, r1
 800121c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d109      	bne.n	800123a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	0109      	lsls	r1, r1, #4
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	e007      	b.n	800124a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4923      	ldr	r1, [pc, #140]	@ (80012d4 <HAL_I2C_Init+0x144>)
 8001246:	400a      	ands	r2, r1
 8001248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4920      	ldr	r1, [pc, #128]	@ (80012d8 <HAL_I2C_Init+0x148>)
 8001256:	430a      	orrs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	491a      	ldr	r1, [pc, #104]	@ (80012d0 <HAL_I2C_Init+0x140>)
 8001266:	400a      	ands	r2, r1
 8001268:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	431a      	orrs	r2, r3
 8001274:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69d9      	ldr	r1, [r3, #28]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2241      	movs	r2, #65	@ 0x41
 80012ae:	2120      	movs	r1, #32
 80012b0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2242      	movs	r2, #66	@ 0x42
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	f0ffffff 	.word	0xf0ffffff
 80012d0:	ffff7fff 	.word	0xffff7fff
 80012d4:	fffff7ff 	.word	0xfffff7ff
 80012d8:	02008000 	.word	0x02008000

080012dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	000c      	movs	r4, r1
 80012e6:	0010      	movs	r0, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	230a      	movs	r3, #10
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	1c22      	adds	r2, r4, #0
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	2308      	movs	r3, #8
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	1c02      	adds	r2, r0, #0
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	1dbb      	adds	r3, r7, #6
 80012fc:	1c0a      	adds	r2, r1, #0
 80012fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2241      	movs	r2, #65	@ 0x41
 8001304:	5c9b      	ldrb	r3, [r3, r2]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b20      	cmp	r3, #32
 800130a:	d000      	beq.n	800130e <HAL_I2C_Mem_Write+0x32>
 800130c:	e10c      	b.n	8001528 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <HAL_I2C_Mem_Write+0x42>
 8001314:	232c      	movs	r3, #44	@ 0x2c
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0ff      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2240      	movs	r2, #64	@ 0x40
 800132e:	5c9b      	ldrb	r3, [r3, r2]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_I2C_Mem_Write+0x5c>
 8001334:	2302      	movs	r3, #2
 8001336:	e0f8      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2240      	movs	r2, #64	@ 0x40
 800133c:	2101      	movs	r1, #1
 800133e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001340:	f7ff fcbe 	bl	8000cc0 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	0219      	lsls	r1, r3, #8
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2319      	movs	r3, #25
 8001354:	2201      	movs	r2, #1
 8001356:	f000 fc25 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0e3      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2241      	movs	r2, #65	@ 0x41
 8001366:	2121      	movs	r1, #33	@ 0x21
 8001368:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2242      	movs	r2, #66	@ 0x42
 800136e:	2140      	movs	r1, #64	@ 0x40
 8001370:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	222c      	movs	r2, #44	@ 0x2c
 8001382:	18ba      	adds	r2, r7, r2
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	881c      	ldrh	r4, [r3, #0]
 8001392:	2308      	movs	r3, #8
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	230a      	movs	r3, #10
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	8819      	ldrh	r1, [r3, #0]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	0023      	movs	r3, r4
 80013aa:	f000 fb13 	bl	80019d4 <I2C_RequestMemoryWrite>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d005      	beq.n	80013be <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2240      	movs	r2, #64	@ 0x40
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0b5      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2bff      	cmp	r3, #255	@ 0xff
 80013c6:	d911      	bls.n	80013ec <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	22ff      	movs	r2, #255	@ 0xff
 80013cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	045c      	lsls	r4, r3, #17
 80013d8:	230a      	movs	r3, #10
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	8819      	ldrh	r1, [r3, #0]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	0023      	movs	r3, r4
 80013e6:	f000 fdad 	bl	8001f44 <I2C_TransferConfig>
 80013ea:	e012      	b.n	8001412 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	049c      	lsls	r4, r3, #18
 8001400:	230a      	movs	r3, #10
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	8819      	ldrh	r1, [r3, #0]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	0023      	movs	r3, r4
 800140e:	f000 fd99 	bl	8001f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fc11 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e081      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03a      	beq.n	80014d6 <HAL_I2C_Mem_Write+0x1fa>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d136      	bne.n	80014d6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	0013      	movs	r3, r2
 8001472:	2200      	movs	r2, #0
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	f000 fb95 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e053      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	2bff      	cmp	r3, #255	@ 0xff
 800148a:	d911      	bls.n	80014b0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	22ff      	movs	r2, #255	@ 0xff
 8001490:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001496:	b2da      	uxtb	r2, r3
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	045c      	lsls	r4, r3, #17
 800149c:	230a      	movs	r3, #10
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	8819      	ldrh	r1, [r3, #0]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	0023      	movs	r3, r4
 80014aa:	f000 fd4b 	bl	8001f44 <I2C_TransferConfig>
 80014ae:	e012      	b.n	80014d6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	049c      	lsls	r4, r3, #18
 80014c4:	230a      	movs	r3, #10
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0023      	movs	r3, r4
 80014d2:	f000 fd37 	bl	8001f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d198      	bne.n	8001412 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fbf0 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e01a      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2220      	movs	r2, #32
 80014fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	490b      	ldr	r1, [pc, #44]	@ (8001534 <HAL_I2C_Mem_Write+0x258>)
 8001508:	400a      	ands	r2, r1
 800150a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2241      	movs	r2, #65	@ 0x41
 8001510:	2120      	movs	r1, #32
 8001512:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2242      	movs	r2, #66	@ 0x42
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	e000      	b.n	800152a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001528:	2302      	movs	r3, #2
  }
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b007      	add	sp, #28
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	fe00e800 	.word	0xfe00e800

08001538 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	000c      	movs	r4, r1
 8001542:	0010      	movs	r0, r2
 8001544:	0019      	movs	r1, r3
 8001546:	230a      	movs	r3, #10
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	1c22      	adds	r2, r4, #0
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	2308      	movs	r3, #8
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	1dbb      	adds	r3, r7, #6
 8001558:	1c0a      	adds	r2, r1, #0
 800155a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2241      	movs	r2, #65	@ 0x41
 8001560:	5c9b      	ldrb	r3, [r3, r2]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b20      	cmp	r3, #32
 8001566:	d000      	beq.n	800156a <HAL_I2C_Mem_Read+0x32>
 8001568:	e110      	b.n	800178c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_I2C_Mem_Read+0x42>
 8001570:	232c      	movs	r3, #44	@ 0x2c
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e103      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_I2C_Mem_Read+0x5c>
 8001590:	2302      	movs	r3, #2
 8001592:	e0fc      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800159c:	f7ff fb90 	bl	8000cc0 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	0219      	lsls	r1, r3, #8
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2319      	movs	r3, #25
 80015b0:	2201      	movs	r2, #1
 80015b2:	f000 faf7 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2241      	movs	r2, #65	@ 0x41
 80015c2:	2122      	movs	r1, #34	@ 0x22
 80015c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2242      	movs	r2, #66	@ 0x42
 80015ca:	2140      	movs	r1, #64	@ 0x40
 80015cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	222c      	movs	r2, #44	@ 0x2c
 80015de:	18ba      	adds	r2, r7, r2
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ea:	1dbb      	adds	r3, r7, #6
 80015ec:	881c      	ldrh	r4, [r3, #0]
 80015ee:	2308      	movs	r3, #8
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	881a      	ldrh	r2, [r3, #0]
 80015f4:	230a      	movs	r3, #10
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	8819      	ldrh	r1, [r3, #0]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	0023      	movs	r3, r4
 8001606:	f000 fa49 	bl	8001a9c <I2C_RequestMemoryRead>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d005      	beq.n	800161a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2240      	movs	r2, #64	@ 0x40
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0b9      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2bff      	cmp	r3, #255	@ 0xff
 8001622:	d911      	bls.n	8001648 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	22ff      	movs	r2, #255	@ 0xff
 8001628:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162e:	b2da      	uxtb	r2, r3
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	045c      	lsls	r4, r3, #17
 8001634:	230a      	movs	r3, #10
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	8819      	ldrh	r1, [r3, #0]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	4b56      	ldr	r3, [pc, #344]	@ (8001798 <HAL_I2C_Mem_Read+0x260>)
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0023      	movs	r3, r4
 8001642:	f000 fc7f 	bl	8001f44 <I2C_TransferConfig>
 8001646:	e012      	b.n	800166e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001656:	b2da      	uxtb	r2, r3
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	049c      	lsls	r4, r3, #18
 800165c:	230a      	movs	r3, #10
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	8819      	ldrh	r1, [r3, #0]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	4b4c      	ldr	r3, [pc, #304]	@ (8001798 <HAL_I2C_Mem_Read+0x260>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	0023      	movs	r3, r4
 800166a:	f000 fc6b 	bl	8001f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800166e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	0013      	movs	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	f000 fa92 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e082      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03a      	beq.n	800173a <HAL_I2C_Mem_Read+0x202>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d136      	bne.n	800173a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	0013      	movs	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	f000 fa63 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e053      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2bff      	cmp	r3, #255	@ 0xff
 80016ee:	d911      	bls.n	8001714 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	22ff      	movs	r2, #255	@ 0xff
 80016f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	045c      	lsls	r4, r3, #17
 8001700:	230a      	movs	r3, #10
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	8819      	ldrh	r1, [r3, #0]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	0023      	movs	r3, r4
 800170e:	f000 fc19 	bl	8001f44 <I2C_TransferConfig>
 8001712:	e012      	b.n	800173a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	049c      	lsls	r4, r3, #18
 8001728:	230a      	movs	r3, #10
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0023      	movs	r3, r4
 8001736:	f000 fc05 	bl	8001f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d194      	bne.n	800166e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fabe 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e01a      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2220      	movs	r2, #32
 800175e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	490c      	ldr	r1, [pc, #48]	@ (800179c <HAL_I2C_Mem_Read+0x264>)
 800176c:	400a      	ands	r2, r1
 800176e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2241      	movs	r2, #65	@ 0x41
 8001774:	2120      	movs	r1, #32
 8001776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2242      	movs	r2, #66	@ 0x42
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
  }
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b007      	add	sp, #28
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	80002400 	.word	0x80002400
 800179c:	fe00e800 	.word	0xfe00e800

080017a0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	230a      	movs	r3, #10
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	1c0a      	adds	r2, r1, #0
 80017b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2241      	movs	r2, #65	@ 0x41
 80017bc:	5c9b      	ldrb	r3, [r3, r2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d000      	beq.n	80017c6 <HAL_I2C_IsDeviceReady+0x26>
 80017c4:	e0fd      	b.n	80019c2 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	401a      	ands	r2, r3
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d101      	bne.n	80017de <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
 80017dc:	e0f2      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2240      	movs	r2, #64	@ 0x40
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2C_IsDeviceReady+0x4c>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e0eb      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2240      	movs	r2, #64	@ 0x40
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2241      	movs	r2, #65	@ 0x41
 80017f8:	2124      	movs	r1, #36	@ 0x24
 80017fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_I2C_IsDeviceReady+0x7a>
 800180a:	230a      	movs	r3, #10
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	059b      	lsls	r3, r3, #22
 8001812:	0d9b      	lsrs	r3, r3, #22
 8001814:	4a6d      	ldr	r2, [pc, #436]	@ (80019cc <HAL_I2C_IsDeviceReady+0x22c>)
 8001816:	431a      	orrs	r2, r3
 8001818:	e006      	b.n	8001828 <HAL_I2C_IsDeviceReady+0x88>
 800181a:	230a      	movs	r3, #10
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	059b      	lsls	r3, r3, #22
 8001822:	0d9b      	lsrs	r3, r3, #22
 8001824:	4a6a      	ldr	r2, [pc, #424]	@ (80019d0 <HAL_I2C_IsDeviceReady+0x230>)
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fa47 	bl	8000cc0 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2220      	movs	r2, #32
 800183e:	4013      	ands	r3, r2
 8001840:	3b20      	subs	r3, #32
 8001842:	425a      	negs	r2, r3
 8001844:	4153      	adcs	r3, r2
 8001846:	b2da      	uxtb	r2, r3
 8001848:	231f      	movs	r3, #31
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2210      	movs	r2, #16
 8001856:	4013      	ands	r3, r2
 8001858:	3b10      	subs	r3, #16
 800185a:	425a      	negs	r2, r3
 800185c:	4153      	adcs	r3, r2
 800185e:	b2da      	uxtb	r2, r3
 8001860:	231e      	movs	r3, #30
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001866:	e035      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	d01a      	beq.n	80018a4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff fa27 	bl	8000cc0 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <HAL_I2C_IsDeviceReady+0xe4>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10f      	bne.n	80018a4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2241      	movs	r2, #65	@ 0x41
 8001888:	2120      	movs	r1, #32
 800188a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	2220      	movs	r2, #32
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	@ 0x40
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e08f      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2220      	movs	r2, #32
 80018ac:	4013      	ands	r3, r2
 80018ae:	3b20      	subs	r3, #32
 80018b0:	425a      	negs	r2, r3
 80018b2:	4153      	adcs	r3, r2
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	231f      	movs	r3, #31
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2210      	movs	r2, #16
 80018c4:	4013      	ands	r3, r2
 80018c6:	3b10      	subs	r3, #16
 80018c8:	425a      	negs	r2, r3
 80018ca:	4153      	adcs	r3, r2
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	231e      	movs	r3, #30
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018d4:	231f      	movs	r3, #31
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d104      	bne.n	80018e8 <HAL_I2C_IsDeviceReady+0x148>
 80018de:	231e      	movs	r3, #30
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0bf      	beq.n	8001868 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2210      	movs	r2, #16
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d01a      	beq.n	800192c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0013      	movs	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	f000 f94e 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e059      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2220      	movs	r2, #32
 8001916:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2241      	movs	r2, #65	@ 0x41
 800191c:	2120      	movs	r1, #32
 800191e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	@ 0x40
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e04b      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	0013      	movs	r3, r2
 8001936:	2200      	movs	r2, #0
 8001938:	2120      	movs	r1, #32
 800193a:	f000 f933 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e03e      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2210      	movs	r2, #16
 800194c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2220      	movs	r2, #32
 8001954:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d119      	bne.n	8001992 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	01c9      	lsls	r1, r1, #7
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	0013      	movs	r3, r2
 800197a:	2200      	movs	r2, #0
 800197c:	2120      	movs	r1, #32
 800197e:	f000 f911 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e01c      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2220      	movs	r2, #32
 8001990:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d900      	bls.n	80019a2 <HAL_I2C_IsDeviceReady+0x202>
 80019a0:	e72f      	b.n	8001802 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2241      	movs	r2, #65	@ 0x41
 80019a6:	2120      	movs	r1, #32
 80019a8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	2220      	movs	r2, #32
 80019b0:	431a      	orrs	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2240      	movs	r2, #64	@ 0x40
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
  }
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b008      	add	sp, #32
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	02002000 	.word	0x02002000
 80019d0:	02002800 	.word	0x02002800

080019d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	000c      	movs	r4, r1
 80019de:	0010      	movs	r0, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	250a      	movs	r5, #10
 80019e4:	197b      	adds	r3, r7, r5
 80019e6:	1c22      	adds	r2, r4, #0
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	2308      	movs	r3, #8
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	1c02      	adds	r2, r0, #0
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	1dbb      	adds	r3, r7, #6
 80019f4:	1c0a      	adds	r2, r1, #0
 80019f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	045c      	lsls	r4, r3, #17
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	8819      	ldrh	r1, [r3, #0]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <I2C_RequestMemoryWrite+0xc4>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	0023      	movs	r3, r4
 8001a0e:	f000 fa99 	bl	8001f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 f911 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e033      	b.n	8001a8e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a2e:	2308      	movs	r3, #8
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a3c:	e019      	b.n	8001a72 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a3e:	2308      	movs	r3, #8
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a52:	6a39      	ldr	r1, [r7, #32]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f8f2 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e014      	b.n	8001a8e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a64:	2308      	movs	r3, #8
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	f000 f890 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	80002000 	.word	0x80002000

08001a9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	250a      	movs	r5, #10
 8001aac:	197b      	adds	r3, r7, r5
 8001aae:	1c22      	adds	r2, r4, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	1c02      	adds	r2, r0, #0
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	1dbb      	adds	r3, r7, #6
 8001abc:	1c0a      	adds	r2, r1, #0
 8001abe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	197b      	adds	r3, r7, r5
 8001ac8:	8819      	ldrh	r1, [r3, #0]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <I2C_RequestMemoryRead+0xc0>)
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f000 fa37 	bl	8001f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 f8af 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e033      	b.n	8001b52 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aea:	1dbb      	adds	r3, r7, #6
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001af2:	2308      	movs	r3, #8
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b00:	e019      	b.n	8001b36 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b02:	2308      	movs	r3, #8
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b16:	6a39      	ldr	r1, [r7, #32]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 f890 	bl	8001c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e014      	b.n	8001b52 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b28:	2308      	movs	r3, #8
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b36:	6a3a      	ldr	r2, [r7, #32]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	0013      	movs	r3, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	2140      	movs	r1, #64	@ 0x40
 8001b44:	f000 f82e 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d001      	beq.n	8001b50 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	80002000 	.word	0x80002000

08001b60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d007      	beq.n	8001b9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	619a      	str	r2, [r3, #24]
  }
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb4:	e030      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	d02d      	beq.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7ff f880 	bl	8000cc0 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d302      	bcc.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d122      	bne.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	425a      	negs	r2, r3
 8001be2:	4153      	adcs	r3, r2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	001a      	movs	r2, r3
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d113      	bne.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2241      	movs	r2, #65	@ 0x41
 8001c00:	2120      	movs	r1, #32
 8001c02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2242      	movs	r2, #66	@ 0x42
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e00f      	b.n	8001c38 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4013      	ands	r3, r2
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	425a      	negs	r2, r3
 8001c28:	4153      	adcs	r3, r2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d0bf      	beq.n	8001bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c4c:	e032      	b.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 f87d 	bl	8001d54 <I2C_IsErrorOccurred>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e030      	b.n	8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3301      	adds	r3, #1
 8001c66:	d025      	beq.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c68:	f7ff f82a 	bl	8000cc0 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d302      	bcc.n	8001c7e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11a      	bne.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d013      	beq.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	2220      	movs	r2, #32
 8001c92:	431a      	orrs	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2241      	movs	r2, #65	@ 0x41
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2242      	movs	r2, #66	@ 0x42
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	2100      	movs	r1, #0
 8001cae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e007      	b.n	8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d1c5      	bne.n	8001c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd8:	e02f      	b.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f837 	bl	8001d54 <I2C_IsErrorOccurred>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e02d      	b.n	8001d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cee:	f7fe ffe7 	bl	8000cc0 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d302      	bcc.n	8001d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11a      	bne.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d013      	beq.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	2220      	movs	r2, #32
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2241      	movs	r2, #65	@ 0x41
 8001d22:	2120      	movs	r1, #32
 8001d24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2242      	movs	r2, #66	@ 0x42
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2240      	movs	r2, #64	@ 0x40
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e007      	b.n	8001d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2220      	movs	r2, #32
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d1c8      	bne.n	8001cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2327      	movs	r3, #39	@ 0x27
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <I2C_IsErrorOccurred+0x2e>
 8001d80:	e079      	b.n	8001e76 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2210      	movs	r2, #16
 8001d88:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d8a:	e057      	b.n	8001e3c <I2C_IsErrorOccurred+0xe8>
 8001d8c:	2227      	movs	r2, #39	@ 0x27
 8001d8e:	18bb      	adds	r3, r7, r2
 8001d90:	18ba      	adds	r2, r7, r2
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	d04f      	beq.n	8001e3c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7fe ff90 	bl	8000cc0 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <I2C_IsErrorOccurred+0x5e>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d144      	bne.n	8001e3c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	01db      	lsls	r3, r3, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dc0:	2013      	movs	r0, #19
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	2142      	movs	r1, #66	@ 0x42
 8001dc8:	5c52      	ldrb	r2, [r2, r1]
 8001dca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d126      	bne.n	8001e2e <I2C_IsErrorOccurred+0xda>
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	01db      	lsls	r3, r3, #7
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d021      	beq.n	8001e2e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d01d      	beq.n	8001e2e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	01c9      	lsls	r1, r1, #7
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e04:	f7fe ff5c 	bl	8000cc0 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0c:	e00f      	b.n	8001e2e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e0e:	f7fe ff57 	bl	8000cc0 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b19      	cmp	r3, #25
 8001e1a:	d908      	bls.n	8001e2e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	4313      	orrs	r3, r2
 8001e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e24:	2327      	movs	r3, #39	@ 0x27
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]

              break;
 8001e2c:	e006      	b.n	8001e3c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d1e8      	bne.n	8001e0e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2220      	movs	r2, #32
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d004      	beq.n	8001e54 <I2C_IsErrorOccurred+0x100>
 8001e4a:	2327      	movs	r3, #39	@ 0x27
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d09b      	beq.n	8001d8c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e54:	2327      	movs	r3, #39	@ 0x27
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2220      	movs	r2, #32
 8001e64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e6e:	2327      	movs	r3, #39	@ 0x27
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d00c      	beq.n	8001ea2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e9a:	2327      	movs	r3, #39	@ 0x27
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d00c      	beq.n	8001ec6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	00d2      	lsls	r2, r2, #3
 8001ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ebe:	2327      	movs	r3, #39	@ 0x27
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d00c      	beq.n	8001eea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ee2:	2327      	movs	r3, #39	@ 0x27
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001eea:	2327      	movs	r3, #39	@ 0x27
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01d      	beq.n	8001f30 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7ff fe32 	bl	8001b60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <I2C_IsErrorOccurred+0x1ec>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2241      	movs	r2, #65	@ 0x41
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2242      	movs	r2, #66	@ 0x42
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2240      	movs	r2, #64	@ 0x40
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f30:	2327      	movs	r3, #39	@ 0x27
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b00a      	add	sp, #40	@ 0x28
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	fe00e800 	.word	0xfe00e800

08001f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	0008      	movs	r0, r1
 8001f4e:	0011      	movs	r1, r2
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	240a      	movs	r4, #10
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	1c02      	adds	r2, r0, #0
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	2009      	movs	r0, #9
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	1c0a      	adds	r2, r1, #0
 8001f60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	059b      	lsls	r3, r3, #22
 8001f68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f6a:	183b      	adds	r3, r7, r0
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0419      	lsls	r1, r3, #16
 8001f70:	23ff      	movs	r3, #255	@ 0xff
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f8e:	0d51      	lsrs	r1, r2, #21
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	00d2      	lsls	r2, r2, #3
 8001f94:	400a      	ands	r2, r1
 8001f96:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <I2C_TransferConfig+0x70>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	43d2      	mvns	r2, r2
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b007      	add	sp, #28
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	03ff63ff 	.word	0x03ff63ff

08001fb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2241      	movs	r2, #65	@ 0x41
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d138      	bne.n	8002040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e032      	b.n	8002042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	@ 0x40
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2241      	movs	r2, #65	@ 0x41
 8001fe8:	2124      	movs	r1, #36	@ 0x24
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4911      	ldr	r1, [pc, #68]	@ (800204c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2241      	movs	r2, #65	@ 0x41
 8002030:	2120      	movs	r1, #32
 8002032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	ffffefff 	.word	0xffffefff

08002050 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2241      	movs	r2, #65	@ 0x41
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	d139      	bne.n	80020da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2240      	movs	r2, #64	@ 0x40
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002070:	2302      	movs	r3, #2
 8002072:	e033      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	@ 0x40
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2241      	movs	r2, #65	@ 0x41
 8002080:	2124      	movs	r1, #36	@ 0x24
 8002082:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	438a      	bics	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	@ 0x41
 80020ca:	2120      	movs	r1, #32
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b004      	add	sp, #16
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	fffff0ff 	.word	0xfffff0ff

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1d0      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d100      	bne.n	8002106 <HAL_RCC_OscConfig+0x1e>
 8002104:	e069      	b.n	80021da <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	4bc8      	ldr	r3, [pc, #800]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2238      	movs	r2, #56	@ 0x38
 800210c:	4013      	ands	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b08      	cmp	r3, #8
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d15d      	bne.n	80021da <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1bc      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	025b      	lsls	r3, r3, #9
 800212a:	429a      	cmp	r2, r3
 800212c:	d107      	bne.n	800213e <HAL_RCC_OscConfig+0x56>
 800212e:	4bbe      	ldr	r3, [pc, #760]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4bbd      	ldr	r3, [pc, #756]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	0249      	lsls	r1, r1, #9
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e020      	b.n	8002180 <HAL_RCC_OscConfig+0x98>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23a0      	movs	r3, #160	@ 0xa0
 8002144:	02db      	lsls	r3, r3, #11
 8002146:	429a      	cmp	r2, r3
 8002148:	d10e      	bne.n	8002168 <HAL_RCC_OscConfig+0x80>
 800214a:	4bb7      	ldr	r3, [pc, #732]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4bb6      	ldr	r3, [pc, #728]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002150:	2180      	movs	r1, #128	@ 0x80
 8002152:	02c9      	lsls	r1, r1, #11
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4bb3      	ldr	r3, [pc, #716]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4bb2      	ldr	r3, [pc, #712]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0249      	lsls	r1, r1, #9
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002168:	4baf      	ldr	r3, [pc, #700]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4bae      	ldr	r3, [pc, #696]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800216e:	49af      	ldr	r1, [pc, #700]	@ (800242c <HAL_RCC_OscConfig+0x344>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4bac      	ldr	r3, [pc, #688]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4bab      	ldr	r3, [pc, #684]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800217a:	49ad      	ldr	r1, [pc, #692]	@ (8002430 <HAL_RCC_OscConfig+0x348>)
 800217c:	400a      	ands	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d014      	beq.n	80021b2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fd9a 	bl	8000cc0 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002192:	f7fe fd95 	bl	8000cc0 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	@ 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e17b      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0xaa>
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd85 	bl	8000cc0 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fd80 	bl	8000cc0 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e166      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b96      	ldr	r3, [pc, #600]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	4013      	ands	r3, r2
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0xfe>
 80021e4:	e086      	b.n	80022f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4b90      	ldr	r3, [pc, #576]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	@ 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12f      	bne.n	8002256 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e14c      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b89      	ldr	r3, [pc, #548]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a8b      	ldr	r2, [pc, #556]	@ (8002434 <HAL_RCC_OscConfig+0x34c>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	021a      	lsls	r2, r3, #8
 8002212:	4b85      	ldr	r3, [pc, #532]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d112      	bne.n	8002244 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800221e:	4b82      	ldr	r3, [pc, #520]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a85      	ldr	r2, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x350>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002232:	4b7d      	ldr	r3, [pc, #500]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	4a7f      	ldr	r2, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x354>)
 800223e:	40da      	lsrs	r2, r3
 8002240:	4b7f      	ldr	r3, [pc, #508]	@ (8002440 <HAL_RCC_OscConfig+0x358>)
 8002242:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002244:	4b7f      	ldr	r3, [pc, #508]	@ (8002444 <HAL_RCC_OscConfig+0x35c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe fcdd 	bl	8000c08 <HAL_InitTick>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d050      	beq.n	80022f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e122      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d030      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800225e:	4b72      	ldr	r3, [pc, #456]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x350>)
 8002264:	4013      	ands	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	4b6e      	ldr	r3, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002272:	4b6d      	ldr	r3, [pc, #436]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b6c      	ldr	r3, [pc, #432]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	0049      	lsls	r1, r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fd1e 	bl	8000cc0 <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800228a:	f7fe fd19 	bl	8000cc0 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0ff      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b62      	ldr	r3, [pc, #392]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a61      	ldr	r2, [pc, #388]	@ (8002434 <HAL_RCC_OscConfig+0x34c>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e019      	b.n	80022f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80022c0:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80022c6:	4960      	ldr	r1, [pc, #384]	@ (8002448 <HAL_RCC_OscConfig+0x360>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fcf8 	bl	8000cc0 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022d6:	f7fe fcf3 	bl	8000cc0 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0d9      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2208      	movs	r2, #8
 80022fa:	4013      	ands	r3, r2
 80022fc:	d042      	beq.n	8002384 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80022fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2238      	movs	r2, #56	@ 0x38
 8002304:	4013      	ands	r3, r2
 8002306:	2b18      	cmp	r3, #24
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d138      	bne.n	8002384 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0c2      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800231e:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002320:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fcc9 	bl	8000cc0 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002334:	f7fe fcc4 	bl	8000cc0 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0aa      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d0f1      	beq.n	8002334 <HAL_RCC_OscConfig+0x24c>
 8002350:	e018      	b.n	8002384 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002352:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002354:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002356:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 8002358:	2101      	movs	r1, #1
 800235a:	438a      	bics	r2, r1
 800235c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fcaf 	bl	8000cc0 <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002368:	f7fe fcaa 	bl	8000cc0 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e090      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800237a:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d1f1      	bne.n	8002368 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2204      	movs	r2, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_RCC_OscConfig+0x2a8>
 800238e:	e084      	b.n	800249a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2238      	movs	r2, #56	@ 0x38
 800239e:	4013      	ands	r3, r2
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d000      	beq.n	80023ae <HAL_RCC_OscConfig+0x2c6>
 80023ac:	e075      	b.n	800249a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e074      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2e0>
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x31a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x302>
 80023d0:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023d6:	2104      	movs	r1, #4
 80023d8:	430a      	orrs	r2, r1
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x31a>
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	438a      	bics	r2, r1
 80023f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x340>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	438a      	bics	r2, r1
 8002400:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fc59 	bl	8000cc0 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fc54 	bl	8000cc0 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <HAL_RCC_OscConfig+0x364>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d915      	bls.n	8002450 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e039      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
 8002428:	40021000 	.word	0x40021000
 800242c:	fffeffff 	.word	0xfffeffff
 8002430:	fffbffff 	.word	0xfffbffff
 8002434:	ffff80ff 	.word	0xffff80ff
 8002438:	ffffc7ff 	.word	0xffffc7ff
 800243c:	02dc6c00 	.word	0x02dc6c00
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004
 8002448:	fffffeff 	.word	0xfffffeff
 800244c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_RCC_OscConfig+0x3bc>)
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d0dc      	beq.n	8002414 <HAL_RCC_OscConfig+0x32c>
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fc30 	bl	8000cc0 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002464:	e009      	b.n	800247a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fc2b 	bl	8000cc0 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_RCC_OscConfig+0x3c0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e010      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_RCC_OscConfig+0x3bc>)
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002484:	230f      	movs	r3, #15
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_OscConfig+0x3bc>)
 8002490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <HAL_RCC_OscConfig+0x3bc>)
 8002494:	4905      	ldr	r1, [pc, #20]	@ (80024ac <HAL_RCC_OscConfig+0x3c4>)
 8002496:	400a      	ands	r2, r1
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b006      	add	sp, #24
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	00001388 	.word	0x00001388
 80024ac:	efffffff 	.word	0xefffffff

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0e9      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b76      	ldr	r3, [pc, #472]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2207      	movs	r2, #7
 80024ca:	4013      	ands	r3, r2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d91e      	bls.n	8002510 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b73      	ldr	r3, [pc, #460]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2207      	movs	r2, #7
 80024d8:	4393      	bics	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	4b70      	ldr	r3, [pc, #448]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e4:	f7fe fbec 	bl	8000cc0 <HAL_GetTick>
 80024e8:	0003      	movs	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ec:	e009      	b.n	8002502 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024ee:	f7fe fbe7 	bl	8000cc0 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	4a6a      	ldr	r2, [pc, #424]	@ (80026a4 <HAL_RCC_ClockConfig+0x1f4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0ca      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002502:	4b67      	ldr	r3, [pc, #412]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2207      	movs	r2, #7
 8002508:	4013      	ands	r3, r2
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d017      	beq.n	800254a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002524:	4b60      	ldr	r3, [pc, #384]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a60      	ldr	r2, [pc, #384]	@ (80026ac <HAL_RCC_ClockConfig+0x1fc>)
 800252a:	401a      	ands	r2, r3
 800252c:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	21b0      	movs	r1, #176	@ 0xb0
 8002530:	0109      	lsls	r1, r1, #4
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002536:	4b5c      	ldr	r3, [pc, #368]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4a5d      	ldr	r2, [pc, #372]	@ (80026b0 <HAL_RCC_ClockConfig+0x200>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b58      	ldr	r3, [pc, #352]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	d055      	beq.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002554:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	221c      	movs	r2, #28
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4b51      	ldr	r3, [pc, #324]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002570:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	4013      	ands	r3, r2
 800257a:	d11f      	bne.n	80025bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e08b      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4013      	ands	r3, r2
 8002592:	d113      	bne.n	80025bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e07f      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d106      	bne.n	80025ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80025a0:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	2202      	movs	r2, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e074      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e06d      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2207      	movs	r2, #7
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d0:	f7fe fb76 	bl	8000cc0 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d8:	e009      	b.n	80025ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe fb71 	bl	8000cc0 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a2f      	ldr	r2, [pc, #188]	@ (80026a4 <HAL_RCC_ClockConfig+0x1f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e054      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2e      	ldr	r3, [pc, #184]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2238      	movs	r2, #56	@ 0x38
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1ec      	bne.n	80025da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2207      	movs	r2, #7
 8002606:	4013      	ands	r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d21e      	bcs.n	800264c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2207      	movs	r2, #7
 8002614:	4393      	bics	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002620:	f7fe fb4e 	bl	8000cc0 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002628:	e009      	b.n	800263e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800262a:	f7fe fb49 	bl	8000cc0 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e02c      	b.n	8002698 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800263e:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2204      	movs	r2, #4
 8002652:	4013      	ands	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002656:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a16      	ldr	r2, [pc, #88]	@ (80026b4 <HAL_RCC_ClockConfig+0x204>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800266a:	f000 f82b 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800266e:	0001      	movs	r1, r0
 8002670:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	220f      	movs	r2, #15
 8002678:	401a      	ands	r2, r3
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_RCC_ClockConfig+0x208>)
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	58d3      	ldr	r3, [r2, r3]
 8002680:	221f      	movs	r2, #31
 8002682:	4013      	ands	r3, r2
 8002684:	000a      	movs	r2, r1
 8002686:	40da      	lsrs	r2, r3
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_ClockConfig+0x20c>)
 800268a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_RCC_ClockConfig+0x210>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe fab9 	bl	8000c08 <HAL_InitTick>
 8002696:	0003      	movs	r3, r0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40022000 	.word	0x40022000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	40021000 	.word	0x40021000
 80026ac:	ffff84ff 	.word	0xffff84ff
 80026b0:	fffff0ff 	.word	0xfffff0ff
 80026b4:	ffff8fff 	.word	0xffff8fff
 80026b8:	08003e5c 	.word	0x08003e5c
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_RCC_GetSysClockFreq+0x78>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2238      	movs	r2, #56	@ 0x38
 80026d0:	4013      	ands	r3, r2
 80026d2:	d10f      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_GetSysClockFreq+0x78>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0adb      	lsrs	r3, r3, #11
 80026da:	2207      	movs	r2, #7
 80026dc:	4013      	ands	r3, r2
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	0013      	movs	r3, r2
 80026e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	4815      	ldr	r0, [pc, #84]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x7c>)
 80026ea:	f7fd fd17 	bl	800011c <__udivsi3>
 80026ee:	0003      	movs	r3, r0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	e01e      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_RCC_GetSysClockFreq+0x78>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2238      	movs	r2, #56	@ 0x38
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x80>)
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	e015      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCC_GetSysClockFreq+0x78>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2238      	movs	r2, #56	@ 0x38
 800270c:	4013      	ands	r3, r2
 800270e:	2b20      	cmp	r3, #32
 8002710:	d103      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800271a:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_RCC_GetSysClockFreq+0x78>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	@ 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	2b18      	cmp	r3, #24
 8002724:	d103      	bne.n	800272e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002726:	23fa      	movs	r3, #250	@ 0xfa
 8002728:	01db      	lsls	r3, r3, #7
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	e001      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002732:	687b      	ldr	r3, [r7, #4]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	02dc6c00 	.word	0x02dc6c00
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <HAL_RCC_GetHCLKFreq+0x10>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002760:	f7ff fff2 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002764:	0001      	movs	r1, r0
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0b1b      	lsrs	r3, r3, #12
 800276c:	2207      	movs	r2, #7
 800276e:	401a      	ands	r2, r3
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	58d3      	ldr	r3, [r2, r3]
 8002776:	221f      	movs	r2, #31
 8002778:	4013      	ands	r3, r2
 800277a:	40d9      	lsrs	r1, r3
 800277c:	000b      	movs	r3, r1
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	08003e9c 	.word	0x08003e9c

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002794:	2313      	movs	r3, #19
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279c:	2312      	movs	r3, #18
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027b0:	e079      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2011      	movs	r0, #17
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	4013      	ands	r3, r2
 80027c4:	d110      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ca:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027d4:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80027e8:	4b58      	ldr	r3, [pc, #352]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027ec:	23c0      	movs	r3, #192	@ 0xc0
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d019      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d014      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002804:	4b51      	ldr	r3, [pc, #324]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	4a51      	ldr	r2, [pc, #324]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800280a:	4013      	ands	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b4f      	ldr	r3, [pc, #316]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002810:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002812:	4b4e      	ldr	r3, [pc, #312]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002814:	2180      	movs	r1, #128	@ 0x80
 8002816:	0249      	lsls	r1, r1, #9
 8002818:	430a      	orrs	r2, r1
 800281a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800281e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002820:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002822:	494c      	ldr	r1, [pc, #304]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002824:	400a      	ands	r2, r1
 8002826:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002828:	4b48      	ldr	r3, [pc, #288]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d016      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fa43 	bl	8000cc0 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800283e:	e00c      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fa3e 	bl	8000cc0 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4a43      	ldr	r2, [pc, #268]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d904      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002850:	2313      	movs	r3, #19
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	2203      	movs	r2, #3
 8002856:	701a      	strb	r2, [r3, #0]
          break;
 8002858:	e004      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800285a:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	2202      	movs	r2, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d0ed      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002864:	2313      	movs	r3, #19
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	4b33      	ldr	r3, [pc, #204]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800287e:	430a      	orrs	r2, r1
 8002880:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002882:	e005      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	2312      	movs	r3, #18
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2213      	movs	r2, #19
 800288a:	18ba      	adds	r2, r7, r2
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002890:	2311      	movs	r3, #17
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800289c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800289e:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a0:	492e      	ldr	r1, [pc, #184]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	2203      	movs	r2, #3
 80028b6:	4393      	bics	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2240      	movs	r2, #64	@ 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ce:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	4013      	ands	r3, r2
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ee:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	0899      	lsrs	r1, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	4b14      	ldr	r3, [pc, #80]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800291c:	430a      	orrs	r2, r1
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da09      	bge.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002928:	4b08      	ldr	r3, [pc, #32]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	22e0      	movs	r2, #224	@ 0xe0
 800292e:	4393      	bics	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4b05      	ldr	r3, [pc, #20]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800293c:	2312      	movs	r3, #18
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	fffffcff 	.word	0xfffffcff
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	00001388 	.word	0x00001388
 800295c:	efffffff 	.word	0xefffffff
 8002960:	ffffcfff 	.word	0xffffcfff
 8002964:	ffff3fff 	.word	0xffff3fff

08002968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e046      	b.n	8002a08 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2288      	movs	r2, #136	@ 0x88
 800297e:	589b      	ldr	r3, [r3, r2]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2284      	movs	r2, #132	@ 0x84
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f7fe f806 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2288      	movs	r2, #136	@ 0x88
 8002998:	2124      	movs	r1, #36	@ 0x24
 800299a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fa4e 	bl	8002e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f8cc 	bl	8002b5c <UART_SetConfig>
 80029c4:	0003      	movs	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01c      	b.n	8002a08 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	490d      	ldr	r1, [pc, #52]	@ (8002a10 <HAL_UART_Init+0xa8>)
 80029da:	400a      	ands	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	212a      	movs	r1, #42	@ 0x2a
 80029ea:	438a      	bics	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fadd 	bl	8002fc0 <UART_CheckIdleState>
 8002a06:	0003      	movs	r3, r0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	ffffb7ff 	.word	0xffffb7ff

08002a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	1dbb      	adds	r3, r7, #6
 8002a22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2288      	movs	r2, #136	@ 0x88
 8002a28:	589b      	ldr	r3, [r3, r2]
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d000      	beq.n	8002a30 <HAL_UART_Transmit+0x1c>
 8002a2e:	e090      	b.n	8002b52 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_Transmit+0x2a>
 8002a36:	1dbb      	adds	r3, r7, #6
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e088      	b.n	8002b54 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d109      	bne.n	8002a62 <HAL_UART_Transmit+0x4e>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e078      	b.n	8002b54 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2290      	movs	r2, #144	@ 0x90
 8002a66:	2100      	movs	r1, #0
 8002a68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2288      	movs	r2, #136	@ 0x88
 8002a6e:	2121      	movs	r1, #33	@ 0x21
 8002a70:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a72:	f7fe f925 	bl	8000cc0 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1dba      	adds	r2, r7, #6
 8002a7e:	2154      	movs	r1, #84	@ 0x54
 8002a80:	8812      	ldrh	r2, [r2, #0]
 8002a82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1dba      	adds	r2, r7, #6
 8002a88:	2156      	movs	r1, #86	@ 0x56
 8002a8a:	8812      	ldrh	r2, [r2, #0]
 8002a8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x98>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab4:	e030      	b.n	8002b18 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	0013      	movs	r3, r2
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	@ 0x80
 8002ac4:	f000 fb26 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2288      	movs	r2, #136	@ 0x88
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e03d      	b.n	8002b54 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	05d2      	lsls	r2, r2, #23
 8002aea:	0dd2      	lsrs	r2, r2, #23
 8002aec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2256      	movs	r2, #86	@ 0x56
 8002b0a:	5a9b      	ldrh	r3, [r3, r2]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b299      	uxth	r1, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2256      	movs	r2, #86	@ 0x56
 8002b16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2256      	movs	r2, #86	@ 0x56
 8002b1c:	5a9b      	ldrh	r3, [r3, r2]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1c8      	bne.n	8002ab6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2140      	movs	r1, #64	@ 0x40
 8002b32:	f000 faef 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2288      	movs	r2, #136	@ 0x88
 8002b3e:	2120      	movs	r1, #32
 8002b40:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e006      	b.n	8002b54 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2288      	movs	r2, #136	@ 0x88
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b008      	add	sp, #32
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b64:	231e      	movs	r3, #30
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4aab      	ldr	r2, [pc, #684]	@ (8002e38 <UART_SetConfig+0x2dc>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4aa6      	ldr	r2, [pc, #664]	@ (8002e3c <UART_SetConfig+0x2e0>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a9d      	ldr	r2, [pc, #628]	@ (8002e40 <UART_SetConfig+0x2e4>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	220f      	movs	r2, #15
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a93      	ldr	r2, [pc, #588]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d127      	bne.n	8002c4a <UART_SetConfig+0xee>
 8002bfa:	4b93      	ldr	r3, [pc, #588]	@ (8002e48 <UART_SetConfig+0x2ec>)
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	2203      	movs	r2, #3
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d017      	beq.n	8002c36 <UART_SetConfig+0xda>
 8002c06:	d81b      	bhi.n	8002c40 <UART_SetConfig+0xe4>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d00a      	beq.n	8002c22 <UART_SetConfig+0xc6>
 8002c0c:	d818      	bhi.n	8002c40 <UART_SetConfig+0xe4>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <UART_SetConfig+0xbc>
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d00a      	beq.n	8002c2c <UART_SetConfig+0xd0>
 8002c16:	e013      	b.n	8002c40 <UART_SetConfig+0xe4>
 8002c18:	231f      	movs	r3, #31
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e021      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c22:	231f      	movs	r3, #31
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e01c      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c2c:	231f      	movs	r3, #31
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e017      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c36:	231f      	movs	r3, #31
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e012      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2210      	movs	r2, #16
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e00d      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7f      	ldr	r2, [pc, #508]	@ (8002e4c <UART_SetConfig+0x2f0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d104      	bne.n	8002c5e <UART_SetConfig+0x102>
 8002c54:	231f      	movs	r3, #31
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e003      	b.n	8002c66 <UART_SetConfig+0x10a>
 8002c5e:	231f      	movs	r3, #31
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2210      	movs	r2, #16
 8002c64:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d000      	beq.n	8002c74 <UART_SetConfig+0x118>
 8002c72:	e06f      	b.n	8002d54 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002c74:	231f      	movs	r3, #31
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d01f      	beq.n	8002cbe <UART_SetConfig+0x162>
 8002c7e:	dc22      	bgt.n	8002cc6 <UART_SetConfig+0x16a>
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d017      	beq.n	8002cb4 <UART_SetConfig+0x158>
 8002c84:	dc1f      	bgt.n	8002cc6 <UART_SetConfig+0x16a>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <UART_SetConfig+0x134>
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d005      	beq.n	8002c9a <UART_SetConfig+0x13e>
 8002c8e:	e01a      	b.n	8002cc6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff fd64 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8002c94:	0003      	movs	r3, r0
 8002c96:	61bb      	str	r3, [r7, #24]
        break;
 8002c98:	e01c      	b.n	8002cd4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <UART_SetConfig+0x2ec>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	4869      	ldr	r0, [pc, #420]	@ (8002e50 <UART_SetConfig+0x2f4>)
 8002caa:	f7fd fa37 	bl	800011c <__udivsi3>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	61bb      	str	r3, [r7, #24]
        break;
 8002cb2:	e00f      	b.n	8002cd4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb4:	f7ff fd06 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61bb      	str	r3, [r7, #24]
        break;
 8002cbc:	e00a      	b.n	8002cd4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	61bb      	str	r3, [r7, #24]
        break;
 8002cc4:	e006      	b.n	8002cd4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cca:	231e      	movs	r3, #30
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
        break;
 8002cd2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <UART_SetConfig+0x180>
 8002cda:	e097      	b.n	8002e0c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <UART_SetConfig+0x2f8>)
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	5ad3      	ldrh	r3, [r2, r3]
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	69b8      	ldr	r0, [r7, #24]
 8002cea:	f7fd fa17 	bl	800011c <__udivsi3>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	005a      	lsls	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	18d2      	adds	r2, r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f7fd fa0b 	bl	800011c <__udivsi3>
 8002d06:	0003      	movs	r3, r0
 8002d08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d91c      	bls.n	8002d4a <UART_SetConfig+0x1ee>
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d217      	bcs.n	8002d4a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	200e      	movs	r0, #14
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	210f      	movs	r1, #15
 8002d24:	438a      	bics	r2, r1
 8002d26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4013      	ands	r3, r2
 8002d32:	b299      	uxth	r1, r3
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	183a      	adds	r2, r7, r0
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	183a      	adds	r2, r7, r0
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e060      	b.n	8002e0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d4a:	231e      	movs	r3, #30
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e05b      	b.n	8002e0c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d54:	231f      	movs	r3, #31
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d01f      	beq.n	8002d9e <UART_SetConfig+0x242>
 8002d5e:	dc22      	bgt.n	8002da6 <UART_SetConfig+0x24a>
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d017      	beq.n	8002d94 <UART_SetConfig+0x238>
 8002d64:	dc1f      	bgt.n	8002da6 <UART_SetConfig+0x24a>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <UART_SetConfig+0x214>
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d005      	beq.n	8002d7a <UART_SetConfig+0x21e>
 8002d6e:	e01a      	b.n	8002da6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d70:	f7ff fcf4 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8002d74:	0003      	movs	r3, r0
 8002d76:	61bb      	str	r3, [r7, #24]
        break;
 8002d78:	e01c      	b.n	8002db4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d7a:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <UART_SetConfig+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2207      	movs	r2, #7
 8002d82:	4013      	ands	r3, r2
 8002d84:	3301      	adds	r3, #1
 8002d86:	0019      	movs	r1, r3
 8002d88:	4831      	ldr	r0, [pc, #196]	@ (8002e50 <UART_SetConfig+0x2f4>)
 8002d8a:	f7fd f9c7 	bl	800011c <__udivsi3>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	61bb      	str	r3, [r7, #24]
        break;
 8002d92:	e00f      	b.n	8002db4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d94:	f7ff fc96 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	61bb      	str	r3, [r7, #24]
        break;
 8002d9c:	e00a      	b.n	8002db4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	61bb      	str	r3, [r7, #24]
        break;
 8002da4:	e006      	b.n	8002db4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002daa:	231e      	movs	r3, #30
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
        break;
 8002db2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d028      	beq.n	8002e0c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbe:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <UART_SetConfig+0x2f8>)
 8002dc0:	0052      	lsls	r2, r2, #1
 8002dc2:	5ad3      	ldrh	r3, [r2, r3]
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	69b8      	ldr	r0, [r7, #24]
 8002dc8:	f7fd f9a8 	bl	800011c <__udivsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	001a      	movs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	18d2      	adds	r2, r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0019      	movs	r1, r3
 8002dde:	0010      	movs	r0, r2
 8002de0:	f7fd f99c 	bl	800011c <__udivsi3>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d90a      	bls.n	8002e04 <UART_SetConfig+0x2a8>
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d205      	bcs.n	8002e04 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e003      	b.n	8002e0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e04:	231e      	movs	r3, #30
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	226a      	movs	r2, #106	@ 0x6a
 8002e10:	2101      	movs	r1, #1
 8002e12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2268      	movs	r2, #104	@ 0x68
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e28:	231e      	movs	r3, #30
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b008      	add	sp, #32
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	cfff69f3 	.word	0xcfff69f3
 8002e3c:	ffffcfff 	.word	0xffffcfff
 8002e40:	11fff4ff 	.word	0x11fff4ff
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40004400 	.word	0x40004400
 8002e50:	02dc6c00 	.word	0x02dc6c00
 8002e54:	08003ebc 	.word	0x08003ebc

08002e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	2208      	movs	r2, #8
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a4a      	ldr	r2, [pc, #296]	@ (8002f9c <UART_AdvFeatureConfig+0x144>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	2201      	movs	r2, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a43      	ldr	r2, [pc, #268]	@ (8002fa0 <UART_AdvFeatureConfig+0x148>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa4 <UART_AdvFeatureConfig+0x14c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <UART_AdvFeatureConfig+0x150>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	2210      	movs	r2, #16
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8002fac <UART_AdvFeatureConfig+0x154>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	2220      	movs	r2, #32
 8002f10:	4013      	ands	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	@ (8002fb0 <UART_AdvFeatureConfig+0x158>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	2240      	movs	r2, #64	@ 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <UART_AdvFeatureConfig+0x15c>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	035b      	lsls	r3, r3, #13
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10b      	bne.n	8002f72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	@ (8002fb8 <UART_AdvFeatureConfig+0x160>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	@ (8002fbc <UART_AdvFeatureConfig+0x164>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	ffff7fff 	.word	0xffff7fff
 8002fa0:	fffdffff 	.word	0xfffdffff
 8002fa4:	fffeffff 	.word	0xfffeffff
 8002fa8:	fffbffff 	.word	0xfffbffff
 8002fac:	ffffefff 	.word	0xffffefff
 8002fb0:	ffffdfff 	.word	0xffffdfff
 8002fb4:	ffefffff 	.word	0xffefffff
 8002fb8:	ff9fffff 	.word	0xff9fffff
 8002fbc:	fff7ffff 	.word	0xfff7ffff

08002fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b092      	sub	sp, #72	@ 0x48
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2290      	movs	r2, #144	@ 0x90
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd0:	f7fd fe76 	bl	8000cc0 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d12d      	bne.n	8003042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe8:	2280      	movs	r2, #128	@ 0x80
 8002fea:	0391      	lsls	r1, r2, #14
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4a47      	ldr	r2, [pc, #284]	@ (800310c <UART_CheckIdleState+0x14c>)
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f000 f88e 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d022      	beq.n	8003042 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003006:	2301      	movs	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2180      	movs	r1, #128	@ 0x80
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2288      	movs	r2, #136	@ 0x88
 8003032:	2120      	movs	r1, #32
 8003034:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2284      	movs	r2, #132	@ 0x84
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e060      	b.n	8003104 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2204      	movs	r2, #4
 800304a:	4013      	ands	r3, r2
 800304c:	2b04      	cmp	r3, #4
 800304e:	d146      	bne.n	80030de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	03d1      	lsls	r1, r2, #15
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4a2c      	ldr	r2, [pc, #176]	@ (800310c <UART_CheckIdleState+0x14c>)
 800305a:	9200      	str	r2, [sp, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	f000 f859 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d03b      	beq.n	80030de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	60fb      	str	r3, [r7, #12]
  return(result);
 800306c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003070:	2301      	movs	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4922      	ldr	r1, [pc, #136]	@ (8003110 <UART_CheckIdleState+0x150>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	61bb      	str	r3, [r7, #24]
  return(result);
 800309e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a2:	2301      	movs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	438a      	bics	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	228c      	movs	r2, #140	@ 0x8c
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2284      	movs	r2, #132	@ 0x84
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e012      	b.n	8003104 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2288      	movs	r2, #136	@ 0x88
 80030e2:	2120      	movs	r1, #32
 80030e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	228c      	movs	r2, #140	@ 0x8c
 80030ea:	2120      	movs	r1, #32
 80030ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2284      	movs	r2, #132	@ 0x84
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b010      	add	sp, #64	@ 0x40
 800310a:	bd80      	pop	{r7, pc}
 800310c:	01ffffff 	.word	0x01ffffff
 8003110:	fffffedf 	.word	0xfffffedf

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e04b      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3301      	adds	r3, #1
 800312a:	d048      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fdc8 	bl	8000cc0 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x2e>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04b      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d035      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2208      	movs	r2, #8
 800315a:	4013      	ands	r3, r2
 800315c:	2b08      	cmp	r3, #8
 800315e:	d111      	bne.n	8003184 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f83c 	bl	80031e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2290      	movs	r2, #144	@ 0x90
 8003174:	2108      	movs	r1, #8
 8003176:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2284      	movs	r2, #132	@ 0x84
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e02c      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	401a      	ands	r2, r3
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	429a      	cmp	r2, r3
 8003196:	d112      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f81f 	bl	80031e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2290      	movs	r2, #144	@ 0x90
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2284      	movs	r2, #132	@ 0x84
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	425a      	negs	r2, r3
 80031ce:	4153      	adcs	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	001a      	movs	r2, r3
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d0a4      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	@ 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031f0:	f3ef 8310 	mrs	r3, PRIMASK
 80031f4:	617b      	str	r3, [r7, #20]
  return(result);
 80031f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031fa:	2301      	movs	r3, #1
 80031fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4926      	ldr	r1, [pc, #152]	@ (80032ac <UART_EndRxTransfer+0xc4>)
 8003212:	400a      	ands	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003222:	f3ef 8310 	mrs	r3, PRIMASK
 8003226:	623b      	str	r3, [r7, #32]
  return(result);
 8003228:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	f383 8810 	msr	PRIMASK, r3
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	491b      	ldr	r1, [pc, #108]	@ (80032b0 <UART_EndRxTransfer+0xc8>)
 8003244:	400a      	ands	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d118      	bne.n	800328e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	60bb      	str	r3, [r7, #8]
  return(result);
 8003262:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003266:	2301      	movs	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2110      	movs	r1, #16
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	228c      	movs	r2, #140	@ 0x8c
 8003292:	2120      	movs	r1, #32
 8003294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b00e      	add	sp, #56	@ 0x38
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	fffffedf 	.word	0xfffffedf
 80032b0:	effffffe 	.word	0xeffffffe

080032b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2284      	movs	r2, #132	@ 0x84
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UARTEx_DisableFifoMode+0x16>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e027      	b.n	800331a <HAL_UARTEx_DisableFifoMode+0x66>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2284      	movs	r2, #132	@ 0x84
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2288      	movs	r2, #136	@ 0x88
 80032d6:	2124      	movs	r1, #36	@ 0x24
 80032d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	438a      	bics	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <HAL_UARTEx_DisableFifoMode+0x70>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2288      	movs	r2, #136	@ 0x88
 800330c:	2120      	movs	r1, #32
 800330e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2284      	movs	r2, #132	@ 0x84
 8003314:	2100      	movs	r1, #0
 8003316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	dfffffff 	.word	0xdfffffff

08003328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2284      	movs	r2, #132	@ 0x84
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e02e      	b.n	800339e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2284      	movs	r2, #132	@ 0x84
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2288      	movs	r2, #136	@ 0x88
 800334c:	2124      	movs	r1, #36	@ 0x24
 800334e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2101      	movs	r1, #1
 8003364:	438a      	bics	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	08d9      	lsrs	r1, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f854 	bl	800342c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2288      	movs	r2, #136	@ 0x88
 8003390:	2120      	movs	r1, #32
 8003392:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2284      	movs	r2, #132	@ 0x84
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2284      	movs	r2, #132	@ 0x84
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033bc:	2302      	movs	r3, #2
 80033be:	e02f      	b.n	8003420 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2284      	movs	r2, #132	@ 0x84
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2288      	movs	r2, #136	@ 0x88
 80033cc:	2124      	movs	r1, #36	@ 0x24
 80033ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003428 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f813 	bl	800342c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2288      	movs	r2, #136	@ 0x88
 8003412:	2120      	movs	r1, #32
 8003414:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2284      	movs	r2, #132	@ 0x84
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	f1ffffff 	.word	0xf1ffffff

0800342c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	226a      	movs	r2, #106	@ 0x6a
 8003440:	2101      	movs	r1, #1
 8003442:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2268      	movs	r2, #104	@ 0x68
 8003448:	2101      	movs	r1, #1
 800344a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800344c:	e043      	b.n	80034d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800344e:	260f      	movs	r6, #15
 8003450:	19bb      	adds	r3, r7, r6
 8003452:	2208      	movs	r2, #8
 8003454:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003456:	200e      	movs	r0, #14
 8003458:	183b      	adds	r3, r7, r0
 800345a:	2208      	movs	r2, #8
 800345c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	0e5b      	lsrs	r3, r3, #25
 8003466:	b2da      	uxtb	r2, r3
 8003468:	240d      	movs	r4, #13
 800346a:	193b      	adds	r3, r7, r4
 800346c:	2107      	movs	r1, #7
 800346e:	400a      	ands	r2, r1
 8003470:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	0f5b      	lsrs	r3, r3, #29
 800347a:	b2da      	uxtb	r2, r3
 800347c:	250c      	movs	r5, #12
 800347e:	197b      	adds	r3, r7, r5
 8003480:	2107      	movs	r1, #7
 8003482:	400a      	ands	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003486:	183b      	adds	r3, r7, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	197a      	adds	r2, r7, r5
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	4914      	ldr	r1, [pc, #80]	@ (80034e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003490:	5c8a      	ldrb	r2, [r1, r2]
 8003492:	435a      	muls	r2, r3
 8003494:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003496:	197b      	adds	r3, r7, r5
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800349c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800349e:	0019      	movs	r1, r3
 80034a0:	f7fc fec6 	bl	8000230 <__divsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	b299      	uxth	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	226a      	movs	r2, #106	@ 0x6a
 80034ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ae:	19bb      	adds	r3, r7, r6
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	193a      	adds	r2, r7, r4
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	490a      	ldr	r1, [pc, #40]	@ (80034e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80034b8:	5c8a      	ldrb	r2, [r1, r2]
 80034ba:	435a      	muls	r2, r3
 80034bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034c6:	0019      	movs	r1, r3
 80034c8:	f7fc feb2 	bl	8000230 <__divsi3>
 80034cc:	0003      	movs	r3, r0
 80034ce:	b299      	uxth	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2268      	movs	r2, #104	@ 0x68
 80034d4:	5299      	strh	r1, [r3, r2]
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b005      	add	sp, #20
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	08003ed4 	.word	0x08003ed4
 80034e4:	08003edc 	.word	0x08003edc

080034e8 <siprintf>:
 80034e8:	b40e      	push	{r1, r2, r3}
 80034ea:	b500      	push	{lr}
 80034ec:	490b      	ldr	r1, [pc, #44]	@ (800351c <siprintf+0x34>)
 80034ee:	b09c      	sub	sp, #112	@ 0x70
 80034f0:	ab1d      	add	r3, sp, #116	@ 0x74
 80034f2:	9002      	str	r0, [sp, #8]
 80034f4:	9006      	str	r0, [sp, #24]
 80034f6:	9107      	str	r1, [sp, #28]
 80034f8:	9104      	str	r1, [sp, #16]
 80034fa:	4809      	ldr	r0, [pc, #36]	@ (8003520 <siprintf+0x38>)
 80034fc:	4909      	ldr	r1, [pc, #36]	@ (8003524 <siprintf+0x3c>)
 80034fe:	cb04      	ldmia	r3!, {r2}
 8003500:	9105      	str	r1, [sp, #20]
 8003502:	6800      	ldr	r0, [r0, #0]
 8003504:	a902      	add	r1, sp, #8
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	f000 f99e 	bl	8003848 <_svfiprintf_r>
 800350c:	2200      	movs	r2, #0
 800350e:	9b02      	ldr	r3, [sp, #8]
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	b01c      	add	sp, #112	@ 0x70
 8003514:	bc08      	pop	{r3}
 8003516:	b003      	add	sp, #12
 8003518:	4718      	bx	r3
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	7fffffff 	.word	0x7fffffff
 8003520:	2000000c 	.word	0x2000000c
 8003524:	ffff0208 	.word	0xffff0208

08003528 <memset>:
 8003528:	0003      	movs	r3, r0
 800352a:	1882      	adds	r2, r0, r2
 800352c:	4293      	cmp	r3, r2
 800352e:	d100      	bne.n	8003532 <memset+0xa>
 8003530:	4770      	bx	lr
 8003532:	7019      	strb	r1, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	e7f9      	b.n	800352c <memset+0x4>

08003538 <__errno>:
 8003538:	4b01      	ldr	r3, [pc, #4]	@ (8003540 <__errno+0x8>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	4770      	bx	lr
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	2000000c 	.word	0x2000000c

08003544 <__libc_init_array>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	2600      	movs	r6, #0
 8003548:	4c0c      	ldr	r4, [pc, #48]	@ (800357c <__libc_init_array+0x38>)
 800354a:	4d0d      	ldr	r5, [pc, #52]	@ (8003580 <__libc_init_array+0x3c>)
 800354c:	1b64      	subs	r4, r4, r5
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	42a6      	cmp	r6, r4
 8003552:	d109      	bne.n	8003568 <__libc_init_array+0x24>
 8003554:	2600      	movs	r6, #0
 8003556:	f000 fc65 	bl	8003e24 <_init>
 800355a:	4c0a      	ldr	r4, [pc, #40]	@ (8003584 <__libc_init_array+0x40>)
 800355c:	4d0a      	ldr	r5, [pc, #40]	@ (8003588 <__libc_init_array+0x44>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	42a6      	cmp	r6, r4
 8003564:	d105      	bne.n	8003572 <__libc_init_array+0x2e>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	00b3      	lsls	r3, r6, #2
 800356a:	58eb      	ldr	r3, [r5, r3]
 800356c:	4798      	blx	r3
 800356e:	3601      	adds	r6, #1
 8003570:	e7ee      	b.n	8003550 <__libc_init_array+0xc>
 8003572:	00b3      	lsls	r3, r6, #2
 8003574:	58eb      	ldr	r3, [r5, r3]
 8003576:	4798      	blx	r3
 8003578:	3601      	adds	r6, #1
 800357a:	e7f2      	b.n	8003562 <__libc_init_array+0x1e>
 800357c:	08003f18 	.word	0x08003f18
 8003580:	08003f18 	.word	0x08003f18
 8003584:	08003f1c 	.word	0x08003f1c
 8003588:	08003f18 	.word	0x08003f18

0800358c <__retarget_lock_acquire_recursive>:
 800358c:	4770      	bx	lr

0800358e <__retarget_lock_release_recursive>:
 800358e:	4770      	bx	lr

08003590 <_free_r>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	0005      	movs	r5, r0
 8003594:	1e0c      	subs	r4, r1, #0
 8003596:	d010      	beq.n	80035ba <_free_r+0x2a>
 8003598:	3c04      	subs	r4, #4
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	da00      	bge.n	80035a2 <_free_r+0x12>
 80035a0:	18e4      	adds	r4, r4, r3
 80035a2:	0028      	movs	r0, r5
 80035a4:	f000 f8e0 	bl	8003768 <__malloc_lock>
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <_free_r+0x90>)
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <_free_r+0x2c>
 80035b0:	6063      	str	r3, [r4, #4]
 80035b2:	6014      	str	r4, [r2, #0]
 80035b4:	0028      	movs	r0, r5
 80035b6:	f000 f8df 	bl	8003778 <__malloc_unlock>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d908      	bls.n	80035d2 <_free_r+0x42>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	1821      	adds	r1, r4, r0
 80035c4:	428b      	cmp	r3, r1
 80035c6:	d1f3      	bne.n	80035b0 <_free_r+0x20>
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	1809      	adds	r1, r1, r0
 80035ce:	6021      	str	r1, [r4, #0]
 80035d0:	e7ee      	b.n	80035b0 <_free_r+0x20>
 80035d2:	001a      	movs	r2, r3
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <_free_r+0x4e>
 80035da:	42a3      	cmp	r3, r4
 80035dc:	d9f9      	bls.n	80035d2 <_free_r+0x42>
 80035de:	6811      	ldr	r1, [r2, #0]
 80035e0:	1850      	adds	r0, r2, r1
 80035e2:	42a0      	cmp	r0, r4
 80035e4:	d10b      	bne.n	80035fe <_free_r+0x6e>
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	1809      	adds	r1, r1, r0
 80035ea:	1850      	adds	r0, r2, r1
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	4283      	cmp	r3, r0
 80035f0:	d1e0      	bne.n	80035b4 <_free_r+0x24>
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	1841      	adds	r1, r0, r1
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	6053      	str	r3, [r2, #4]
 80035fc:	e7da      	b.n	80035b4 <_free_r+0x24>
 80035fe:	42a0      	cmp	r0, r4
 8003600:	d902      	bls.n	8003608 <_free_r+0x78>
 8003602:	230c      	movs	r3, #12
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	e7d5      	b.n	80035b4 <_free_r+0x24>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	1821      	adds	r1, r4, r0
 800360c:	428b      	cmp	r3, r1
 800360e:	d103      	bne.n	8003618 <_free_r+0x88>
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	1809      	adds	r1, r1, r0
 8003616:	6021      	str	r1, [r4, #0]
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	6054      	str	r4, [r2, #4]
 800361c:	e7ca      	b.n	80035b4 <_free_r+0x24>
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	200002fc 	.word	0x200002fc

08003624 <sbrk_aligned>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4e0f      	ldr	r6, [pc, #60]	@ (8003664 <sbrk_aligned+0x40>)
 8003628:	000d      	movs	r5, r1
 800362a:	6831      	ldr	r1, [r6, #0]
 800362c:	0004      	movs	r4, r0
 800362e:	2900      	cmp	r1, #0
 8003630:	d102      	bne.n	8003638 <sbrk_aligned+0x14>
 8003632:	f000 fb99 	bl	8003d68 <_sbrk_r>
 8003636:	6030      	str	r0, [r6, #0]
 8003638:	0029      	movs	r1, r5
 800363a:	0020      	movs	r0, r4
 800363c:	f000 fb94 	bl	8003d68 <_sbrk_r>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d103      	bne.n	800364c <sbrk_aligned+0x28>
 8003644:	2501      	movs	r5, #1
 8003646:	426d      	negs	r5, r5
 8003648:	0028      	movs	r0, r5
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	2303      	movs	r3, #3
 800364e:	1cc5      	adds	r5, r0, #3
 8003650:	439d      	bics	r5, r3
 8003652:	42a8      	cmp	r0, r5
 8003654:	d0f8      	beq.n	8003648 <sbrk_aligned+0x24>
 8003656:	1a29      	subs	r1, r5, r0
 8003658:	0020      	movs	r0, r4
 800365a:	f000 fb85 	bl	8003d68 <_sbrk_r>
 800365e:	3001      	adds	r0, #1
 8003660:	d1f2      	bne.n	8003648 <sbrk_aligned+0x24>
 8003662:	e7ef      	b.n	8003644 <sbrk_aligned+0x20>
 8003664:	200002f8 	.word	0x200002f8

08003668 <_malloc_r>:
 8003668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800366a:	2203      	movs	r2, #3
 800366c:	1ccb      	adds	r3, r1, #3
 800366e:	4393      	bics	r3, r2
 8003670:	3308      	adds	r3, #8
 8003672:	0005      	movs	r5, r0
 8003674:	001f      	movs	r7, r3
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d234      	bcs.n	80036e4 <_malloc_r+0x7c>
 800367a:	270c      	movs	r7, #12
 800367c:	42b9      	cmp	r1, r7
 800367e:	d833      	bhi.n	80036e8 <_malloc_r+0x80>
 8003680:	0028      	movs	r0, r5
 8003682:	f000 f871 	bl	8003768 <__malloc_lock>
 8003686:	4e37      	ldr	r6, [pc, #220]	@ (8003764 <_malloc_r+0xfc>)
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	001c      	movs	r4, r3
 800368c:	2c00      	cmp	r4, #0
 800368e:	d12f      	bne.n	80036f0 <_malloc_r+0x88>
 8003690:	0039      	movs	r1, r7
 8003692:	0028      	movs	r0, r5
 8003694:	f7ff ffc6 	bl	8003624 <sbrk_aligned>
 8003698:	0004      	movs	r4, r0
 800369a:	1c43      	adds	r3, r0, #1
 800369c:	d15f      	bne.n	800375e <_malloc_r+0xf6>
 800369e:	6834      	ldr	r4, [r6, #0]
 80036a0:	9400      	str	r4, [sp, #0]
 80036a2:	9b00      	ldr	r3, [sp, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d14a      	bne.n	800373e <_malloc_r+0xd6>
 80036a8:	2c00      	cmp	r4, #0
 80036aa:	d052      	beq.n	8003752 <_malloc_r+0xea>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	0028      	movs	r0, r5
 80036b0:	18e3      	adds	r3, r4, r3
 80036b2:	9900      	ldr	r1, [sp, #0]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	f000 fb57 	bl	8003d68 <_sbrk_r>
 80036ba:	9b01      	ldr	r3, [sp, #4]
 80036bc:	4283      	cmp	r3, r0
 80036be:	d148      	bne.n	8003752 <_malloc_r+0xea>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	0028      	movs	r0, r5
 80036c4:	1aff      	subs	r7, r7, r3
 80036c6:	0039      	movs	r1, r7
 80036c8:	f7ff ffac 	bl	8003624 <sbrk_aligned>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d040      	beq.n	8003752 <_malloc_r+0xea>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	19db      	adds	r3, r3, r7
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	6833      	ldr	r3, [r6, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	2a00      	cmp	r2, #0
 80036dc:	d133      	bne.n	8003746 <_malloc_r+0xde>
 80036de:	9b00      	ldr	r3, [sp, #0]
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	e019      	b.n	8003718 <_malloc_r+0xb0>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dac9      	bge.n	800367c <_malloc_r+0x14>
 80036e8:	230c      	movs	r3, #12
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	2000      	movs	r0, #0
 80036ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	1bc9      	subs	r1, r1, r7
 80036f4:	d420      	bmi.n	8003738 <_malloc_r+0xd0>
 80036f6:	290b      	cmp	r1, #11
 80036f8:	d90a      	bls.n	8003710 <_malloc_r+0xa8>
 80036fa:	19e2      	adds	r2, r4, r7
 80036fc:	6027      	str	r7, [r4, #0]
 80036fe:	42a3      	cmp	r3, r4
 8003700:	d104      	bne.n	800370c <_malloc_r+0xa4>
 8003702:	6032      	str	r2, [r6, #0]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6011      	str	r1, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	e005      	b.n	8003718 <_malloc_r+0xb0>
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e7f9      	b.n	8003704 <_malloc_r+0x9c>
 8003710:	6862      	ldr	r2, [r4, #4]
 8003712:	42a3      	cmp	r3, r4
 8003714:	d10e      	bne.n	8003734 <_malloc_r+0xcc>
 8003716:	6032      	str	r2, [r6, #0]
 8003718:	0028      	movs	r0, r5
 800371a:	f000 f82d 	bl	8003778 <__malloc_unlock>
 800371e:	0020      	movs	r0, r4
 8003720:	2207      	movs	r2, #7
 8003722:	300b      	adds	r0, #11
 8003724:	1d23      	adds	r3, r4, #4
 8003726:	4390      	bics	r0, r2
 8003728:	1ac2      	subs	r2, r0, r3
 800372a:	4298      	cmp	r0, r3
 800372c:	d0df      	beq.n	80036ee <_malloc_r+0x86>
 800372e:	1a1b      	subs	r3, r3, r0
 8003730:	50a3      	str	r3, [r4, r2]
 8003732:	e7dc      	b.n	80036ee <_malloc_r+0x86>
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e7ef      	b.n	8003718 <_malloc_r+0xb0>
 8003738:	0023      	movs	r3, r4
 800373a:	6864      	ldr	r4, [r4, #4]
 800373c:	e7a6      	b.n	800368c <_malloc_r+0x24>
 800373e:	9c00      	ldr	r4, [sp, #0]
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	e7ad      	b.n	80036a2 <_malloc_r+0x3a>
 8003746:	001a      	movs	r2, r3
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	42a3      	cmp	r3, r4
 800374c:	d1fb      	bne.n	8003746 <_malloc_r+0xde>
 800374e:	2300      	movs	r3, #0
 8003750:	e7da      	b.n	8003708 <_malloc_r+0xa0>
 8003752:	230c      	movs	r3, #12
 8003754:	0028      	movs	r0, r5
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f000 f80e 	bl	8003778 <__malloc_unlock>
 800375c:	e7c6      	b.n	80036ec <_malloc_r+0x84>
 800375e:	6007      	str	r7, [r0, #0]
 8003760:	e7da      	b.n	8003718 <_malloc_r+0xb0>
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	200002fc 	.word	0x200002fc

08003768 <__malloc_lock>:
 8003768:	b510      	push	{r4, lr}
 800376a:	4802      	ldr	r0, [pc, #8]	@ (8003774 <__malloc_lock+0xc>)
 800376c:	f7ff ff0e 	bl	800358c <__retarget_lock_acquire_recursive>
 8003770:	bd10      	pop	{r4, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	200002f4 	.word	0x200002f4

08003778 <__malloc_unlock>:
 8003778:	b510      	push	{r4, lr}
 800377a:	4802      	ldr	r0, [pc, #8]	@ (8003784 <__malloc_unlock+0xc>)
 800377c:	f7ff ff07 	bl	800358e <__retarget_lock_release_recursive>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	200002f4 	.word	0x200002f4

08003788 <__ssputs_r>:
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	688e      	ldr	r6, [r1, #8]
 800378c:	b085      	sub	sp, #20
 800378e:	001f      	movs	r7, r3
 8003790:	000c      	movs	r4, r1
 8003792:	680b      	ldr	r3, [r1, #0]
 8003794:	9002      	str	r0, [sp, #8]
 8003796:	9203      	str	r2, [sp, #12]
 8003798:	42be      	cmp	r6, r7
 800379a:	d830      	bhi.n	80037fe <__ssputs_r+0x76>
 800379c:	210c      	movs	r1, #12
 800379e:	5e62      	ldrsh	r2, [r4, r1]
 80037a0:	2190      	movs	r1, #144	@ 0x90
 80037a2:	00c9      	lsls	r1, r1, #3
 80037a4:	420a      	tst	r2, r1
 80037a6:	d028      	beq.n	80037fa <__ssputs_r+0x72>
 80037a8:	2003      	movs	r0, #3
 80037aa:	6921      	ldr	r1, [r4, #16]
 80037ac:	1a5b      	subs	r3, r3, r1
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6963      	ldr	r3, [r4, #20]
 80037b2:	4343      	muls	r3, r0
 80037b4:	9801      	ldr	r0, [sp, #4]
 80037b6:	0fdd      	lsrs	r5, r3, #31
 80037b8:	18ed      	adds	r5, r5, r3
 80037ba:	1c7b      	adds	r3, r7, #1
 80037bc:	181b      	adds	r3, r3, r0
 80037be:	106d      	asrs	r5, r5, #1
 80037c0:	42ab      	cmp	r3, r5
 80037c2:	d900      	bls.n	80037c6 <__ssputs_r+0x3e>
 80037c4:	001d      	movs	r5, r3
 80037c6:	0552      	lsls	r2, r2, #21
 80037c8:	d528      	bpl.n	800381c <__ssputs_r+0x94>
 80037ca:	0029      	movs	r1, r5
 80037cc:	9802      	ldr	r0, [sp, #8]
 80037ce:	f7ff ff4b 	bl	8003668 <_malloc_r>
 80037d2:	1e06      	subs	r6, r0, #0
 80037d4:	d02c      	beq.n	8003830 <__ssputs_r+0xa8>
 80037d6:	9a01      	ldr	r2, [sp, #4]
 80037d8:	6921      	ldr	r1, [r4, #16]
 80037da:	f000 fae2 	bl	8003da2 <memcpy>
 80037de:	89a2      	ldrh	r2, [r4, #12]
 80037e0:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <__ssputs_r+0xbc>)
 80037e2:	401a      	ands	r2, r3
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	4313      	orrs	r3, r2
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	9b01      	ldr	r3, [sp, #4]
 80037ec:	6126      	str	r6, [r4, #16]
 80037ee:	18f6      	adds	r6, r6, r3
 80037f0:	6026      	str	r6, [r4, #0]
 80037f2:	003e      	movs	r6, r7
 80037f4:	6165      	str	r5, [r4, #20]
 80037f6:	1aed      	subs	r5, r5, r3
 80037f8:	60a5      	str	r5, [r4, #8]
 80037fa:	42be      	cmp	r6, r7
 80037fc:	d900      	bls.n	8003800 <__ssputs_r+0x78>
 80037fe:	003e      	movs	r6, r7
 8003800:	0032      	movs	r2, r6
 8003802:	9903      	ldr	r1, [sp, #12]
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f000 fa9b 	bl	8003d40 <memmove>
 800380a:	2000      	movs	r0, #0
 800380c:	68a3      	ldr	r3, [r4, #8]
 800380e:	1b9b      	subs	r3, r3, r6
 8003810:	60a3      	str	r3, [r4, #8]
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	199b      	adds	r3, r3, r6
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	b005      	add	sp, #20
 800381a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800381c:	002a      	movs	r2, r5
 800381e:	9802      	ldr	r0, [sp, #8]
 8003820:	f000 fac8 	bl	8003db4 <_realloc_r>
 8003824:	1e06      	subs	r6, r0, #0
 8003826:	d1e0      	bne.n	80037ea <__ssputs_r+0x62>
 8003828:	6921      	ldr	r1, [r4, #16]
 800382a:	9802      	ldr	r0, [sp, #8]
 800382c:	f7ff feb0 	bl	8003590 <_free_r>
 8003830:	230c      	movs	r3, #12
 8003832:	2001      	movs	r0, #1
 8003834:	9a02      	ldr	r2, [sp, #8]
 8003836:	4240      	negs	r0, r0
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	89a2      	ldrh	r2, [r4, #12]
 800383c:	3334      	adds	r3, #52	@ 0x34
 800383e:	4313      	orrs	r3, r2
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	e7e9      	b.n	8003818 <__ssputs_r+0x90>
 8003844:	fffffb7f 	.word	0xfffffb7f

08003848 <_svfiprintf_r>:
 8003848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384a:	b0a1      	sub	sp, #132	@ 0x84
 800384c:	9003      	str	r0, [sp, #12]
 800384e:	001d      	movs	r5, r3
 8003850:	898b      	ldrh	r3, [r1, #12]
 8003852:	000f      	movs	r7, r1
 8003854:	0016      	movs	r6, r2
 8003856:	061b      	lsls	r3, r3, #24
 8003858:	d511      	bpl.n	800387e <_svfiprintf_r+0x36>
 800385a:	690b      	ldr	r3, [r1, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <_svfiprintf_r+0x36>
 8003860:	2140      	movs	r1, #64	@ 0x40
 8003862:	f7ff ff01 	bl	8003668 <_malloc_r>
 8003866:	6038      	str	r0, [r7, #0]
 8003868:	6138      	str	r0, [r7, #16]
 800386a:	2800      	cmp	r0, #0
 800386c:	d105      	bne.n	800387a <_svfiprintf_r+0x32>
 800386e:	230c      	movs	r3, #12
 8003870:	9a03      	ldr	r2, [sp, #12]
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	2001      	movs	r0, #1
 8003876:	4240      	negs	r0, r0
 8003878:	e0cf      	b.n	8003a1a <_svfiprintf_r+0x1d2>
 800387a:	2340      	movs	r3, #64	@ 0x40
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	2300      	movs	r3, #0
 8003880:	ac08      	add	r4, sp, #32
 8003882:	6163      	str	r3, [r4, #20]
 8003884:	3320      	adds	r3, #32
 8003886:	7663      	strb	r3, [r4, #25]
 8003888:	3310      	adds	r3, #16
 800388a:	76a3      	strb	r3, [r4, #26]
 800388c:	9507      	str	r5, [sp, #28]
 800388e:	0035      	movs	r5, r6
 8003890:	782b      	ldrb	r3, [r5, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <_svfiprintf_r+0x52>
 8003896:	2b25      	cmp	r3, #37	@ 0x25
 8003898:	d148      	bne.n	800392c <_svfiprintf_r+0xe4>
 800389a:	1bab      	subs	r3, r5, r6
 800389c:	9305      	str	r3, [sp, #20]
 800389e:	42b5      	cmp	r5, r6
 80038a0:	d00b      	beq.n	80038ba <_svfiprintf_r+0x72>
 80038a2:	0032      	movs	r2, r6
 80038a4:	0039      	movs	r1, r7
 80038a6:	9803      	ldr	r0, [sp, #12]
 80038a8:	f7ff ff6e 	bl	8003788 <__ssputs_r>
 80038ac:	3001      	adds	r0, #1
 80038ae:	d100      	bne.n	80038b2 <_svfiprintf_r+0x6a>
 80038b0:	e0ae      	b.n	8003a10 <_svfiprintf_r+0x1c8>
 80038b2:	6963      	ldr	r3, [r4, #20]
 80038b4:	9a05      	ldr	r2, [sp, #20]
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	6163      	str	r3, [r4, #20]
 80038ba:	782b      	ldrb	r3, [r5, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <_svfiprintf_r+0x7a>
 80038c0:	e0a6      	b.n	8003a10 <_svfiprintf_r+0x1c8>
 80038c2:	2201      	movs	r2, #1
 80038c4:	2300      	movs	r3, #0
 80038c6:	4252      	negs	r2, r2
 80038c8:	6062      	str	r2, [r4, #4]
 80038ca:	a904      	add	r1, sp, #16
 80038cc:	3254      	adds	r2, #84	@ 0x54
 80038ce:	1852      	adds	r2, r2, r1
 80038d0:	1c6e      	adds	r6, r5, #1
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	60e3      	str	r3, [r4, #12]
 80038d6:	60a3      	str	r3, [r4, #8]
 80038d8:	7013      	strb	r3, [r2, #0]
 80038da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80038dc:	4b54      	ldr	r3, [pc, #336]	@ (8003a30 <_svfiprintf_r+0x1e8>)
 80038de:	2205      	movs	r2, #5
 80038e0:	0018      	movs	r0, r3
 80038e2:	7831      	ldrb	r1, [r6, #0]
 80038e4:	9305      	str	r3, [sp, #20]
 80038e6:	f000 fa51 	bl	8003d8c <memchr>
 80038ea:	1c75      	adds	r5, r6, #1
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d11f      	bne.n	8003930 <_svfiprintf_r+0xe8>
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	06d3      	lsls	r3, r2, #27
 80038f4:	d504      	bpl.n	8003900 <_svfiprintf_r+0xb8>
 80038f6:	2353      	movs	r3, #83	@ 0x53
 80038f8:	a904      	add	r1, sp, #16
 80038fa:	185b      	adds	r3, r3, r1
 80038fc:	2120      	movs	r1, #32
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	0713      	lsls	r3, r2, #28
 8003902:	d504      	bpl.n	800390e <_svfiprintf_r+0xc6>
 8003904:	2353      	movs	r3, #83	@ 0x53
 8003906:	a904      	add	r1, sp, #16
 8003908:	185b      	adds	r3, r3, r1
 800390a:	212b      	movs	r1, #43	@ 0x2b
 800390c:	7019      	strb	r1, [r3, #0]
 800390e:	7833      	ldrb	r3, [r6, #0]
 8003910:	2b2a      	cmp	r3, #42	@ 0x2a
 8003912:	d016      	beq.n	8003942 <_svfiprintf_r+0xfa>
 8003914:	0035      	movs	r5, r6
 8003916:	2100      	movs	r1, #0
 8003918:	200a      	movs	r0, #10
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	782a      	ldrb	r2, [r5, #0]
 800391e:	1c6e      	adds	r6, r5, #1
 8003920:	3a30      	subs	r2, #48	@ 0x30
 8003922:	2a09      	cmp	r2, #9
 8003924:	d950      	bls.n	80039c8 <_svfiprintf_r+0x180>
 8003926:	2900      	cmp	r1, #0
 8003928:	d111      	bne.n	800394e <_svfiprintf_r+0x106>
 800392a:	e017      	b.n	800395c <_svfiprintf_r+0x114>
 800392c:	3501      	adds	r5, #1
 800392e:	e7af      	b.n	8003890 <_svfiprintf_r+0x48>
 8003930:	9b05      	ldr	r3, [sp, #20]
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	1ac0      	subs	r0, r0, r3
 8003936:	2301      	movs	r3, #1
 8003938:	4083      	lsls	r3, r0
 800393a:	4313      	orrs	r3, r2
 800393c:	002e      	movs	r6, r5
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	e7cc      	b.n	80038dc <_svfiprintf_r+0x94>
 8003942:	9b07      	ldr	r3, [sp, #28]
 8003944:	1d19      	adds	r1, r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	9107      	str	r1, [sp, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	db01      	blt.n	8003952 <_svfiprintf_r+0x10a>
 800394e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003950:	e004      	b.n	800395c <_svfiprintf_r+0x114>
 8003952:	425b      	negs	r3, r3
 8003954:	60e3      	str	r3, [r4, #12]
 8003956:	2302      	movs	r3, #2
 8003958:	4313      	orrs	r3, r2
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	782b      	ldrb	r3, [r5, #0]
 800395e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003960:	d10c      	bne.n	800397c <_svfiprintf_r+0x134>
 8003962:	786b      	ldrb	r3, [r5, #1]
 8003964:	2b2a      	cmp	r3, #42	@ 0x2a
 8003966:	d134      	bne.n	80039d2 <_svfiprintf_r+0x18a>
 8003968:	9b07      	ldr	r3, [sp, #28]
 800396a:	3502      	adds	r5, #2
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	9207      	str	r2, [sp, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	da01      	bge.n	800397a <_svfiprintf_r+0x132>
 8003976:	2301      	movs	r3, #1
 8003978:	425b      	negs	r3, r3
 800397a:	9309      	str	r3, [sp, #36]	@ 0x24
 800397c:	4e2d      	ldr	r6, [pc, #180]	@ (8003a34 <_svfiprintf_r+0x1ec>)
 800397e:	2203      	movs	r2, #3
 8003980:	0030      	movs	r0, r6
 8003982:	7829      	ldrb	r1, [r5, #0]
 8003984:	f000 fa02 	bl	8003d8c <memchr>
 8003988:	2800      	cmp	r0, #0
 800398a:	d006      	beq.n	800399a <_svfiprintf_r+0x152>
 800398c:	2340      	movs	r3, #64	@ 0x40
 800398e:	1b80      	subs	r0, r0, r6
 8003990:	4083      	lsls	r3, r0
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	3501      	adds	r5, #1
 8003996:	4313      	orrs	r3, r2
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	7829      	ldrb	r1, [r5, #0]
 800399c:	2206      	movs	r2, #6
 800399e:	4826      	ldr	r0, [pc, #152]	@ (8003a38 <_svfiprintf_r+0x1f0>)
 80039a0:	1c6e      	adds	r6, r5, #1
 80039a2:	7621      	strb	r1, [r4, #24]
 80039a4:	f000 f9f2 	bl	8003d8c <memchr>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d038      	beq.n	8003a1e <_svfiprintf_r+0x1d6>
 80039ac:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <_svfiprintf_r+0x1f4>)
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d122      	bne.n	80039f8 <_svfiprintf_r+0x1b0>
 80039b2:	2207      	movs	r2, #7
 80039b4:	9b07      	ldr	r3, [sp, #28]
 80039b6:	3307      	adds	r3, #7
 80039b8:	4393      	bics	r3, r2
 80039ba:	3308      	adds	r3, #8
 80039bc:	9307      	str	r3, [sp, #28]
 80039be:	6963      	ldr	r3, [r4, #20]
 80039c0:	9a04      	ldr	r2, [sp, #16]
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	6163      	str	r3, [r4, #20]
 80039c6:	e762      	b.n	800388e <_svfiprintf_r+0x46>
 80039c8:	4343      	muls	r3, r0
 80039ca:	0035      	movs	r5, r6
 80039cc:	2101      	movs	r1, #1
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	e7a4      	b.n	800391c <_svfiprintf_r+0xd4>
 80039d2:	2300      	movs	r3, #0
 80039d4:	200a      	movs	r0, #10
 80039d6:	0019      	movs	r1, r3
 80039d8:	3501      	adds	r5, #1
 80039da:	6063      	str	r3, [r4, #4]
 80039dc:	782a      	ldrb	r2, [r5, #0]
 80039de:	1c6e      	adds	r6, r5, #1
 80039e0:	3a30      	subs	r2, #48	@ 0x30
 80039e2:	2a09      	cmp	r2, #9
 80039e4:	d903      	bls.n	80039ee <_svfiprintf_r+0x1a6>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0c8      	beq.n	800397c <_svfiprintf_r+0x134>
 80039ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80039ec:	e7c6      	b.n	800397c <_svfiprintf_r+0x134>
 80039ee:	4341      	muls	r1, r0
 80039f0:	0035      	movs	r5, r6
 80039f2:	2301      	movs	r3, #1
 80039f4:	1889      	adds	r1, r1, r2
 80039f6:	e7f1      	b.n	80039dc <_svfiprintf_r+0x194>
 80039f8:	aa07      	add	r2, sp, #28
 80039fa:	9200      	str	r2, [sp, #0]
 80039fc:	0021      	movs	r1, r4
 80039fe:	003a      	movs	r2, r7
 8003a00:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <_svfiprintf_r+0x1f8>)
 8003a02:	9803      	ldr	r0, [sp, #12]
 8003a04:	e000      	b.n	8003a08 <_svfiprintf_r+0x1c0>
 8003a06:	bf00      	nop
 8003a08:	9004      	str	r0, [sp, #16]
 8003a0a:	9b04      	ldr	r3, [sp, #16]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	d1d6      	bne.n	80039be <_svfiprintf_r+0x176>
 8003a10:	89bb      	ldrh	r3, [r7, #12]
 8003a12:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a14:	065b      	lsls	r3, r3, #25
 8003a16:	d500      	bpl.n	8003a1a <_svfiprintf_r+0x1d2>
 8003a18:	e72c      	b.n	8003874 <_svfiprintf_r+0x2c>
 8003a1a:	b021      	add	sp, #132	@ 0x84
 8003a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1e:	aa07      	add	r2, sp, #28
 8003a20:	9200      	str	r2, [sp, #0]
 8003a22:	0021      	movs	r1, r4
 8003a24:	003a      	movs	r2, r7
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <_svfiprintf_r+0x1f8>)
 8003a28:	9803      	ldr	r0, [sp, #12]
 8003a2a:	f000 f87b 	bl	8003b24 <_printf_i>
 8003a2e:	e7eb      	b.n	8003a08 <_svfiprintf_r+0x1c0>
 8003a30:	08003ee4 	.word	0x08003ee4
 8003a34:	08003eea 	.word	0x08003eea
 8003a38:	08003eee 	.word	0x08003eee
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	08003789 	.word	0x08003789

08003a44 <_printf_common>:
 8003a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a46:	0016      	movs	r6, r2
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	688a      	ldr	r2, [r1, #8]
 8003a4c:	690b      	ldr	r3, [r1, #16]
 8003a4e:	000c      	movs	r4, r1
 8003a50:	9000      	str	r0, [sp, #0]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	da00      	bge.n	8003a58 <_printf_common+0x14>
 8003a56:	0013      	movs	r3, r2
 8003a58:	0022      	movs	r2, r4
 8003a5a:	6033      	str	r3, [r6, #0]
 8003a5c:	3243      	adds	r2, #67	@ 0x43
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d001      	beq.n	8003a68 <_printf_common+0x24>
 8003a64:	3301      	adds	r3, #1
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	069b      	lsls	r3, r3, #26
 8003a6c:	d502      	bpl.n	8003a74 <_printf_common+0x30>
 8003a6e:	6833      	ldr	r3, [r6, #0]
 8003a70:	3302      	adds	r3, #2
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	2306      	movs	r3, #6
 8003a78:	0015      	movs	r5, r2
 8003a7a:	401d      	ands	r5, r3
 8003a7c:	421a      	tst	r2, r3
 8003a7e:	d027      	beq.n	8003ad0 <_printf_common+0x8c>
 8003a80:	0023      	movs	r3, r4
 8003a82:	3343      	adds	r3, #67	@ 0x43
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	4193      	sbcs	r3, r2
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d430      	bmi.n	8003af2 <_printf_common+0xae>
 8003a90:	0022      	movs	r2, r4
 8003a92:	9901      	ldr	r1, [sp, #4]
 8003a94:	9800      	ldr	r0, [sp, #0]
 8003a96:	9d08      	ldr	r5, [sp, #32]
 8003a98:	3243      	adds	r2, #67	@ 0x43
 8003a9a:	47a8      	blx	r5
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d025      	beq.n	8003aec <_printf_common+0xa8>
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d105      	bne.n	8003ab8 <_printf_common+0x74>
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	68e5      	ldr	r5, [r4, #12]
 8003ab0:	1aed      	subs	r5, r5, r3
 8003ab2:	43eb      	mvns	r3, r5
 8003ab4:	17db      	asrs	r3, r3, #31
 8003ab6:	401d      	ands	r5, r3
 8003ab8:	68a3      	ldr	r3, [r4, #8]
 8003aba:	6922      	ldr	r2, [r4, #16]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	dd01      	ble.n	8003ac4 <_printf_common+0x80>
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	18ed      	adds	r5, r5, r3
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42b5      	cmp	r5, r6
 8003ac8:	d120      	bne.n	8003b0c <_printf_common+0xc8>
 8003aca:	2000      	movs	r0, #0
 8003acc:	e010      	b.n	8003af0 <_printf_common+0xac>
 8003ace:	3501      	adds	r5, #1
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	6832      	ldr	r2, [r6, #0]
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	42ab      	cmp	r3, r5
 8003ad8:	ddd2      	ble.n	8003a80 <_printf_common+0x3c>
 8003ada:	0022      	movs	r2, r4
 8003adc:	2301      	movs	r3, #1
 8003ade:	9901      	ldr	r1, [sp, #4]
 8003ae0:	9800      	ldr	r0, [sp, #0]
 8003ae2:	9f08      	ldr	r7, [sp, #32]
 8003ae4:	3219      	adds	r2, #25
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f0      	bne.n	8003ace <_printf_common+0x8a>
 8003aec:	2001      	movs	r0, #1
 8003aee:	4240      	negs	r0, r0
 8003af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003af2:	2030      	movs	r0, #48	@ 0x30
 8003af4:	18e1      	adds	r1, r4, r3
 8003af6:	3143      	adds	r1, #67	@ 0x43
 8003af8:	7008      	strb	r0, [r1, #0]
 8003afa:	0021      	movs	r1, r4
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	3145      	adds	r1, #69	@ 0x45
 8003b00:	7809      	ldrb	r1, [r1, #0]
 8003b02:	18a2      	adds	r2, r4, r2
 8003b04:	3243      	adds	r2, #67	@ 0x43
 8003b06:	3302      	adds	r3, #2
 8003b08:	7011      	strb	r1, [r2, #0]
 8003b0a:	e7c1      	b.n	8003a90 <_printf_common+0x4c>
 8003b0c:	0022      	movs	r2, r4
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	9800      	ldr	r0, [sp, #0]
 8003b14:	9f08      	ldr	r7, [sp, #32]
 8003b16:	321a      	adds	r2, #26
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d0e6      	beq.n	8003aec <_printf_common+0xa8>
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7d1      	b.n	8003ac6 <_printf_common+0x82>
	...

08003b24 <_printf_i>:
 8003b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b26:	b08b      	sub	sp, #44	@ 0x2c
 8003b28:	9206      	str	r2, [sp, #24]
 8003b2a:	000a      	movs	r2, r1
 8003b2c:	3243      	adds	r2, #67	@ 0x43
 8003b2e:	9307      	str	r3, [sp, #28]
 8003b30:	9005      	str	r0, [sp, #20]
 8003b32:	9203      	str	r2, [sp, #12]
 8003b34:	7e0a      	ldrb	r2, [r1, #24]
 8003b36:	000c      	movs	r4, r1
 8003b38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003b3a:	2a78      	cmp	r2, #120	@ 0x78
 8003b3c:	d809      	bhi.n	8003b52 <_printf_i+0x2e>
 8003b3e:	2a62      	cmp	r2, #98	@ 0x62
 8003b40:	d80b      	bhi.n	8003b5a <_printf_i+0x36>
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d100      	bne.n	8003b48 <_printf_i+0x24>
 8003b46:	e0bc      	b.n	8003cc2 <_printf_i+0x19e>
 8003b48:	497b      	ldr	r1, [pc, #492]	@ (8003d38 <_printf_i+0x214>)
 8003b4a:	9104      	str	r1, [sp, #16]
 8003b4c:	2a58      	cmp	r2, #88	@ 0x58
 8003b4e:	d100      	bne.n	8003b52 <_printf_i+0x2e>
 8003b50:	e090      	b.n	8003c74 <_printf_i+0x150>
 8003b52:	0025      	movs	r5, r4
 8003b54:	3542      	adds	r5, #66	@ 0x42
 8003b56:	702a      	strb	r2, [r5, #0]
 8003b58:	e022      	b.n	8003ba0 <_printf_i+0x7c>
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	3863      	subs	r0, #99	@ 0x63
 8003b5e:	2815      	cmp	r0, #21
 8003b60:	d8f7      	bhi.n	8003b52 <_printf_i+0x2e>
 8003b62:	f7fc fad1 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b66:	0016      	.short	0x0016
 8003b68:	fff6001f 	.word	0xfff6001f
 8003b6c:	fff6fff6 	.word	0xfff6fff6
 8003b70:	001ffff6 	.word	0x001ffff6
 8003b74:	fff6fff6 	.word	0xfff6fff6
 8003b78:	fff6fff6 	.word	0xfff6fff6
 8003b7c:	003600a1 	.word	0x003600a1
 8003b80:	fff60080 	.word	0xfff60080
 8003b84:	00b2fff6 	.word	0x00b2fff6
 8003b88:	0036fff6 	.word	0x0036fff6
 8003b8c:	fff6fff6 	.word	0xfff6fff6
 8003b90:	0084      	.short	0x0084
 8003b92:	0025      	movs	r5, r4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	3542      	adds	r5, #66	@ 0x42
 8003b98:	1d11      	adds	r1, r2, #4
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	702b      	strb	r3, [r5, #0]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0a0      	b.n	8003ce6 <_printf_i+0x1c2>
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	6809      	ldr	r1, [r1, #0]
 8003ba8:	1d02      	adds	r2, r0, #4
 8003baa:	060d      	lsls	r5, r1, #24
 8003bac:	d50b      	bpl.n	8003bc6 <_printf_i+0xa2>
 8003bae:	6806      	ldr	r6, [r0, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	da03      	bge.n	8003bbe <_printf_i+0x9a>
 8003bb6:	232d      	movs	r3, #45	@ 0x2d
 8003bb8:	9a03      	ldr	r2, [sp, #12]
 8003bba:	4276      	negs	r6, r6
 8003bbc:	7013      	strb	r3, [r2, #0]
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003d38 <_printf_i+0x214>)
 8003bc0:	270a      	movs	r7, #10
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	e018      	b.n	8003bf8 <_printf_i+0xd4>
 8003bc6:	6806      	ldr	r6, [r0, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	0649      	lsls	r1, r1, #25
 8003bcc:	d5f1      	bpl.n	8003bb2 <_printf_i+0x8e>
 8003bce:	b236      	sxth	r6, r6
 8003bd0:	e7ef      	b.n	8003bb2 <_printf_i+0x8e>
 8003bd2:	6808      	ldr	r0, [r1, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	c940      	ldmia	r1!, {r6}
 8003bd8:	0605      	lsls	r5, r0, #24
 8003bda:	d402      	bmi.n	8003be2 <_printf_i+0xbe>
 8003bdc:	0640      	lsls	r0, r0, #25
 8003bde:	d500      	bpl.n	8003be2 <_printf_i+0xbe>
 8003be0:	b2b6      	uxth	r6, r6
 8003be2:	6019      	str	r1, [r3, #0]
 8003be4:	4b54      	ldr	r3, [pc, #336]	@ (8003d38 <_printf_i+0x214>)
 8003be6:	270a      	movs	r7, #10
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	2a6f      	cmp	r2, #111	@ 0x6f
 8003bec:	d100      	bne.n	8003bf0 <_printf_i+0xcc>
 8003bee:	3f02      	subs	r7, #2
 8003bf0:	0023      	movs	r3, r4
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	3343      	adds	r3, #67	@ 0x43
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6863      	ldr	r3, [r4, #4]
 8003bfa:	60a3      	str	r3, [r4, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db03      	blt.n	8003c08 <_printf_i+0xe4>
 8003c00:	2104      	movs	r1, #4
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	438a      	bics	r2, r1
 8003c06:	6022      	str	r2, [r4, #0]
 8003c08:	2e00      	cmp	r6, #0
 8003c0a:	d102      	bne.n	8003c12 <_printf_i+0xee>
 8003c0c:	9d03      	ldr	r5, [sp, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00c      	beq.n	8003c2c <_printf_i+0x108>
 8003c12:	9d03      	ldr	r5, [sp, #12]
 8003c14:	0030      	movs	r0, r6
 8003c16:	0039      	movs	r1, r7
 8003c18:	f7fc fb06 	bl	8000228 <__aeabi_uidivmod>
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	3d01      	subs	r5, #1
 8003c20:	5c5b      	ldrb	r3, [r3, r1]
 8003c22:	702b      	strb	r3, [r5, #0]
 8003c24:	0033      	movs	r3, r6
 8003c26:	0006      	movs	r6, r0
 8003c28:	429f      	cmp	r7, r3
 8003c2a:	d9f3      	bls.n	8003c14 <_printf_i+0xf0>
 8003c2c:	2f08      	cmp	r7, #8
 8003c2e:	d109      	bne.n	8003c44 <_printf_i+0x120>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	07db      	lsls	r3, r3, #31
 8003c34:	d506      	bpl.n	8003c44 <_printf_i+0x120>
 8003c36:	6862      	ldr	r2, [r4, #4]
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	dc02      	bgt.n	8003c44 <_printf_i+0x120>
 8003c3e:	2330      	movs	r3, #48	@ 0x30
 8003c40:	3d01      	subs	r5, #1
 8003c42:	702b      	strb	r3, [r5, #0]
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	1b5b      	subs	r3, r3, r5
 8003c48:	6123      	str	r3, [r4, #16]
 8003c4a:	9b07      	ldr	r3, [sp, #28]
 8003c4c:	0021      	movs	r1, r4
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	9805      	ldr	r0, [sp, #20]
 8003c52:	9b06      	ldr	r3, [sp, #24]
 8003c54:	aa09      	add	r2, sp, #36	@ 0x24
 8003c56:	f7ff fef5 	bl	8003a44 <_printf_common>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d148      	bne.n	8003cf0 <_printf_i+0x1cc>
 8003c5e:	2001      	movs	r0, #1
 8003c60:	4240      	negs	r0, r0
 8003c62:	b00b      	add	sp, #44	@ 0x2c
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c66:	2220      	movs	r2, #32
 8003c68:	6809      	ldr	r1, [r1, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	6022      	str	r2, [r4, #0]
 8003c6e:	2278      	movs	r2, #120	@ 0x78
 8003c70:	4932      	ldr	r1, [pc, #200]	@ (8003d3c <_printf_i+0x218>)
 8003c72:	9104      	str	r1, [sp, #16]
 8003c74:	0021      	movs	r1, r4
 8003c76:	3145      	adds	r1, #69	@ 0x45
 8003c78:	700a      	strb	r2, [r1, #0]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	c940      	ldmia	r1!, {r6}
 8003c80:	0610      	lsls	r0, r2, #24
 8003c82:	d402      	bmi.n	8003c8a <_printf_i+0x166>
 8003c84:	0650      	lsls	r0, r2, #25
 8003c86:	d500      	bpl.n	8003c8a <_printf_i+0x166>
 8003c88:	b2b6      	uxth	r6, r6
 8003c8a:	6019      	str	r1, [r3, #0]
 8003c8c:	07d3      	lsls	r3, r2, #31
 8003c8e:	d502      	bpl.n	8003c96 <_printf_i+0x172>
 8003c90:	2320      	movs	r3, #32
 8003c92:	4313      	orrs	r3, r2
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	2e00      	cmp	r6, #0
 8003c98:	d001      	beq.n	8003c9e <_printf_i+0x17a>
 8003c9a:	2710      	movs	r7, #16
 8003c9c:	e7a8      	b.n	8003bf0 <_printf_i+0xcc>
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	4393      	bics	r3, r2
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	e7f8      	b.n	8003c9a <_printf_i+0x176>
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	680d      	ldr	r5, [r1, #0]
 8003cac:	1d10      	adds	r0, r2, #4
 8003cae:	6949      	ldr	r1, [r1, #20]
 8003cb0:	6018      	str	r0, [r3, #0]
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	062e      	lsls	r6, r5, #24
 8003cb6:	d501      	bpl.n	8003cbc <_printf_i+0x198>
 8003cb8:	6019      	str	r1, [r3, #0]
 8003cba:	e002      	b.n	8003cc2 <_printf_i+0x19e>
 8003cbc:	066d      	lsls	r5, r5, #25
 8003cbe:	d5fb      	bpl.n	8003cb8 <_printf_i+0x194>
 8003cc0:	8019      	strh	r1, [r3, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9d03      	ldr	r5, [sp, #12]
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	e7bf      	b.n	8003c4a <_printf_i+0x126>
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	1d11      	adds	r1, r2, #4
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	6815      	ldr	r5, [r2, #0]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	0028      	movs	r0, r5
 8003cd6:	6862      	ldr	r2, [r4, #4]
 8003cd8:	f000 f858 	bl	8003d8c <memchr>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d001      	beq.n	8003ce4 <_printf_i+0x1c0>
 8003ce0:	1b40      	subs	r0, r0, r5
 8003ce2:	6060      	str	r0, [r4, #4]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9a03      	ldr	r2, [sp, #12]
 8003cec:	7013      	strb	r3, [r2, #0]
 8003cee:	e7ac      	b.n	8003c4a <_printf_i+0x126>
 8003cf0:	002a      	movs	r2, r5
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	9906      	ldr	r1, [sp, #24]
 8003cf6:	9805      	ldr	r0, [sp, #20]
 8003cf8:	9d07      	ldr	r5, [sp, #28]
 8003cfa:	47a8      	blx	r5
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d0ae      	beq.n	8003c5e <_printf_i+0x13a>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	079b      	lsls	r3, r3, #30
 8003d04:	d415      	bmi.n	8003d32 <_printf_i+0x20e>
 8003d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d08:	68e0      	ldr	r0, [r4, #12]
 8003d0a:	4298      	cmp	r0, r3
 8003d0c:	daa9      	bge.n	8003c62 <_printf_i+0x13e>
 8003d0e:	0018      	movs	r0, r3
 8003d10:	e7a7      	b.n	8003c62 <_printf_i+0x13e>
 8003d12:	0022      	movs	r2, r4
 8003d14:	2301      	movs	r3, #1
 8003d16:	9906      	ldr	r1, [sp, #24]
 8003d18:	9805      	ldr	r0, [sp, #20]
 8003d1a:	9e07      	ldr	r6, [sp, #28]
 8003d1c:	3219      	adds	r2, #25
 8003d1e:	47b0      	blx	r6
 8003d20:	3001      	adds	r0, #1
 8003d22:	d09c      	beq.n	8003c5e <_printf_i+0x13a>
 8003d24:	3501      	adds	r5, #1
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dcf0      	bgt.n	8003d12 <_printf_i+0x1ee>
 8003d30:	e7e9      	b.n	8003d06 <_printf_i+0x1e2>
 8003d32:	2500      	movs	r5, #0
 8003d34:	e7f7      	b.n	8003d26 <_printf_i+0x202>
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	08003ef5 	.word	0x08003ef5
 8003d3c:	08003f06 	.word	0x08003f06

08003d40 <memmove>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4288      	cmp	r0, r1
 8003d44:	d806      	bhi.n	8003d54 <memmove+0x14>
 8003d46:	2300      	movs	r3, #0
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d008      	beq.n	8003d5e <memmove+0x1e>
 8003d4c:	5ccc      	ldrb	r4, [r1, r3]
 8003d4e:	54c4      	strb	r4, [r0, r3]
 8003d50:	3301      	adds	r3, #1
 8003d52:	e7f9      	b.n	8003d48 <memmove+0x8>
 8003d54:	188b      	adds	r3, r1, r2
 8003d56:	4298      	cmp	r0, r3
 8003d58:	d2f5      	bcs.n	8003d46 <memmove+0x6>
 8003d5a:	3a01      	subs	r2, #1
 8003d5c:	d200      	bcs.n	8003d60 <memmove+0x20>
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	5c8b      	ldrb	r3, [r1, r2]
 8003d62:	5483      	strb	r3, [r0, r2]
 8003d64:	e7f9      	b.n	8003d5a <memmove+0x1a>
	...

08003d68 <_sbrk_r>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	4d06      	ldr	r5, [pc, #24]	@ (8003d88 <_sbrk_r+0x20>)
 8003d6e:	0004      	movs	r4, r0
 8003d70:	0008      	movs	r0, r1
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	f7fc feac 	bl	8000ad0 <_sbrk>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d103      	bne.n	8003d84 <_sbrk_r+0x1c>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d000      	beq.n	8003d84 <_sbrk_r+0x1c>
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	200002f0 	.word	0x200002f0

08003d8c <memchr>:
 8003d8c:	b2c9      	uxtb	r1, r1
 8003d8e:	1882      	adds	r2, r0, r2
 8003d90:	4290      	cmp	r0, r2
 8003d92:	d101      	bne.n	8003d98 <memchr+0xc>
 8003d94:	2000      	movs	r0, #0
 8003d96:	4770      	bx	lr
 8003d98:	7803      	ldrb	r3, [r0, #0]
 8003d9a:	428b      	cmp	r3, r1
 8003d9c:	d0fb      	beq.n	8003d96 <memchr+0xa>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	e7f6      	b.n	8003d90 <memchr+0x4>

08003da2 <memcpy>:
 8003da2:	2300      	movs	r3, #0
 8003da4:	b510      	push	{r4, lr}
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d100      	bne.n	8003dac <memcpy+0xa>
 8003daa:	bd10      	pop	{r4, pc}
 8003dac:	5ccc      	ldrb	r4, [r1, r3]
 8003dae:	54c4      	strb	r4, [r0, r3]
 8003db0:	3301      	adds	r3, #1
 8003db2:	e7f8      	b.n	8003da6 <memcpy+0x4>

08003db4 <_realloc_r>:
 8003db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db6:	0006      	movs	r6, r0
 8003db8:	000c      	movs	r4, r1
 8003dba:	0015      	movs	r5, r2
 8003dbc:	2900      	cmp	r1, #0
 8003dbe:	d105      	bne.n	8003dcc <_realloc_r+0x18>
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	f7ff fc51 	bl	8003668 <_malloc_r>
 8003dc6:	0004      	movs	r4, r0
 8003dc8:	0020      	movs	r0, r4
 8003dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dcc:	2a00      	cmp	r2, #0
 8003dce:	d103      	bne.n	8003dd8 <_realloc_r+0x24>
 8003dd0:	f7ff fbde 	bl	8003590 <_free_r>
 8003dd4:	2400      	movs	r4, #0
 8003dd6:	e7f7      	b.n	8003dc8 <_realloc_r+0x14>
 8003dd8:	f000 f81b 	bl	8003e12 <_malloc_usable_size_r>
 8003ddc:	0007      	movs	r7, r0
 8003dde:	4285      	cmp	r5, r0
 8003de0:	d802      	bhi.n	8003de8 <_realloc_r+0x34>
 8003de2:	0843      	lsrs	r3, r0, #1
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	d3ef      	bcc.n	8003dc8 <_realloc_r+0x14>
 8003de8:	0029      	movs	r1, r5
 8003dea:	0030      	movs	r0, r6
 8003dec:	f7ff fc3c 	bl	8003668 <_malloc_r>
 8003df0:	9001      	str	r0, [sp, #4]
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0ee      	beq.n	8003dd4 <_realloc_r+0x20>
 8003df6:	002a      	movs	r2, r5
 8003df8:	42bd      	cmp	r5, r7
 8003dfa:	d900      	bls.n	8003dfe <_realloc_r+0x4a>
 8003dfc:	003a      	movs	r2, r7
 8003dfe:	0021      	movs	r1, r4
 8003e00:	9801      	ldr	r0, [sp, #4]
 8003e02:	f7ff ffce 	bl	8003da2 <memcpy>
 8003e06:	0021      	movs	r1, r4
 8003e08:	0030      	movs	r0, r6
 8003e0a:	f7ff fbc1 	bl	8003590 <_free_r>
 8003e0e:	9c01      	ldr	r4, [sp, #4]
 8003e10:	e7da      	b.n	8003dc8 <_realloc_r+0x14>

08003e12 <_malloc_usable_size_r>:
 8003e12:	1f0b      	subs	r3, r1, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1f18      	subs	r0, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da01      	bge.n	8003e20 <_malloc_usable_size_r+0xe>
 8003e1c:	580b      	ldr	r3, [r1, r0]
 8003e1e:	18c0      	adds	r0, r0, r3
 8003e20:	4770      	bx	lr
	...

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
