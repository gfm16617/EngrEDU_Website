
2024_STM32C011J4M6_BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800277c  0800277c  0000377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002804  08002804  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002804  08002804  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002804  08002804  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002804  08002804  00003804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800280c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002818  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002818  00004114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c930  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c62  00000000  00000000  00010964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ef  00000000  00000000  00012fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012838  00000000  00000000  000137d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e186  00000000  00000000  0002600f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000731f1  00000000  00000000  00034195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000a73cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000a97c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002764 	.word	0x08002764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002764 	.word	0x08002764

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 faab 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f819 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8e9 	bl	80005d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f899 	bl	800053c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800040a:	f000 f857 	bl	80004bc <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check if serial data is available
	  if( HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) == HAL_OK ) {
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	1df9      	adds	r1, r7, #7
 8000414:	4806      	ldr	r0, [pc, #24]	@ (8000430 <main+0x3c>)
 8000416:	2201      	movs	r2, #1
 8000418:	f001 fbcc 	bl	8001bb4 <HAL_UART_Receive>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d1f6      	bne.n	800040e <main+0x1a>
	  	  HAL_UART_Transmit(&huart1, &rxData, sizeof(rxData), HAL_MAX_DELAY);
 8000420:	2301      	movs	r3, #1
 8000422:	425b      	negs	r3, r3
 8000424:	1df9      	adds	r1, r7, #7
 8000426:	4802      	ldr	r0, [pc, #8]	@ (8000430 <main+0x3c>)
 8000428:	2201      	movs	r2, #1
 800042a:	f001 fb1f 	bl	8001a6c <HAL_UART_Transmit>
	  if( HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) == HAL_OK ) {
 800042e:	e7ee      	b.n	800040e <main+0x1a>
 8000430:	2000007c 	.word	0x2000007c

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b08d      	sub	sp, #52	@ 0x34
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	2414      	movs	r4, #20
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	231c      	movs	r3, #28
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 f961 	bl	800270c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	003b      	movs	r3, r7
 800044c:	0018      	movs	r0, r3
 800044e:	2314      	movs	r3, #20
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f002 f95a 	bl	800270c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2202      	movs	r2, #2
 800045c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2240      	movs	r2, #64	@ 0x40
 8000470:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fe63 	bl	8001140 <HAL_RCC_OscConfig>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800047e:	f000 f8cd 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	003b      	movs	r3, r7
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000488:	003b      	movs	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000494:	003b      	movs	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800049a:	003b      	movs	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a0:	003b      	movs	r3, r7
 80004a2:	2101      	movs	r1, #1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 f82f 	bl	8001508 <HAL_RCC_ClockConfig>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004ae:	f000 f8b5 	bl	800061c <Error_Handler>
  }
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b00d      	add	sp, #52	@ 0x34
 80004b8:	bd90      	pop	{r4, r7, pc}
	...

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <MX_I2C1_Init+0x78>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000538 <MX_I2C1_Init+0x7c>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fce3 	bl	8000ec4 <HAL_I2C_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000502:	f000 f88b 	bl	800061c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000506:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <MX_I2C1_Init+0x74>)
 8000508:	2100      	movs	r1, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fd80 	bl	8001010 <HAL_I2CEx_ConfigAnalogFilter>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000514:	f000 f882 	bl	800061c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <MX_I2C1_Init+0x74>)
 800051a:	2100      	movs	r1, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fdc3 	bl	80010a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 f879 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000028 	.word	0x20000028
 8000534:	40005400 	.word	0x40005400
 8000538:	20303e5d 	.word	0x20303e5d

0800053c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000540:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000542:	4a24      	ldr	r2, [pc, #144]	@ (80005d4 <MX_USART1_UART_Init+0x98>)
 8000544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000546:	4b22      	ldr	r3, [pc, #136]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000548:	22e1      	movs	r2, #225	@ 0xe1
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b1a      	ldr	r3, [pc, #104]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fa1a 	bl	80019c0 <HAL_UART_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000590:	f000 f844 	bl	800061c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 ffd7 	bl	800254c <HAL_UARTEx_SetTxFifoThreshold>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005a2:	f000 f83b 	bl	800061c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 f80e 	bl	80025cc <HAL_UARTEx_SetRxFifoThreshold>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005b4:	f000 f832 	bl	800061c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <MX_USART1_UART_Init+0x94>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 ff8c 	bl	80024d8 <HAL_UARTEx_DisableFifoMode>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005c4:	f000 f82a 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	40013800 	.word	0x40013800

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_GPIO_Init+0x40>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_GPIO_Init+0x40>)
 80005e4:	2102      	movs	r1, #2
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_GPIO_Init+0x40>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ee:	2202      	movs	r2, #2
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_GPIO_Init+0x40>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_GPIO_Init+0x40>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	@ 0x34
 8000602:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <MX_GPIO_Init+0x40>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	e7fd      	b.n	8000624 <Error_Handler+0x8>

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <HAL_MspInit+0x48>)
 8000630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x48>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	641a      	str	r2, [r3, #64]	@ 0x40
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <HAL_MspInit+0x48>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_MspInit+0x48>)
 8000648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_MspInit+0x48>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0549      	lsls	r1, r1, #21
 8000650:	430a      	orrs	r2, r1
 8000652:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_MspInit+0x48>)
 8000656:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	055b      	lsls	r3, r3, #21
 800065c:	4013      	ands	r3, r2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8000662:	2010      	movs	r0, #16
 8000664:	f000 f9f4 	bl	8000a50 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b093      	sub	sp, #76	@ 0x4c
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	2334      	movs	r3, #52	@ 0x34
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 f840 	bl	800270c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	2418      	movs	r4, #24
 800068e:	193b      	adds	r3, r7, r4
 8000690:	0018      	movs	r0, r3
 8000692:	231c      	movs	r3, #28
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 f838 	bl	800270c <memset>
  if(hi2c->Instance==I2C1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a36      	ldr	r2, [pc, #216]	@ (800077c <HAL_I2C_MspInit+0x108>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d166      	bne.n	8000774 <HAL_I2C_MspInit+0x100>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2240      	movs	r2, #64	@ 0x40
 80006aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 f895 	bl	80017e4 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006be:	f7ff ffad 	bl	800061c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 80006e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006f2:	2434      	movs	r4, #52	@ 0x34
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2212      	movs	r2, #18
 80006fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	220e      	movs	r2, #14
 8000710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <HAL_I2C_MspInit+0x110>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f000 fa69 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2212      	movs	r2, #18
 800072c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2206      	movs	r2, #6
 800073e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	187a      	adds	r2, r7, r1
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fa51 	bl	8000bf0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 800074e:	23c0      	movs	r3, #192	@ 0xc0
 8000750:	029b      	lsls	r3, r3, #10
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f98c 	bl	8000a70 <HAL_SYSCFG_SetPinBinding>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 800075a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	0389      	lsls	r1, r1, #14
 8000762:	430a      	orrs	r2, r1
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_I2C_MspInit+0x10c>)
 8000768:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800076a:	2380      	movs	r3, #128	@ 0x80
 800076c:	039b      	lsls	r3, r3, #14
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b013      	add	sp, #76	@ 0x4c
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40005400 	.word	0x40005400
 8000780:	40021000 	.word	0x40021000
 8000784:	50000400 	.word	0x50000400

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b091      	sub	sp, #68	@ 0x44
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	232c      	movs	r3, #44	@ 0x2c
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f001 ffb6 	bl	800270c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	2410      	movs	r4, #16
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	231c      	movs	r3, #28
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f001 ffae 	bl	800270c <memset>
  if(huart->Instance==USART1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a30      	ldr	r2, [pc, #192]	@ (8000878 <HAL_UART_MspInit+0xf0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d15a      	bne.n	8000870 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f80b 	bl	80017e4 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007d2:	f7ff ff23 	bl	800061c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <HAL_UART_MspInit+0xf4>)
 80007d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <HAL_UART_MspInit+0xf4>)
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	01c9      	lsls	r1, r1, #7
 80007e0:	430a      	orrs	r2, r1
 80007e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <HAL_UART_MspInit+0xf4>)
 80007e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	01db      	lsls	r3, r3, #7
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <HAL_UART_MspInit+0xf4>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <HAL_UART_MspInit+0xf4>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <HAL_UART_MspInit+0xf4>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080a:	242c      	movs	r4, #44	@ 0x2c
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2204      	movs	r2, #4
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	193a      	adds	r2, r7, r4
 800082c:	23a0      	movs	r3, #160	@ 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f9dc 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	220e      	movs	r2, #14
 8000858:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	187a      	adds	r2, r7, r1
 800085c:	23a0      	movs	r3, #160	@ 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f9c4 	bl	8000bf0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA8);
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_UART_MspInit+0xf8>)
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f900 	bl	8000a70 <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b011      	add	sp, #68	@ 0x44
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	40013800 	.word	0x40013800
 800087c:	40021000 	.word	0x40021000
 8000880:	003c0004 	.word	0x003c0004

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f8b4 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <SystemInit+0x14>)
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	0512      	lsls	r2, r2, #20
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff fff0 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008da:	e003      	b.n	80008e4 <LoopCopyDataInit>

080008dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80008de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008e2:	3104      	adds	r1, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008e4:	480a      	ldr	r0, [pc, #40]	@ (8000910 <LoopForever+0xa>)
  ldr r3, =_edata
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <LoopForever+0xe>)
  adds r2, r0, r1
 80008e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008ec:	d3f6      	bcc.n	80008dc <CopyDataInit>
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  b LoopFillZerobss
 80008f0:	e002      	b.n	80008f8 <LoopFillZerobss>

080008f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  str  r3, [r2]
 80008f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f6:	3204      	adds	r2, #4

080008f8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <LoopForever+0x16>)
  cmp r2, r3
 80008fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008fc:	d3f9      	bcc.n	80008f2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80008fe:	f001 ff0d 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fd77 	bl	80003f4 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800090c:	0800280c 	.word	0x0800280c
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000914:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800091c:	20000114 	.word	0x20000114

08000920 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_IRQHandler>
	...

08000924 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <LL_SYSCFG_ConfigPinMux+0x2c>)
 800092e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	0c12      	lsrs	r2, r2, #16
 8000934:	43d2      	mvns	r2, r2
 8000936:	401a      	ands	r2, r3
 8000938:	0011      	movs	r1, r2
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	0c1a      	lsrs	r2, r3, #16
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000942:	430a      	orrs	r2, r1
 8000944:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	40010000 	.word	0x40010000

08000954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f80f 	bl	8000984 <HAL_InitTick>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d003      	beq.n	8000972 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	e001      	b.n	8000976 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000972:	f7ff fe59 	bl	8000628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	230f      	movs	r3, #15
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_InitTick+0x88>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d02b      	beq.n	80009f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_InitTick+0x8c>)
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_InitTick+0x88>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	0019      	movs	r1, r3
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	0098      	lsls	r0, r3, #2
 80009aa:	f7ff fbad 	bl	8000108 <__udivsi3>
 80009ae:	0003      	movs	r3, r0
 80009b0:	0019      	movs	r1, r3
 80009b2:	0020      	movs	r0, r4
 80009b4:	f7ff fba8 	bl	8000108 <__udivsi3>
 80009b8:	0003      	movs	r3, r0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f90b 	bl	8000bd6 <HAL_SYSTICK_Config>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d112      	bne.n	80009ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d80a      	bhi.n	80009e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2301      	movs	r3, #1
 80009ce:	425b      	negs	r3, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f8ea 	bl	8000bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_InitTick+0x90>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e00d      	b.n	80009fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e008      	b.n	80009fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ea:	230f      	movs	r3, #15
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e003      	b.n	80009fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	781b      	ldrb	r3, [r3, #0]
}
 8000a02:	0018      	movs	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b005      	add	sp, #20
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	001a      	movs	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	18d2      	adds	r2, r2, r3
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000110 	.word	0x20000110

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	20000110 	.word	0x20000110

08000a50 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <HAL_SYSCFG_EnableRemap+0x1c>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_SYSCFG_EnableRemap+0x1c>)
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010000 	.word	0x40010000

08000a70 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff ff52 	bl	8000924 <LL_SYSCFG_ConfigPinMux>
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	@ 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	@ 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	@ 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	@ 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <SysTick_Config>
 8000be6:	0003      	movs	r3, r0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bfe:	e14d      	b.n	8000e9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x28>
 8000c16:	e13e      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x38>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b12      	cmp	r3, #18
 8000c26:	d125      	bne.n	8000c74 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	58d3      	ldr	r3, [r2, r3]
 8000c34:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	2207      	movs	r2, #7
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	43da      	mvns	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	220f      	movs	r2, #15
 8000c52:	401a      	ands	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	2107      	movs	r1, #7
 8000c58:	400b      	ands	r3, r1
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	6979      	ldr	r1, [r7, #20]
 8000c72:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	43da      	mvns	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	401a      	ands	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d00b      	beq.n	8000cc8 <HAL_GPIO_Init+0xd8>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cbc:	2b11      	cmp	r3, #17
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b12      	cmp	r3, #18
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	2201      	movs	r2, #1
 8000d16:	401a      	ands	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d017      	beq.n	8000d62 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	4013      	ands	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	055b      	lsls	r3, r3, #21
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d100      	bne.n	8000d70 <HAL_GPIO_Init+0x180>
 8000d6e:	e092      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d70:	4a50      	ldr	r2, [pc, #320]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3318      	adds	r3, #24
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	589b      	ldr	r3, [r3, r2]
 8000d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	220f      	movs	r2, #15
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	23a0      	movs	r3, #160	@ 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a45      	ldr	r2, [pc, #276]	@ (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x1d2>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a44      	ldr	r2, [pc, #272]	@ (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x1ce>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a43      	ldr	r2, [pc, #268]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x1d8>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x1d8>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x1d8>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x1d8>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	2103      	movs	r1, #3
 8000dcc:	400a      	ands	r2, r1
 8000dce:	00d2      	lsls	r2, r2, #3
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000dd8:	4936      	ldr	r1, [pc, #216]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3318      	adds	r3, #24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000de6:	4a33      	ldr	r2, [pc, #204]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	58d3      	ldr	r3, [r2, r3]
 8000dec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000e0c:	4929      	ldr	r1, [pc, #164]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000e14:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e16:	2384      	movs	r3, #132	@ 0x84
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	4013      	ands	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000e3a:	491e      	ldr	r1, [pc, #120]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e3c:	2284      	movs	r2, #132	@ 0x84
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	035b      	lsls	r3, r3, #13
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	039b      	lsls	r3, r3, #14
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2ba>
 8000ea8:	e6aa      	b.n	8000c00 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	50000400 	.word	0x50000400
 8000ebc:	50000800 	.word	0x50000800
 8000ec0:	50001400 	.word	0x50001400

08000ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e08f      	b.n	8000ff6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2241      	movs	r2, #65	@ 0x41
 8000eda:	5c9b      	ldrb	r3, [r3, r2]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d107      	bne.n	8000ef2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2240      	movs	r2, #64	@ 0x40
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fbc1 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2241      	movs	r2, #65	@ 0x41
 8000ef6:	2124      	movs	r1, #36	@ 0x24
 8000ef8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	438a      	bics	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	493b      	ldr	r1, [pc, #236]	@ (8001000 <HAL_I2C_Init+0x13c>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4938      	ldr	r1, [pc, #224]	@ (8001004 <HAL_I2C_Init+0x140>)
 8000f24:	400a      	ands	r2, r1
 8000f26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	0209      	lsls	r1, r1, #8
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	e007      	b.n	8000f52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2184      	movs	r1, #132	@ 0x84
 8000f4c:	0209      	lsls	r1, r1, #8
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d109      	bne.n	8000f6e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	0109      	lsls	r1, r1, #4
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	e007      	b.n	8000f7e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4923      	ldr	r1, [pc, #140]	@ (8001008 <HAL_I2C_Init+0x144>)
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4920      	ldr	r1, [pc, #128]	@ (800100c <HAL_I2C_Init+0x148>)
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	491a      	ldr	r1, [pc, #104]	@ (8001004 <HAL_I2C_Init+0x140>)
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69d9      	ldr	r1, [r3, #28]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1a      	ldr	r2, [r3, #32]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2241      	movs	r2, #65	@ 0x41
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2242      	movs	r2, #66	@ 0x42
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	f0ffffff 	.word	0xf0ffffff
 8001004:	ffff7fff 	.word	0xffff7fff
 8001008:	fffff7ff 	.word	0xfffff7ff
 800100c:	02008000 	.word	0x02008000

08001010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2241      	movs	r2, #65	@ 0x41
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b20      	cmp	r3, #32
 8001024:	d138      	bne.n	8001098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2240      	movs	r2, #64	@ 0x40
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001030:	2302      	movs	r3, #2
 8001032:	e032      	b.n	800109a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2240      	movs	r2, #64	@ 0x40
 8001038:	2101      	movs	r1, #1
 800103a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2241      	movs	r2, #65	@ 0x41
 8001040:	2124      	movs	r1, #36	@ 0x24
 8001042:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2101      	movs	r1, #1
 8001050:	438a      	bics	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4911      	ldr	r1, [pc, #68]	@ (80010a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2101      	movs	r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2241      	movs	r2, #65	@ 0x41
 8001088:	2120      	movs	r1, #32
 800108a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2240      	movs	r2, #64	@ 0x40
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001098:	2302      	movs	r3, #2
  }
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	ffffefff 	.word	0xffffefff

080010a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2241      	movs	r2, #65	@ 0x41
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d139      	bne.n	8001132 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2240      	movs	r2, #64	@ 0x40
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e033      	b.n	8001134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2240      	movs	r2, #64	@ 0x40
 80010d0:	2101      	movs	r1, #1
 80010d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2241      	movs	r2, #65	@ 0x41
 80010d8:	2124      	movs	r1, #36	@ 0x24
 80010da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2241      	movs	r2, #65	@ 0x41
 8001122:	2120      	movs	r1, #32
 8001124:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2240      	movs	r2, #64	@ 0x40
 800112a:	2100      	movs	r1, #0
 800112c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001132:	2302      	movs	r3, #2
  }
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}
 800113c:	fffff0ff 	.word	0xfffff0ff

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e1d0      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d100      	bne.n	800115e <HAL_RCC_OscConfig+0x1e>
 800115c:	e069      	b.n	8001232 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4bc8      	ldr	r3, [pc, #800]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2238      	movs	r2, #56	@ 0x38
 8001164:	4013      	ands	r3, r2
 8001166:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d105      	bne.n	800117a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d15d      	bne.n	8001232 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1bc      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	429a      	cmp	r2, r3
 8001184:	d107      	bne.n	8001196 <HAL_RCC_OscConfig+0x56>
 8001186:	4bbe      	ldr	r3, [pc, #760]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4bbd      	ldr	r3, [pc, #756]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800118c:	2180      	movs	r1, #128	@ 0x80
 800118e:	0249      	lsls	r1, r1, #9
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e020      	b.n	80011d8 <HAL_RCC_OscConfig+0x98>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	23a0      	movs	r3, #160	@ 0xa0
 800119c:	02db      	lsls	r3, r3, #11
 800119e:	429a      	cmp	r2, r3
 80011a0:	d10e      	bne.n	80011c0 <HAL_RCC_OscConfig+0x80>
 80011a2:	4bb7      	ldr	r3, [pc, #732]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4bb6      	ldr	r3, [pc, #728]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	02c9      	lsls	r1, r1, #11
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4bb2      	ldr	r3, [pc, #712]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	0249      	lsls	r1, r1, #9
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011c0:	4baf      	ldr	r3, [pc, #700]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4bae      	ldr	r3, [pc, #696]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011c6:	49af      	ldr	r1, [pc, #700]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	4bac      	ldr	r3, [pc, #688]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4bab      	ldr	r3, [pc, #684]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011d2:	49ad      	ldr	r1, [pc, #692]	@ (8001488 <HAL_RCC_OscConfig+0x348>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d014      	beq.n	800120a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc2c 	bl	8000a3c <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011ea:	f7ff fc27 	bl	8000a3c <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b64      	cmp	r3, #100	@ 0x64
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e17b      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0xaa>
 8001208:	e013      	b.n	8001232 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fc17 	bl	8000a3c <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001214:	f7ff fc12 	bl	8000a3c <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	@ 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e166      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001226:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2202      	movs	r2, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0xfe>
 800123c:	e086      	b.n	800134c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123e:	4b90      	ldr	r3, [pc, #576]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2238      	movs	r2, #56	@ 0x38
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d12f      	bne.n	80012ae <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e14c      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b89      	ldr	r3, [pc, #548]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a8b      	ldr	r2, [pc, #556]	@ (800148c <HAL_RCC_OscConfig+0x34c>)
 8001260:	4013      	ands	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	021a      	lsls	r2, r3, #8
 800126a:	4b85      	ldr	r3, [pc, #532]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a85      	ldr	r2, [pc, #532]	@ (8001490 <HAL_RCC_OscConfig+0x350>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800128a:	4b7d      	ldr	r3, [pc, #500]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0adb      	lsrs	r3, r3, #11
 8001290:	2207      	movs	r2, #7
 8001292:	4013      	ands	r3, r2
 8001294:	4a7f      	ldr	r2, [pc, #508]	@ (8001494 <HAL_RCC_OscConfig+0x354>)
 8001296:	40da      	lsrs	r2, r3
 8001298:	4b7f      	ldr	r3, [pc, #508]	@ (8001498 <HAL_RCC_OscConfig+0x358>)
 800129a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800129c:	4b7f      	ldr	r3, [pc, #508]	@ (800149c <HAL_RCC_OscConfig+0x35c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fb6f 	bl	8000984 <HAL_InitTick>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d050      	beq.n	800134c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e122      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d030      	beq.n	8001318 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012b6:	4b72      	ldr	r3, [pc, #456]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	@ (8001490 <HAL_RCC_OscConfig+0x350>)
 80012bc:	4013      	ands	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012d0:	2180      	movs	r1, #128	@ 0x80
 80012d2:	0049      	lsls	r1, r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fbb0 	bl	8000a3c <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fbab 	bl	8000a3c <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ff      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	4b62      	ldr	r3, [pc, #392]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b5f      	ldr	r3, [pc, #380]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a61      	ldr	r2, [pc, #388]	@ (800148c <HAL_RCC_OscConfig+0x34c>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	021a      	lsls	r2, r3, #8
 8001310:	4b5b      	ldr	r3, [pc, #364]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	e019      	b.n	800134c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001318:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b58      	ldr	r3, [pc, #352]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800131e:	4960      	ldr	r1, [pc, #384]	@ (80014a0 <HAL_RCC_OscConfig+0x360>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb8a 	bl	8000a3c <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800132e:	f7ff fb85 	bl	8000a3c <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0d9      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	4b4f      	ldr	r3, [pc, #316]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4013      	ands	r3, r2
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2208      	movs	r2, #8
 8001352:	4013      	ands	r3, r2
 8001354:	d042      	beq.n	80013dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2238      	movs	r2, #56	@ 0x38
 800135c:	4013      	ands	r3, r2
 800135e:	2b18      	cmp	r3, #24
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d138      	bne.n	80013dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0c2      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fb5b 	bl	8000a3c <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800138c:	f7ff fb56 	bl	8000a3c <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0aa      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800139e:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f1      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
 80013a8:	e018      	b.n	80013dc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013aa:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80013ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	438a      	bics	r2, r1
 80013b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb41 	bl	8000a3c <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb3c 	bl	8000a3c <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e090      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d1f1      	bne.n	80013c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2204      	movs	r2, #4
 80013e2:	4013      	ands	r3, r2
 80013e4:	d100      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2a8>
 80013e6:	e084      	b.n	80014f2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2238      	movs	r2, #56	@ 0x38
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d000      	beq.n	8001406 <HAL_RCC_OscConfig+0x2c6>
 8001404:	e075      	b.n	80014f2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e074      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x2e0>
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001414:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001418:	2101      	movs	r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800141e:	e01c      	b.n	800145a <HAL_RCC_OscConfig+0x31a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d10c      	bne.n	8001442 <HAL_RCC_OscConfig+0x302>
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800142a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800142e:	2104      	movs	r1, #4
 8001430:	430a      	orrs	r2, r1
 8001432:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001440:	e00b      	b.n	800145a <HAL_RCC_OscConfig+0x31a>
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001448:	2101      	movs	r1, #1
 800144a:	438a      	bics	r2, r1
 800144c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001450:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 8001454:	2104      	movs	r1, #4
 8001456:	438a      	bics	r2, r1
 8001458:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d028      	beq.n	80014b4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff faeb 	bl	8000a3c <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fae6 	bl	8000a3c <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <HAL_RCC_OscConfig+0x364>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d915      	bls.n	80014a8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e039      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
 8001480:	40021000 	.word	0x40021000
 8001484:	fffeffff 	.word	0xfffeffff
 8001488:	fffbffff 	.word	0xfffbffff
 800148c:	ffff80ff 	.word	0xffff80ff
 8001490:	ffffc7ff 	.word	0xffffc7ff
 8001494:	02dc6c00 	.word	0x02dc6c00
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
 80014a0:	fffffeff 	.word	0xfffffeff
 80014a4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_RCC_OscConfig+0x3bc>)
 80014aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d0dc      	beq.n	800146c <HAL_RCC_OscConfig+0x32c>
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fac2 	bl	8000a3c <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fabd 	bl	8000a3c <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <HAL_RCC_OscConfig+0x3c0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e010      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_RCC_OscConfig+0x3bc>)
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d105      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_RCC_OscConfig+0x3bc>)
 80014e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <HAL_RCC_OscConfig+0x3bc>)
 80014ec:	4905      	ldr	r1, [pc, #20]	@ (8001504 <HAL_RCC_OscConfig+0x3c4>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b006      	add	sp, #24
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	00001388 	.word	0x00001388
 8001504:	efffffff 	.word	0xefffffff

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0e9      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2207      	movs	r2, #7
 8001522:	4013      	ands	r3, r2
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d91e      	bls.n	8001568 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2207      	movs	r2, #7
 8001530:	4393      	bics	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	4b70      	ldr	r3, [pc, #448]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800153c:	f7ff fa7e 	bl	8000a3c <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001544:	e009      	b.n	800155a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff fa79 	bl	8000a3c <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	4a6a      	ldr	r2, [pc, #424]	@ (80016fc <HAL_RCC_ClockConfig+0x1f4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0ca      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800155a:	4b67      	ldr	r3, [pc, #412]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2207      	movs	r2, #7
 8001560:	4013      	ands	r3, r2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d1ee      	bne.n	8001546 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d017      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d008      	beq.n	800158e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800157c:	4b60      	ldr	r3, [pc, #384]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a60      	ldr	r2, [pc, #384]	@ (8001704 <HAL_RCC_ClockConfig+0x1fc>)
 8001582:	401a      	ands	r2, r3
 8001584:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001586:	21b0      	movs	r1, #176	@ 0xb0
 8001588:	0109      	lsls	r1, r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158e:	4b5c      	ldr	r3, [pc, #368]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	4a5d      	ldr	r2, [pc, #372]	@ (8001708 <HAL_RCC_ClockConfig+0x200>)
 8001594:	4013      	ands	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d055      	beq.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80015ac:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	221c      	movs	r2, #28
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b51      	ldr	r3, [pc, #324]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	d11f      	bne.n	8001614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e08b      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e0:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4013      	ands	r3, r2
 80015ea:	d113      	bne.n	8001614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e07f      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d108      	bne.n	8001614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e074      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001606:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e06d      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001614:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2207      	movs	r2, #7
 800161a:	4393      	bics	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001628:	f7ff fa08 	bl	8000a3c <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001630:	e009      	b.n	8001646 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7ff fa03 	bl	8000a3c <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a2f      	ldr	r2, [pc, #188]	@ (80016fc <HAL_RCC_ClockConfig+0x1f4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e054      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2238      	movs	r2, #56	@ 0x38
 800164c:	401a      	ands	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	429a      	cmp	r2, r3
 8001656:	d1ec      	bne.n	8001632 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2207      	movs	r2, #7
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d21e      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2207      	movs	r2, #7
 800166c:	4393      	bics	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001678:	f7ff f9e0 	bl	8000a3c <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001680:	e009      	b.n	8001696 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7ff f9db 	bl	8000a3c <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <HAL_RCC_ClockConfig+0x1f4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e02c      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2207      	movs	r2, #7
 800169c:	4013      	ands	r3, r2
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2204      	movs	r2, #4
 80016aa:	4013      	ands	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4a16      	ldr	r2, [pc, #88]	@ (800170c <HAL_RCC_ClockConfig+0x204>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016c2:	f000 f82b 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016c6:	0001      	movs	r1, r0
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_RCC_ClockConfig+0x1f8>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	220f      	movs	r2, #15
 80016d0:	401a      	ands	r2, r3
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_RCC_ClockConfig+0x208>)
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	58d3      	ldr	r3, [r2, r3]
 80016d8:	221f      	movs	r2, #31
 80016da:	4013      	ands	r3, r2
 80016dc:	000a      	movs	r2, r1
 80016de:	40da      	lsrs	r2, r3
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_RCC_ClockConfig+0x20c>)
 80016e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_RCC_ClockConfig+0x210>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff f94b 	bl	8000984 <HAL_InitTick>
 80016ee:	0003      	movs	r3, r0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b004      	add	sp, #16
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000
 80016fc:	00001388 	.word	0x00001388
 8001700:	40021000 	.word	0x40021000
 8001704:	ffff84ff 	.word	0xffff84ff
 8001708:	fffff0ff 	.word	0xfffff0ff
 800170c:	ffff8fff 	.word	0xffff8fff
 8001710:	0800277c 	.word	0x0800277c
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x78>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2238      	movs	r2, #56	@ 0x38
 8001728:	4013      	ands	r3, r2
 800172a:	d10f      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x78>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0adb      	lsrs	r3, r3, #11
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	2201      	movs	r2, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4815      	ldr	r0, [pc, #84]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001742:	f7fe fce1 	bl	8000108 <__udivsi3>
 8001746:	0003      	movs	r3, r0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e01e      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x78>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2238      	movs	r2, #56	@ 0x38
 8001752:	4013      	ands	r3, r2
 8001754:	2b08      	cmp	r3, #8
 8001756:	d102      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_RCC_GetSysClockFreq+0x80>)
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	e015      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x78>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	2b20      	cmp	r3, #32
 8001768:	d103      	bne.n	8001772 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	e00b      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x78>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2238      	movs	r2, #56	@ 0x38
 8001778:	4013      	ands	r3, r2
 800177a:	2b18      	cmp	r3, #24
 800177c:	d103      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800177e:	23fa      	movs	r3, #250	@ 0xfa
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e001      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800178a:	687b      	ldr	r3, [r7, #4]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	02dc6c00 	.word	0x02dc6c00
 800179c:	007a1200 	.word	0x007a1200

080017a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80017b8:	f7ff fff2 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017bc:	0001      	movs	r1, r0
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	0b1b      	lsrs	r3, r3, #12
 80017c4:	2207      	movs	r2, #7
 80017c6:	401a      	ands	r2, r3
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	58d3      	ldr	r3, [r2, r3]
 80017ce:	221f      	movs	r2, #31
 80017d0:	4013      	ands	r3, r2
 80017d2:	40d9      	lsrs	r1, r3
 80017d4:	000b      	movs	r3, r1
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	080027bc 	.word	0x080027bc

080017e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80017ec:	2313      	movs	r3, #19
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017f4:	2312      	movs	r3, #18
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001808:	e079      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2011      	movs	r0, #17
 800180c:	183b      	adds	r3, r7, r0
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b64      	ldr	r3, [pc, #400]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	4013      	ands	r3, r2
 800181c:	d110      	bne.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b61      	ldr	r3, [pc, #388]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001822:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800182c:	4b5d      	ldr	r3, [pc, #372]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800182e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	183b      	adds	r3, r7, r0
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001840:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001842:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001844:	23c0      	movs	r3, #192	@ 0xc0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d019      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	d014      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800185c:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800185e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001860:	4a51      	ldr	r2, [pc, #324]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001862:	4013      	ands	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001866:	4b4f      	ldr	r3, [pc, #316]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800186a:	4b4e      	ldr	r3, [pc, #312]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	0249      	lsls	r1, r1, #9
 8001870:	430a      	orrs	r2, r1
 8001872:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001878:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800187a:	494c      	ldr	r1, [pc, #304]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800187c:	400a      	ands	r2, r1
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	d016      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff f8d5 	bl	8000a3c <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001896:	e00c      	b.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff f8d0 	bl	8000a3c <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d904      	bls.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80018a8:	2313      	movs	r3, #19
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2203      	movs	r2, #3
 80018ae:	701a      	strb	r2, [r3, #0]
          break;
 80018b0:	e004      	b.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018b2:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d0ed      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80018bc:	2313      	movs	r3, #19
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ca:	4a37      	ldr	r2, [pc, #220]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018da:	e005      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018dc:	2312      	movs	r3, #18
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2213      	movs	r2, #19
 80018e2:	18ba      	adds	r2, r7, r2
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e8:	2311      	movs	r3, #17
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018f8:	492e      	ldr	r1, [pc, #184]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	4013      	ands	r3, r2
 8001906:	d009      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001908:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	2203      	movs	r2, #3
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001918:	430a      	orrs	r2, r1
 800191a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2240      	movs	r2, #64	@ 0x40
 8001922:	4013      	ands	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192a:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001936:	430a      	orrs	r2, r1
 8001938:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	01db      	lsls	r3, r3, #7
 8001942:	4013      	ands	r3, r2
 8001944:	d008      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	0899      	lsrs	r1, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001954:	430a      	orrs	r2, r1
 8001956:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4013      	ands	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001974:	430a      	orrs	r2, r1
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da09      	bge.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	22e0      	movs	r2, #224	@ 0xe0
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001994:	2312      	movs	r3, #18
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b006      	add	sp, #24
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40021000 	.word	0x40021000
 80019a8:	fffffcff 	.word	0xfffffcff
 80019ac:	fffeffff 	.word	0xfffeffff
 80019b0:	00001388 	.word	0x00001388
 80019b4:	efffffff 	.word	0xefffffff
 80019b8:	ffffcfff 	.word	0xffffcfff
 80019bc:	ffff3fff 	.word	0xffff3fff

080019c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e046      	b.n	8001a60 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2288      	movs	r2, #136	@ 0x88
 80019d6:	589b      	ldr	r3, [r3, r2]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2284      	movs	r2, #132	@ 0x84
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fece 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2288      	movs	r2, #136	@ 0x88
 80019f0:	2124      	movs	r1, #36	@ 0x24
 80019f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 fb34 	bl	800207c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f9b2 	bl	8001d80 <UART_SetConfig>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01c      	b.n	8001a60 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <HAL_UART_Init+0xa8>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	212a      	movs	r1, #42	@ 0x2a
 8001a42:	438a      	bics	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 fbc3 	bl	80021e4 <UART_CheckIdleState>
 8001a5e:	0003      	movs	r3, r0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	ffffb7ff 	.word	0xffffb7ff

08001a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2288      	movs	r2, #136	@ 0x88
 8001a80:	589b      	ldr	r3, [r3, r2]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d000      	beq.n	8001a88 <HAL_UART_Transmit+0x1c>
 8001a86:	e090      	b.n	8001baa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_UART_Transmit+0x2a>
 8001a8e:	1dbb      	adds	r3, r7, #6
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e088      	b.n	8001bac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d109      	bne.n	8001aba <HAL_UART_Transmit+0x4e>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e078      	b.n	8001bac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2290      	movs	r2, #144	@ 0x90
 8001abe:	2100      	movs	r1, #0
 8001ac0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2288      	movs	r2, #136	@ 0x88
 8001ac6:	2121      	movs	r1, #33	@ 0x21
 8001ac8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aca:	f7fe ffb7 	bl	8000a3c <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1dba      	adds	r2, r7, #6
 8001ad6:	2154      	movs	r1, #84	@ 0x54
 8001ad8:	8812      	ldrh	r2, [r2, #0]
 8001ada:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1dba      	adds	r2, r7, #6
 8001ae0:	2156      	movs	r1, #86	@ 0x56
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d108      	bne.n	8001b04 <HAL_UART_Transmit+0x98>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e003      	b.n	8001b0c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b0c:	e030      	b.n	8001b70 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	0013      	movs	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	f000 fc0c 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2288      	movs	r2, #136	@ 0x88
 8001b28:	2120      	movs	r1, #32
 8001b2a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	05d2      	lsls	r2, r2, #23
 8001b42:	0dd2      	lsrs	r2, r2, #23
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e007      	b.n	8001b5e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2256      	movs	r2, #86	@ 0x56
 8001b62:	5a9b      	ldrh	r3, [r3, r2]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b299      	uxth	r1, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2256      	movs	r2, #86	@ 0x56
 8001b6e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2256      	movs	r2, #86	@ 0x56
 8001b74:	5a9b      	ldrh	r3, [r3, r2]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1c8      	bne.n	8001b0e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	0013      	movs	r3, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	2140      	movs	r1, #64	@ 0x40
 8001b8a:	f000 fbd5 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2288      	movs	r2, #136	@ 0x88
 8001b96:	2120      	movs	r1, #32
 8001b98:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e006      	b.n	8001bac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2288      	movs	r2, #136	@ 0x88
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b008      	add	sp, #32
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	1dbb      	adds	r3, r7, #6
 8001bc2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	228c      	movs	r2, #140	@ 0x8c
 8001bc8:	589b      	ldr	r3, [r3, r2]
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d000      	beq.n	8001bd0 <HAL_UART_Receive+0x1c>
 8001bce:	e0d0      	b.n	8001d72 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_UART_Receive+0x2a>
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0c8      	b.n	8001d74 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d109      	bne.n	8001c02 <HAL_UART_Receive+0x4e>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0b8      	b.n	8001d74 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2290      	movs	r2, #144	@ 0x90
 8001c06:	2100      	movs	r1, #0
 8001c08:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	228c      	movs	r2, #140	@ 0x8c
 8001c0e:	2122      	movs	r1, #34	@ 0x22
 8001c10:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c18:	f7fe ff10 	bl	8000a3c <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1dba      	adds	r2, r7, #6
 8001c24:	215c      	movs	r1, #92	@ 0x5c
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1dba      	adds	r2, r7, #6
 8001c2e:	215e      	movs	r1, #94	@ 0x5e
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10d      	bne.n	8001c5c <HAL_UART_Receive+0xa8>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <HAL_UART_Receive+0x9e>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2260      	movs	r2, #96	@ 0x60
 8001c4c:	494b      	ldr	r1, [pc, #300]	@ (8001d7c <HAL_UART_Receive+0x1c8>)
 8001c4e:	5299      	strh	r1, [r3, r2]
 8001c50:	e02e      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2260      	movs	r2, #96	@ 0x60
 8001c56:	21ff      	movs	r1, #255	@ 0xff
 8001c58:	5299      	strh	r1, [r3, r2]
 8001c5a:	e029      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_UART_Receive+0xcc>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <HAL_UART_Receive+0xc2>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2260      	movs	r2, #96	@ 0x60
 8001c70:	21ff      	movs	r1, #255	@ 0xff
 8001c72:	5299      	strh	r1, [r3, r2]
 8001c74:	e01c      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2260      	movs	r2, #96	@ 0x60
 8001c7a:	217f      	movs	r1, #127	@ 0x7f
 8001c7c:	5299      	strh	r1, [r3, r2]
 8001c7e:	e017      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	055b      	lsls	r3, r3, #21
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_UART_Receive+0xf4>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_UART_Receive+0xea>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2260      	movs	r2, #96	@ 0x60
 8001c98:	217f      	movs	r1, #127	@ 0x7f
 8001c9a:	5299      	strh	r1, [r3, r2]
 8001c9c:	e008      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2260      	movs	r2, #96	@ 0x60
 8001ca2:	213f      	movs	r1, #63	@ 0x3f
 8001ca4:	5299      	strh	r1, [r3, r2]
 8001ca6:	e003      	b.n	8001cb0 <HAL_UART_Receive+0xfc>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2260      	movs	r2, #96	@ 0x60
 8001cac:	2100      	movs	r1, #0
 8001cae:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	2160      	movs	r1, #96	@ 0x60
 8001cb8:	5a52      	ldrh	r2, [r2, r1]
 8001cba:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	015b      	lsls	r3, r3, #5
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d108      	bne.n	8001cda <HAL_UART_Receive+0x126>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e003      	b.n	8001ce2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001ce2:	e03a      	b.n	8001d5a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	0013      	movs	r3, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	f000 fb21 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	228c      	movs	r2, #140	@ 0x8c
 8001cfe:	2120      	movs	r1, #32
 8001d00:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e036      	b.n	8001d74 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10e      	bne.n	8001d2a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2212      	movs	r2, #18
 8001d16:	18ba      	adds	r2, r7, r2
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	3302      	adds	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	e00e      	b.n	8001d48 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2212      	movs	r2, #18
 8001d34:	18ba      	adds	r2, r7, r2
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	225e      	movs	r2, #94	@ 0x5e
 8001d4c:	5a9b      	ldrh	r3, [r3, r2]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b299      	uxth	r1, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	225e      	movs	r2, #94	@ 0x5e
 8001d58:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	225e      	movs	r2, #94	@ 0x5e
 8001d5e:	5a9b      	ldrh	r3, [r3, r2]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1be      	bne.n	8001ce4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	228c      	movs	r2, #140	@ 0x8c
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
  }
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b008      	add	sp, #32
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	000001ff 	.word	0x000001ff

08001d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d88:	231e      	movs	r3, #30
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4aab      	ldr	r2, [pc, #684]	@ (800205c <UART_SetConfig+0x2dc>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4aa6      	ldr	r2, [pc, #664]	@ (8002060 <UART_SetConfig+0x2e0>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a9d      	ldr	r2, [pc, #628]	@ (8002064 <UART_SetConfig+0x2e4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	220f      	movs	r2, #15
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a93      	ldr	r2, [pc, #588]	@ (8002068 <UART_SetConfig+0x2e8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d127      	bne.n	8001e6e <UART_SetConfig+0xee>
 8001e1e:	4b93      	ldr	r3, [pc, #588]	@ (800206c <UART_SetConfig+0x2ec>)
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	2203      	movs	r2, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <UART_SetConfig+0xda>
 8001e2a:	d81b      	bhi.n	8001e64 <UART_SetConfig+0xe4>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d00a      	beq.n	8001e46 <UART_SetConfig+0xc6>
 8001e30:	d818      	bhi.n	8001e64 <UART_SetConfig+0xe4>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <UART_SetConfig+0xbc>
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00a      	beq.n	8001e50 <UART_SetConfig+0xd0>
 8001e3a:	e013      	b.n	8001e64 <UART_SetConfig+0xe4>
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e021      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e01c      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e50:	231f      	movs	r3, #31
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2204      	movs	r2, #4
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e017      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e5a:	231f      	movs	r3, #31
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2208      	movs	r2, #8
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e012      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e64:	231f      	movs	r3, #31
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2210      	movs	r2, #16
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e00d      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7f      	ldr	r2, [pc, #508]	@ (8002070 <UART_SetConfig+0x2f0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d104      	bne.n	8001e82 <UART_SetConfig+0x102>
 8001e78:	231f      	movs	r3, #31
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e003      	b.n	8001e8a <UART_SetConfig+0x10a>
 8001e82:	231f      	movs	r3, #31
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2210      	movs	r2, #16
 8001e88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d000      	beq.n	8001e98 <UART_SetConfig+0x118>
 8001e96:	e06f      	b.n	8001f78 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001e98:	231f      	movs	r3, #31
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d01f      	beq.n	8001ee2 <UART_SetConfig+0x162>
 8001ea2:	dc22      	bgt.n	8001eea <UART_SetConfig+0x16a>
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d017      	beq.n	8001ed8 <UART_SetConfig+0x158>
 8001ea8:	dc1f      	bgt.n	8001eea <UART_SetConfig+0x16a>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <UART_SetConfig+0x134>
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d005      	beq.n	8001ebe <UART_SetConfig+0x13e>
 8001eb2:	e01a      	b.n	8001eea <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eb4:	f7ff fc7e 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	61bb      	str	r3, [r7, #24]
        break;
 8001ebc:	e01c      	b.n	8001ef8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800206c <UART_SetConfig+0x2ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	3301      	adds	r3, #1
 8001eca:	0019      	movs	r1, r3
 8001ecc:	4869      	ldr	r0, [pc, #420]	@ (8002074 <UART_SetConfig+0x2f4>)
 8001ece:	f7fe f91b 	bl	8000108 <__udivsi3>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
        break;
 8001ed6:	e00f      	b.n	8001ef8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ed8:	f7ff fc20 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
        break;
 8001ee0:	e00a      	b.n	8001ef8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	61bb      	str	r3, [r7, #24]
        break;
 8001ee8:	e006      	b.n	8001ef8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001eee:	231e      	movs	r3, #30
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
        break;
 8001ef6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d100      	bne.n	8001f00 <UART_SetConfig+0x180>
 8001efe:	e097      	b.n	8002030 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f04:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <UART_SetConfig+0x2f8>)
 8001f06:	0052      	lsls	r2, r2, #1
 8001f08:	5ad3      	ldrh	r3, [r2, r3]
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	69b8      	ldr	r0, [r7, #24]
 8001f0e:	f7fe f8fb 	bl	8000108 <__udivsi3>
 8001f12:	0003      	movs	r3, r0
 8001f14:	005a      	lsls	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	18d2      	adds	r2, r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0019      	movs	r1, r3
 8001f24:	0010      	movs	r0, r2
 8001f26:	f7fe f8ef 	bl	8000108 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d91c      	bls.n	8001f6e <UART_SetConfig+0x1ee>
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d217      	bcs.n	8001f6e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	200e      	movs	r0, #14
 8001f44:	183b      	adds	r3, r7, r0
 8001f46:	210f      	movs	r1, #15
 8001f48:	438a      	bics	r2, r1
 8001f4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	b299      	uxth	r1, r3
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	183a      	adds	r2, r7, r0
 8001f5c:	8812      	ldrh	r2, [r2, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	183a      	adds	r2, r7, r0
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	e060      	b.n	8002030 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f6e:	231e      	movs	r3, #30
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e05b      	b.n	8002030 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f78:	231f      	movs	r3, #31
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d01f      	beq.n	8001fc2 <UART_SetConfig+0x242>
 8001f82:	dc22      	bgt.n	8001fca <UART_SetConfig+0x24a>
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d017      	beq.n	8001fb8 <UART_SetConfig+0x238>
 8001f88:	dc1f      	bgt.n	8001fca <UART_SetConfig+0x24a>
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <UART_SetConfig+0x214>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d005      	beq.n	8001f9e <UART_SetConfig+0x21e>
 8001f92:	e01a      	b.n	8001fca <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f94:	f7ff fc0e 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	61bb      	str	r3, [r7, #24]
        break;
 8001f9c:	e01c      	b.n	8001fd8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001f9e:	4b33      	ldr	r3, [pc, #204]	@ (800206c <UART_SetConfig+0x2ec>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	3301      	adds	r3, #1
 8001faa:	0019      	movs	r1, r3
 8001fac:	4831      	ldr	r0, [pc, #196]	@ (8002074 <UART_SetConfig+0x2f4>)
 8001fae:	f7fe f8ab 	bl	8000108 <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	61bb      	str	r3, [r7, #24]
        break;
 8001fb6:	e00f      	b.n	8001fd8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fb8:	f7ff fbb0 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        break;
 8001fc0:	e00a      	b.n	8001fd8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fc2:	2380      	movs	r3, #128	@ 0x80
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	61bb      	str	r3, [r7, #24]
        break;
 8001fc8:	e006      	b.n	8001fd8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fce:	231e      	movs	r3, #30
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
        break;
 8001fd6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe2:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <UART_SetConfig+0x2f8>)
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	5ad3      	ldrh	r3, [r2, r3]
 8001fe8:	0019      	movs	r1, r3
 8001fea:	69b8      	ldr	r0, [r7, #24]
 8001fec:	f7fe f88c 	bl	8000108 <__udivsi3>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	18d2      	adds	r2, r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f7fe f880 	bl	8000108 <__udivsi3>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d90a      	bls.n	8002028 <UART_SetConfig+0x2a8>
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	429a      	cmp	r2, r3
 800201a:	d205      	bcs.n	8002028 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	e003      	b.n	8002030 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002028:	231e      	movs	r3, #30
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	226a      	movs	r2, #106	@ 0x6a
 8002034:	2101      	movs	r1, #1
 8002036:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2268      	movs	r2, #104	@ 0x68
 800203c:	2101      	movs	r1, #1
 800203e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800204c:	231e      	movs	r3, #30
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	781b      	ldrb	r3, [r3, #0]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b008      	add	sp, #32
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	cfff69f3 	.word	0xcfff69f3
 8002060:	ffffcfff 	.word	0xffffcfff
 8002064:	11fff4ff 	.word	0x11fff4ff
 8002068:	40013800 	.word	0x40013800
 800206c:	40021000 	.word	0x40021000
 8002070:	40004400 	.word	0x40004400
 8002074:	02dc6c00 	.word	0x02dc6c00
 8002078:	080027dc 	.word	0x080027dc

0800207c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d00b      	beq.n	80020a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	@ (80021c0 <UART_AdvFeatureConfig+0x144>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a43      	ldr	r2, [pc, #268]	@ (80021c4 <UART_AdvFeatureConfig+0x148>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d00b      	beq.n	80020ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a3b      	ldr	r2, [pc, #236]	@ (80021c8 <UART_AdvFeatureConfig+0x14c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	2204      	movs	r2, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	d00b      	beq.n	800210c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a34      	ldr	r2, [pc, #208]	@ (80021cc <UART_AdvFeatureConfig+0x150>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	d00b      	beq.n	800212e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <UART_AdvFeatureConfig+0x154>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	d00b      	beq.n	8002150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a25      	ldr	r2, [pc, #148]	@ (80021d4 <UART_AdvFeatureConfig+0x158>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	2240      	movs	r2, #64	@ 0x40
 8002156:	4013      	ands	r3, r2
 8002158:	d01d      	beq.n	8002196 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <UART_AdvFeatureConfig+0x15c>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	035b      	lsls	r3, r3, #13
 800217a:	429a      	cmp	r2, r3
 800217c:	d10b      	bne.n	8002196 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a15      	ldr	r2, [pc, #84]	@ (80021dc <UART_AdvFeatureConfig+0x160>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	4013      	ands	r3, r2
 800219e:	d00b      	beq.n	80021b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <UART_AdvFeatureConfig+0x164>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	ffff7fff 	.word	0xffff7fff
 80021c4:	fffdffff 	.word	0xfffdffff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	fffbffff 	.word	0xfffbffff
 80021d0:	ffffefff 	.word	0xffffefff
 80021d4:	ffffdfff 	.word	0xffffdfff
 80021d8:	ffefffff 	.word	0xffefffff
 80021dc:	ff9fffff 	.word	0xff9fffff
 80021e0:	fff7ffff 	.word	0xfff7ffff

080021e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b092      	sub	sp, #72	@ 0x48
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2290      	movs	r2, #144	@ 0x90
 80021f0:	2100      	movs	r1, #0
 80021f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021f4:	f7fe fc22 	bl	8000a3c <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	4013      	ands	r3, r2
 8002206:	2b08      	cmp	r3, #8
 8002208:	d12d      	bne.n	8002266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800220a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	0391      	lsls	r1, r2, #14
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4a47      	ldr	r2, [pc, #284]	@ (8002330 <UART_CheckIdleState+0x14c>)
 8002214:	9200      	str	r2, [sp, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	f000 f88e 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d022      	beq.n	8002266 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002220:	f3ef 8310 	mrs	r3, PRIMASK
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800222a:	2301      	movs	r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	f383 8810 	msr	PRIMASK, r3
}
 8002234:	46c0      	nop			@ (mov r8, r8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2180      	movs	r1, #128	@ 0x80
 8002242:	438a      	bics	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2288      	movs	r2, #136	@ 0x88
 8002256:	2120      	movs	r1, #32
 8002258:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2284      	movs	r2, #132	@ 0x84
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e060      	b.n	8002328 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2204      	movs	r2, #4
 800226e:	4013      	ands	r3, r2
 8002270:	2b04      	cmp	r3, #4
 8002272:	d146      	bne.n	8002302 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	03d1      	lsls	r1, r2, #15
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4a2c      	ldr	r2, [pc, #176]	@ (8002330 <UART_CheckIdleState+0x14c>)
 800227e:	9200      	str	r2, [sp, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	f000 f859 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d03b      	beq.n	8002302 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800228a:	f3ef 8310 	mrs	r3, PRIMASK
 800228e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002290:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4922      	ldr	r1, [pc, #136]	@ (8002334 <UART_CheckIdleState+0x150>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f383 8810 	msr	PRIMASK, r3
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022bc:	f3ef 8310 	mrs	r3, PRIMASK
 80022c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80022c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f383 8810 	msr	PRIMASK, r3
}
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	438a      	bics	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	f383 8810 	msr	PRIMASK, r3
}
 80022ec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	228c      	movs	r2, #140	@ 0x8c
 80022f2:	2120      	movs	r1, #32
 80022f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2284      	movs	r2, #132	@ 0x84
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e012      	b.n	8002328 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2288      	movs	r2, #136	@ 0x88
 8002306:	2120      	movs	r1, #32
 8002308:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	228c      	movs	r2, #140	@ 0x8c
 800230e:	2120      	movs	r1, #32
 8002310:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2284      	movs	r2, #132	@ 0x84
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b010      	add	sp, #64	@ 0x40
 800232e:	bd80      	pop	{r7, pc}
 8002330:	01ffffff 	.word	0x01ffffff
 8002334:	fffffedf 	.word	0xfffffedf

08002338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002348:	e04b      	b.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	d048      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002350:	f7fe fb74 	bl	8000a3c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d302      	bcc.n	8002366 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04b      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	d035      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2208      	movs	r2, #8
 800237e:	4013      	ands	r3, r2
 8002380:	2b08      	cmp	r3, #8
 8002382:	d111      	bne.n	80023a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f83c 	bl	800240c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2290      	movs	r2, #144	@ 0x90
 8002398:	2108      	movs	r1, #8
 800239a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2284      	movs	r2, #132	@ 0x84
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e02c      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	401a      	ands	r2, r3
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d112      	bne.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 f81f 	bl	800240c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2290      	movs	r2, #144	@ 0x90
 80023d2:	2120      	movs	r1, #32
 80023d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2284      	movs	r2, #132	@ 0x84
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00f      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	4153      	adcs	r3, r2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	001a      	movs	r2, r3
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d0a4      	beq.n	800234a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	@ 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002414:	f3ef 8310 	mrs	r3, PRIMASK
 8002418:	617b      	str	r3, [r7, #20]
  return(result);
 800241a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f383 8810 	msr	PRIMASK, r3
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4926      	ldr	r1, [pc, #152]	@ (80024d0 <UART_EndRxTransfer+0xc4>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f383 8810 	msr	PRIMASK, r3
}
 8002444:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002446:	f3ef 8310 	mrs	r3, PRIMASK
 800244a:	623b      	str	r3, [r7, #32]
  return(result);
 800244c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	f383 8810 	msr	PRIMASK, r3
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	491b      	ldr	r1, [pc, #108]	@ (80024d4 <UART_EndRxTransfer+0xc8>)
 8002468:	400a      	ands	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	f383 8810 	msr	PRIMASK, r3
}
 8002476:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d118      	bne.n	80024b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002480:	f3ef 8310 	mrs	r3, PRIMASK
 8002484:	60bb      	str	r3, [r7, #8]
  return(result);
 8002486:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248a:	2301      	movs	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			@ (mov r8, r8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2110      	movs	r1, #16
 80024a2:	438a      	bics	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f383 8810 	msr	PRIMASK, r3
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	228c      	movs	r2, #140	@ 0x8c
 80024b6:	2120      	movs	r1, #32
 80024b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b00e      	add	sp, #56	@ 0x38
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	fffffedf 	.word	0xfffffedf
 80024d4:	effffffe 	.word	0xeffffffe

080024d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2284      	movs	r2, #132	@ 0x84
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UARTEx_DisableFifoMode+0x16>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e027      	b.n	800253e <HAL_UARTEx_DisableFifoMode+0x66>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2284      	movs	r2, #132	@ 0x84
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2288      	movs	r2, #136	@ 0x88
 80024fa:	2124      	movs	r1, #36	@ 0x24
 80024fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <HAL_UARTEx_DisableFifoMode+0x70>)
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2288      	movs	r2, #136	@ 0x88
 8002530:	2120      	movs	r1, #32
 8002532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2284      	movs	r2, #132	@ 0x84
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	dfffffff 	.word	0xdfffffff

0800254c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2284      	movs	r2, #132	@ 0x84
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e02e      	b.n	80025c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2284      	movs	r2, #132	@ 0x84
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2288      	movs	r2, #136	@ 0x88
 8002570:	2124      	movs	r1, #36	@ 0x24
 8002572:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	08d9      	lsrs	r1, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f854 	bl	8002650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2288      	movs	r2, #136	@ 0x88
 80025b4:	2120      	movs	r1, #32
 80025b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2284      	movs	r2, #132	@ 0x84
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2284      	movs	r2, #132	@ 0x84
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e02f      	b.n	8002644 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2284      	movs	r2, #132	@ 0x84
 80025e8:	2101      	movs	r1, #1
 80025ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2288      	movs	r2, #136	@ 0x88
 80025f0:	2124      	movs	r1, #36	@ 0x24
 80025f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f813 	bl	8002650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2288      	movs	r2, #136	@ 0x88
 8002636:	2120      	movs	r1, #32
 8002638:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2284      	movs	r2, #132	@ 0x84
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f1ffffff 	.word	0xf1ffffff

08002650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	226a      	movs	r2, #106	@ 0x6a
 8002664:	2101      	movs	r1, #1
 8002666:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2268      	movs	r2, #104	@ 0x68
 800266c:	2101      	movs	r1, #1
 800266e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002670:	e043      	b.n	80026fa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002672:	260f      	movs	r6, #15
 8002674:	19bb      	adds	r3, r7, r6
 8002676:	2208      	movs	r2, #8
 8002678:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800267a:	200e      	movs	r0, #14
 800267c:	183b      	adds	r3, r7, r0
 800267e:	2208      	movs	r2, #8
 8002680:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	0e5b      	lsrs	r3, r3, #25
 800268a:	b2da      	uxtb	r2, r3
 800268c:	240d      	movs	r4, #13
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2107      	movs	r1, #7
 8002692:	400a      	ands	r2, r1
 8002694:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	0f5b      	lsrs	r3, r3, #29
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	250c      	movs	r5, #12
 80026a2:	197b      	adds	r3, r7, r5
 80026a4:	2107      	movs	r1, #7
 80026a6:	400a      	ands	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	197a      	adds	r2, r7, r5
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	4914      	ldr	r1, [pc, #80]	@ (8002704 <UARTEx_SetNbDataToProcess+0xb4>)
 80026b4:	5c8a      	ldrb	r2, [r1, r2]
 80026b6:	435a      	muls	r2, r3
 80026b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80026ba:	197b      	adds	r3, r7, r5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <UARTEx_SetNbDataToProcess+0xb8>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026c2:	0019      	movs	r1, r3
 80026c4:	f7fd fdaa 	bl	800021c <__divsi3>
 80026c8:	0003      	movs	r3, r0
 80026ca:	b299      	uxth	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	226a      	movs	r2, #106	@ 0x6a
 80026d0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026d2:	19bb      	adds	r3, r7, r6
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	193a      	adds	r2, r7, r4
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	490a      	ldr	r1, [pc, #40]	@ (8002704 <UARTEx_SetNbDataToProcess+0xb4>)
 80026dc:	5c8a      	ldrb	r2, [r1, r2]
 80026de:	435a      	muls	r2, r3
 80026e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <UARTEx_SetNbDataToProcess+0xb8>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026ea:	0019      	movs	r1, r3
 80026ec:	f7fd fd96 	bl	800021c <__divsi3>
 80026f0:	0003      	movs	r3, r0
 80026f2:	b299      	uxth	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2268      	movs	r2, #104	@ 0x68
 80026f8:	5299      	strh	r1, [r3, r2]
}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b005      	add	sp, #20
 8002700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	080027f4 	.word	0x080027f4
 8002708:	080027fc 	.word	0x080027fc

0800270c <memset>:
 800270c:	0003      	movs	r3, r0
 800270e:	1882      	adds	r2, r0, r2
 8002710:	4293      	cmp	r3, r2
 8002712:	d100      	bne.n	8002716 <memset+0xa>
 8002714:	4770      	bx	lr
 8002716:	7019      	strb	r1, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	e7f9      	b.n	8002710 <memset+0x4>

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	2600      	movs	r6, #0
 8002720:	4c0c      	ldr	r4, [pc, #48]	@ (8002754 <__libc_init_array+0x38>)
 8002722:	4d0d      	ldr	r5, [pc, #52]	@ (8002758 <__libc_init_array+0x3c>)
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	42a6      	cmp	r6, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	2600      	movs	r6, #0
 800272e:	f000 f819 	bl	8002764 <_init>
 8002732:	4c0a      	ldr	r4, [pc, #40]	@ (800275c <__libc_init_array+0x40>)
 8002734:	4d0a      	ldr	r5, [pc, #40]	@ (8002760 <__libc_init_array+0x44>)
 8002736:	1b64      	subs	r4, r4, r5
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	42a6      	cmp	r6, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	00b3      	lsls	r3, r6, #2
 8002742:	58eb      	ldr	r3, [r5, r3]
 8002744:	4798      	blx	r3
 8002746:	3601      	adds	r6, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	00b3      	lsls	r3, r6, #2
 800274c:	58eb      	ldr	r3, [r5, r3]
 800274e:	4798      	blx	r3
 8002750:	3601      	adds	r6, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	08002804 	.word	0x08002804
 8002758:	08002804 	.word	0x08002804
 800275c:	08002808 	.word	0x08002808
 8002760:	08002804 	.word	0x08002804

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
