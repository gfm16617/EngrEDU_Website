
2024_Discovery_DDS_Shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c4  080060c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060cc  080060cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001f4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e572  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e60  00000000  00000000  0002e61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00030480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c68  00000000  00000000  000311a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219da  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eec0  00000000  00000000  000537e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccab4  00000000  00000000  000626a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f156  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d18  00000000  00000000  0012f1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005770 	.word	0x08005770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005770 	.word	0x08005770

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 ffcb 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f987 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 fa6d 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d72:	f000 fa4b 	bl	800120c <MX_DMA_Init>
  MX_TIM7_Init();
 8000d76:	f000 f9eb 	bl	8001150 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000d7a:	f000 fa1d 	bl	80011b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LCD
  // **********************
  // Initialize LCD pins
  lcd16x2_init_4bits(GPIOE, LCD_RS_Pin, LCD_E_Pin,
 8000d7e:	2320      	movs	r3, #32
 8000d80:	9303      	str	r3, [sp, #12]
 8000d82:	2310      	movs	r3, #16
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2308      	movs	r3, #8
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	4b9c      	ldr	r3, [pc, #624]	; (8001000 <main+0x2a0>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	2101      	movs	r1, #1
 8000d94:	489a      	ldr	r0, [pc, #616]	; (8001000 <main+0x2a0>)
 8000d96:	f003 fe87 	bl	8004aa8 <lcd16x2_init_4bits>
  		  	  	  	 GPIOE, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin );

  // Welcome LCD Screen
  lcd16x2_printf("DDS Generator");
 8000d9a:	489a      	ldr	r0, [pc, #616]	; (8001004 <main+0x2a4>)
 8000d9c:	f003 ff52 	bl	8004c44 <lcd16x2_printf>
  // Turn Off Cursor
  lcd16x2_cursorShow(false);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f003 ff1d 	bl	8004be0 <lcd16x2_cursorShow>
  // **********************

  // UART
  // **********************
  // Welcome UART
  my_printf("DDS Generator\r\n");
 8000da6:	4898      	ldr	r0, [pc, #608]	; (8001008 <main+0x2a8>)
 8000da8:	f000 fb4e 	bl	8001448 <my_printf>

  // Start UART -> DMA and receive one character at the time
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)gRXData, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	4997      	ldr	r1, [pc, #604]	; (800100c <main+0x2ac>)
 8000db0:	4897      	ldr	r0, [pc, #604]	; (8001010 <main+0x2b0>)
 8000db2:	f002 ff52 	bl	8003c5a <HAL_UART_Receive_DMA>
  //HAL_Delay(500);  // Wait 0.5 second

  // DAC and DDS
  // **********************
  // Set default DDS Tuning Word Frequency - 1kHz
  gTuningWord = (pow(2, 32) * gDDS_Freq) / SAMPLING_FREQ;
 8000db6:	4b97      	ldr	r3, [pc, #604]	; (8001014 <main+0x2b4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fba2 	bl	8000504 <__aeabi_ui2d>
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b94      	ldr	r3, [pc, #592]	; (8001018 <main+0x2b8>)
 8000dc6:	f7ff fc17 	bl	80005f8 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	a389      	add	r3, pc, #548	; (adr r3, 8000ff8 <main+0x298>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fd38 	bl	800084c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fe1a 	bl	8000a1c <__aeabi_d2uiz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a8c      	ldr	r2, [pc, #560]	; (800101c <main+0x2bc>)
 8000dec:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(gSM)
 8000dee:	4b8c      	ldr	r3, [pc, #560]	; (8001020 <main+0x2c0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	f200 80f8 	bhi.w	8000fea <main+0x28a>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <main+0xa0>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000feb 	.word	0x08000feb
 8000e04:	08000e19 	.word	0x08000e19
 8000e08:	08000ee1 	.word	0x08000ee1
 8000e0c:	08000eaf 	.word	0x08000eaf
 8000e10:	08000f1b 	.word	0x08000f1b
 8000e14:	08000f83 	.word	0x08000f83
	  case SM_Idle:
		  break;

	  case SM_Mode:

		  lcd16x2_clear();
 8000e18:	f003 ff0a 	bl	8004c30 <lcd16x2_clear>
		  lcd16x2_1stLine();
 8000e1c:	f003 fed0 	bl	8004bc0 <lcd16x2_1stLine>

		  switch(gWaveformType)
 8000e20:	4b80      	ldr	r3, [pc, #512]	; (8001024 <main+0x2c4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d83d      	bhi.n	8000ea6 <main+0x146>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <main+0xd0>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e57 	.word	0x08000e57
 8000e38:	08000e99 	.word	0x08000e99
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	08000e73 	.word	0x08000e73
 8000e44:	08000e8b 	.word	0x08000e8b
		  {
		  case DDS_Sine_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Sine");
 8000e48:	4877      	ldr	r0, [pc, #476]	; (8001028 <main+0x2c8>)
 8000e4a:	f003 fefb 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Sine\r\n");
 8000e4e:	4877      	ldr	r0, [pc, #476]	; (800102c <main+0x2cc>)
 8000e50:	f000 fafa 	bl	8001448 <my_printf>
			  break;
 8000e54:	e027      	b.n	8000ea6 <main+0x146>

		  case DDS_Cosine_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Cosine");
 8000e56:	4876      	ldr	r0, [pc, #472]	; (8001030 <main+0x2d0>)
 8000e58:	f003 fef4 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Cosine\r\n");
 8000e5c:	4875      	ldr	r0, [pc, #468]	; (8001034 <main+0x2d4>)
 8000e5e:	f000 faf3 	bl	8001448 <my_printf>
			  break;
 8000e62:	e020      	b.n	8000ea6 <main+0x146>

		  case DDS_Sawtooth_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Sawtooth");
 8000e64:	4874      	ldr	r0, [pc, #464]	; (8001038 <main+0x2d8>)
 8000e66:	f003 feed 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Sawtooth\r\n");
 8000e6a:	4874      	ldr	r0, [pc, #464]	; (800103c <main+0x2dc>)
 8000e6c:	f000 faec 	bl	8001448 <my_printf>
			  break;
 8000e70:	e019      	b.n	8000ea6 <main+0x146>

		  case DDS_Sawtooth_Rev_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Sawtooth");
 8000e72:	4871      	ldr	r0, [pc, #452]	; (8001038 <main+0x2d8>)
 8000e74:	f003 fee6 	bl	8004c44 <lcd16x2_printf>
			  lcd16x2_2ndLine();
 8000e78:	f003 feaa 	bl	8004bd0 <lcd16x2_2ndLine>
			  lcd16x2_printf("      Reverse");
 8000e7c:	4870      	ldr	r0, [pc, #448]	; (8001040 <main+0x2e0>)
 8000e7e:	f003 fee1 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Sawtooth Reverse\r\n");
 8000e82:	4870      	ldr	r0, [pc, #448]	; (8001044 <main+0x2e4>)
 8000e84:	f000 fae0 	bl	8001448 <my_printf>
			  break;
 8000e88:	e00d      	b.n	8000ea6 <main+0x146>

		  case DDS_Square_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Square");
 8000e8a:	486f      	ldr	r0, [pc, #444]	; (8001048 <main+0x2e8>)
 8000e8c:	f003 feda 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Square\r\n");
 8000e90:	486e      	ldr	r0, [pc, #440]	; (800104c <main+0x2ec>)
 8000e92:	f000 fad9 	bl	8001448 <my_printf>
			  break;
 8000e96:	e006      	b.n	8000ea6 <main+0x146>

		  case DDS_Triangle_Wave:
			  // Update LCD
			  lcd16x2_printf("Mode: Triangle");
 8000e98:	486d      	ldr	r0, [pc, #436]	; (8001050 <main+0x2f0>)
 8000e9a:	f003 fed3 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("Mode: Triangle\r\n");
 8000e9e:	486d      	ldr	r0, [pc, #436]	; (8001054 <main+0x2f4>)
 8000ea0:	f000 fad2 	bl	8001448 <my_printf>
			  break;
 8000ea4:	bf00      	nop
		  }

		  // Update State Machine
		  gSM = SM_Idle;
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <main+0x2c0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
		  break;
 8000eac:	e09d      	b.n	8000fea <main+0x28a>

	  case SM_Cursor:
		  gCursor = !gCursor;
 8000eae:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <main+0x2f8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b66      	ldr	r3, [pc, #408]	; (8001058 <main+0x2f8>)
 8000ec0:	701a      	strb	r2, [r3, #0]

		  if(gCursor == 1)
 8000ec2:	4b65      	ldr	r3, [pc, #404]	; (8001058 <main+0x2f8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d103      	bne.n	8000ed2 <main+0x172>
			  lcd16x2_cursorShow(true);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f003 fe88 	bl	8004be0 <lcd16x2_cursorShow>
 8000ed0:	e002      	b.n	8000ed8 <main+0x178>
		  else
			  lcd16x2_cursorShow(false);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f003 fe84 	bl	8004be0 <lcd16x2_cursorShow>

		  // Update State Machine
		  gSM = SM_Idle;
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <main+0x2c0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		  break;
 8000ede:	e084      	b.n	8000fea <main+0x28a>

	  case SM_Start_Stop:

		  lcd16x2_clear();
 8000ee0:	f003 fea6 	bl	8004c30 <lcd16x2_clear>
		  lcd16x2_1stLine();
 8000ee4:	f003 fe6c 	bl	8004bc0 <lcd16x2_1stLine>

		  if(gStart_Stop == 1)
 8000ee8:	4b5c      	ldr	r3, [pc, #368]	; (800105c <main+0x2fc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d109      	bne.n	8000f06 <main+0x1a6>
		  {
			  // Update LCD
			  lcd16x2_printf("DDS Running...");
 8000ef2:	485b      	ldr	r0, [pc, #364]	; (8001060 <main+0x300>)
 8000ef4:	f003 fea6 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("DDS Running...\r\n");
 8000ef8:	485a      	ldr	r0, [pc, #360]	; (8001064 <main+0x304>)
 8000efa:	f000 faa5 	bl	8001448 <my_printf>

			  // Start DAC Timer
			  HAL_TIM_Base_Start_IT(&htim7);
 8000efe:	485a      	ldr	r0, [pc, #360]	; (8001068 <main+0x308>)
 8000f00:	f002 facc 	bl	800349c <HAL_TIM_Base_Start_IT>
 8000f04:	e005      	b.n	8000f12 <main+0x1b2>
		  }
		  else
		  {
			  // Update LCD
			  lcd16x2_printf("DDS Stopped.");
 8000f06:	4859      	ldr	r0, [pc, #356]	; (800106c <main+0x30c>)
 8000f08:	f003 fe9c 	bl	8004c44 <lcd16x2_printf>
			  // Update UART
			  my_printf("DDS Stopped.\r\n");
 8000f0c:	4858      	ldr	r0, [pc, #352]	; (8001070 <main+0x310>)
 8000f0e:	f000 fa9b 	bl	8001448 <my_printf>
		  }

		  // Update State Machine
		  gSM = SM_Idle;
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <main+0x2c0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
		  break;
 8000f18:	e067      	b.n	8000fea <main+0x28a>

	  case SM_Plus:
		  // Increment Frequency
		  gDDS_Freq++;
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <main+0x2b4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <main+0x2b4>)
 8000f22:	6013      	str	r3, [r2, #0]

		  // Update DDS Tuning Word Frequency
		  gTuningWord = (pow(2, 32) * gDDS_Freq) / SAMPLING_FREQ;
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <main+0x2b4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff faeb 	bl	8000504 <__aeabi_ui2d>
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <main+0x2b8>)
 8000f34:	f7ff fb60 	bl	80005f8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	a32d      	add	r3, pc, #180	; (adr r3, 8000ff8 <main+0x298>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fc81 	bl	800084c <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fd63 	bl	8000a1c <__aeabi_d2uiz>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a30      	ldr	r2, [pc, #192]	; (800101c <main+0x2bc>)
 8000f5a:	6013      	str	r3, [r2, #0]

		  // Update LCD
		  lcd16x2_clear();
 8000f5c:	f003 fe68 	bl	8004c30 <lcd16x2_clear>
		  lcd16x2_1stLine();
 8000f60:	f003 fe2e 	bl	8004bc0 <lcd16x2_1stLine>
		  lcd16x2_printf("Frequency:");
 8000f64:	4843      	ldr	r0, [pc, #268]	; (8001074 <main+0x314>)
 8000f66:	f003 fe6d 	bl	8004c44 <lcd16x2_printf>

		  lcd16x2_2ndLine();
 8000f6a:	f003 fe31 	bl	8004bd0 <lcd16x2_2ndLine>
		  lcd16x2_printf("%d", gDDS_Freq);
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <main+0x2b4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4840      	ldr	r0, [pc, #256]	; (8001078 <main+0x318>)
 8000f76:	f003 fe65 	bl	8004c44 <lcd16x2_printf>

		  // Update State Machine
		  gSM = SM_Idle;
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <main+0x2c0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
		  break;
 8000f80:	e033      	b.n	8000fea <main+0x28a>

	  case SM_Minus:
		  // Decrement Frequency
		  gDDS_Freq--;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <main+0x2b4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <main+0x2b4>)
 8000f8a:	6013      	str	r3, [r2, #0]

		  // Update DDS Tuning Word Frequency
		  gTuningWord = (pow(2, 32) * gDDS_Freq) / SAMPLING_FREQ;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <main+0x2b4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fab7 	bl	8000504 <__aeabi_ui2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <main+0x2b8>)
 8000f9c:	f7ff fb2c 	bl	80005f8 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a313      	add	r3, pc, #76	; (adr r3, 8000ff8 <main+0x298>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fc4d 	bl	800084c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fd2f 	bl	8000a1c <__aeabi_d2uiz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a16      	ldr	r2, [pc, #88]	; (800101c <main+0x2bc>)
 8000fc2:	6013      	str	r3, [r2, #0]

		  // Update LCD
		  lcd16x2_clear();
 8000fc4:	f003 fe34 	bl	8004c30 <lcd16x2_clear>
		  lcd16x2_1stLine();
 8000fc8:	f003 fdfa 	bl	8004bc0 <lcd16x2_1stLine>
		  lcd16x2_printf("Frequency:");
 8000fcc:	4829      	ldr	r0, [pc, #164]	; (8001074 <main+0x314>)
 8000fce:	f003 fe39 	bl	8004c44 <lcd16x2_printf>

		  lcd16x2_2ndLine();
 8000fd2:	f003 fdfd 	bl	8004bd0 <lcd16x2_2ndLine>
		  lcd16x2_printf("%d", gDDS_Freq);
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <main+0x2b4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <main+0x318>)
 8000fde:	f003 fe31 	bl	8004c44 <lcd16x2_printf>

		  // Update State Machine
		  gSM = SM_Idle;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <main+0x2c0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		  break;
 8000fe8:	bf00      	nop
	  }

	  // Main Loop timing
	  HAL_Delay(200);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f000 fefa 	bl	8001de4 <HAL_Delay>
	  switch(gSM)
 8000ff0:	e6fd      	b.n	8000dee <main+0x8e>
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	412e8480 	.word	0x412e8480
 8001000:	40021000 	.word	0x40021000
 8001004:	08005788 	.word	0x08005788
 8001008:	08005798 	.word	0x08005798
 800100c:	200001c0 	.word	0x200001c0
 8001010:	200000dc 	.word	0x200000dc
 8001014:	20000000 	.word	0x20000000
 8001018:	41f00000 	.word	0x41f00000
 800101c:	20000004 	.word	0x20000004
 8001020:	20000228 	.word	0x20000228
 8001024:	20000188 	.word	0x20000188
 8001028:	080057a8 	.word	0x080057a8
 800102c:	080057b4 	.word	0x080057b4
 8001030:	080057c4 	.word	0x080057c4
 8001034:	080057d4 	.word	0x080057d4
 8001038:	080057e4 	.word	0x080057e4
 800103c:	080057f4 	.word	0x080057f4
 8001040:	08005808 	.word	0x08005808
 8001044:	08005818 	.word	0x08005818
 8001048:	08005834 	.word	0x08005834
 800104c:	08005844 	.word	0x08005844
 8001050:	08005854 	.word	0x08005854
 8001054:	08005864 	.word	0x08005864
 8001058:	2000022a 	.word	0x2000022a
 800105c:	20000229 	.word	0x20000229
 8001060:	08005878 	.word	0x08005878
 8001064:	08005888 	.word	0x08005888
 8001068:	20000094 	.word	0x20000094
 800106c:	0800589c 	.word	0x0800589c
 8001070:	080058ac 	.word	0x080058ac
 8001074:	080058bc 	.word	0x080058bc
 8001078:	080058c8 	.word	0x080058c8

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fe38 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <SystemClock_Config+0xcc>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <SystemClock_Config+0xd0>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <SystemClock_Config+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d8:	2301      	movs	r3, #1
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fa:	2307      	movs	r3, #7
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fce2 	bl	8002acc <HAL_RCC_OscConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800110e:	f000 fc55 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	230f      	movs	r3, #15
 8001114:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2302      	movs	r3, #2
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2105      	movs	r1, #5
 8001130:	4618      	mov	r0, r3
 8001132:	f001 ff43 	bl	8002fbc <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800113c:	f000 fc3e 	bl	80019bc <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_TIM7_Init+0x60>)
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_TIM7_Init+0x64>)
 8001162:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42 - 1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_TIM7_Init+0x60>)
 8001166:	2229      	movs	r2, #41	; 0x29
 8001168:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_TIM7_Init+0x60>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2 - 1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM7_Init+0x60>)
 8001172:	2201      	movs	r2, #1
 8001174:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM7_Init+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM7_Init+0x60>)
 800117e:	f002 f93d 	bl	80033fc <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001188:	f000 fc18 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800118c:	2320      	movs	r3, #32
 800118e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_TIM7_Init+0x60>)
 800119a:	f002 fbef 	bl	800397c <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 fc0a 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000094 	.word	0x20000094
 80011b4:	40001400 	.word	0x40001400

080011b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART3_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART3_UART_Init+0x4c>)
 80011f0:	f002 fc54 	bl	8003a9c <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 fbdf 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000dc 	.word	0x200000dc
 8001208:	40004800 	.word	0x40004800

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_DMA_Init+0x3c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <MX_DMA_Init+0x3c>)
 800121c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_DMA_Init+0x3c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	200c      	movs	r0, #12
 8001234:	f000 fed5 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001238:	200c      	movs	r0, #12
 800123a:	f000 feee 	bl	800201a <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a71      	ldr	r2, [pc, #452]	; (8001430 <MX_GPIO_Init+0x1e4>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a6a      	ldr	r2, [pc, #424]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b68      	ldr	r3, [pc, #416]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a63      	ldr	r2, [pc, #396]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a5c      	ldr	r2, [pc, #368]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a55      	ldr	r2, [pc, #340]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b53      	ldr	r3, [pc, #332]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <MX_GPIO_Init+0x1e4>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 800130a:	2200      	movs	r2, #0
 800130c:	213f      	movs	r1, #63	; 0x3f
 800130e:	4849      	ldr	r0, [pc, #292]	; (8001434 <MX_GPIO_Init+0x1e8>)
 8001310:	f001 fbaa 	bl	8002a68 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001314:	2200      	movs	r2, #0
 8001316:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 800131a:	4847      	ldr	r0, [pc, #284]	; (8001438 <MX_GPIO_Init+0x1ec>)
 800131c:	f001 fba4 	bl	8002a68 <HAL_GPIO_WritePin>
                          |DAC_0_Pin|DAC_1_Pin|DAC_2_Pin|DAC_3_Pin
                          |DAC_4_Pin|DAC_5_Pin|DAC_6_Pin|DAC_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8001320:	233f      	movs	r3, #63	; 0x3f
 8001322:	61fb      	str	r3, [r7, #28]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	483f      	ldr	r0, [pc, #252]	; (8001434 <MX_GPIO_Init+0x1e8>)
 8001338:	f001 f9fa 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001340:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	483a      	ldr	r0, [pc, #232]	; (800143c <MX_GPIO_Init+0x1f0>)
 8001352:	f001 f9ed 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Minus_Pin */
  GPIO_InitStruct.Pin = SW_Minus_Pin;
 8001356:	2302      	movs	r3, #2
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_Minus_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4834      	ldr	r0, [pc, #208]	; (800143c <MX_GPIO_Init+0x1f0>)
 800136c:	f001 f9e0 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Plus_Pin */
  GPIO_InitStruct.Pin = SW_Plus_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001374:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_Plus_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	482e      	ldr	r0, [pc, #184]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001386:	f001 f9d3 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800138a:	2304      	movs	r3, #4
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_GPIO_Init+0x1f8>)
 800139e:	f001 f9c7 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Cursor_Pin */
  GPIO_InitStruct.Pin = SW_Cursor_Pin;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_Cursor_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	481e      	ldr	r0, [pc, #120]	; (8001434 <MX_GPIO_Init+0x1e8>)
 80013ba:	f001 f9b9 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Mode_Pin SW_Start_Stop_Pin */
  GPIO_InitStruct.Pin = SW_Mode_Pin|SW_Start_Stop_Pin;
 80013be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <MX_GPIO_Init+0x1f8>)
 80013d6:	f001 f9ab 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           DAC_0_Pin DAC_1_Pin DAC_2_Pin DAC_3_Pin
                           DAC_4_Pin DAC_5_Pin DAC_6_Pin DAC_7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013da:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80013de:	61fb      	str	r3, [r7, #28]
                          |DAC_0_Pin|DAC_1_Pin|DAC_2_Pin|DAC_3_Pin
                          |DAC_4_Pin|DAC_5_Pin|DAC_6_Pin|DAC_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_GPIO_Init+0x1ec>)
 80013f4:	f001 f99c 	bl	8002730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2007      	movs	r0, #7
 80013fe:	f000 fdf0 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001402:	2007      	movs	r0, #7
 8001404:	f000 fe09 	bl	800201a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2017      	movs	r0, #23
 800140e:	f000 fde8 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001412:	2017      	movs	r0, #23
 8001414:	f000 fe01 	bl	800201a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2028      	movs	r0, #40	; 0x28
 800141e:	f000 fde0 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001422:	2028      	movs	r0, #40	; 0x28
 8001424:	f000 fdf9 	bl	800201a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40021000 	.word	0x40021000
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800
 8001444:	40020400 	.word	0x40020400

08001448 <my_printf>:

/* USER CODE BEGIN 4 */

void my_printf(char *msg)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	sprintf((char *)gTXData, msg);
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <my_printf+0x30>)
 8001454:	f003 fc5c 	bl	8004d10 <siprintf>
	HAL_UART_Transmit(&huart3, gTXData, strlen(gTXData), HAL_MAX_DELAY);
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <my_printf+0x30>)
 800145a:	f7fe feb9 	bl	80001d0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	4904      	ldr	r1, [pc, #16]	; (8001478 <my_printf+0x30>)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <my_printf+0x34>)
 800146a:	f002 fb64 	bl	8003b36 <HAL_UART_Transmit>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000018c 	.word	0x2000018c
 800147c:	200000dc 	.word	0x200000dc

08001480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(htim == &htim7)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d164      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0xda>
	{
		// Take the 8 upper bits of the 32 bit phase accumulator as a LUT sample pointer
		gCounter = (gPhaseAccumulator >> 24) % MAX_SAMPLES;
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0e1b      	lsrs	r3, r3, #24
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800149a:	801a      	strh	r2, [r3, #0]

		// Get sample from LUT
		switch(gWaveformType)
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d844      	bhi.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014d7 	.word	0x080014d7
 80014b4:	0800150d 	.word	0x0800150d
 80014b8:	080014e9 	.word	0x080014e9
 80014bc:	080014fb 	.word	0x080014fb
 80014c0:	0800151f 	.word	0x0800151f
		{
		case DDS_Sine_Wave:
			gSample = (uint16_t)(SINE_WAVE[gCounter]);
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80014cc:	5c9b      	ldrb	r3, [r3, r2]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014d2:	801a      	strh	r2, [r3, #0]
			break;
 80014d4:	e02c      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>

		case DDS_Cosine_Wave:
			gSample = (uint16_t)(COSINE_WAVE[gCounter]);
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014e4:	801a      	strh	r2, [r3, #0]
			break;
 80014e6:	e023      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>

		case DDS_Sawtooth_Wave:
			gSample = (uint16_t)(SAWTOOTH_WAVE[gCounter]);
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014f6:	801a      	strh	r2, [r3, #0]
			break;
 80014f8:	e01a      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>

		case DDS_Sawtooth_Rev_Wave:
			gSample = (uint16_t)(SAWTOOTH_REV_WAVE[gCounter]);
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001502:	5c9b      	ldrb	r3, [r3, r2]
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001508:	801a      	strh	r2, [r3, #0]
			break;
 800150a:	e011      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>

		case DDS_Triangle_Wave:
			gSample = (uint16_t)(TRIANGLE_WAVE[gCounter]);
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001514:	5c9b      	ldrb	r3, [r3, r2]
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800151a:	801a      	strh	r2, [r3, #0]
			break;
 800151c:	e008      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0xb0>

		case DDS_Square_Wave:
			gSample = (uint16_t)(SQUARE_WAVE[gCounter]);
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001526:	5c9b      	ldrb	r3, [r3, r2]
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800152c:	801a      	strh	r2, [r3, #0]
			break;
 800152e:	bf00      	nop
		}

		// Faster alternative - direct register access
		GPIOD->ODR &= 0xFF00;  // set 8 bits to zero
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800153a:	6153      	str	r3, [r2, #20]
		GPIOD->ODR |= (gSample & 0x00FF);  // set 8 bits to gSample
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001548:	4313      	orrs	r3, r2
 800154a:	614b      	str	r3, [r1, #20]

		// Increment Phase Accumulator/counter
		gPhaseAccumulator += gTuningWord;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001558:	6013      	str	r3, [r2, #0]
	}
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000094 	.word	0x20000094
 800156c:	20000184 	.word	0x20000184
 8001570:	20000182 	.word	0x20000182
 8001574:	20000188 	.word	0x20000188
 8001578:	08005970 	.word	0x08005970
 800157c:	20000180 	.word	0x20000180
 8001580:	08005a70 	.word	0x08005a70
 8001584:	08005c70 	.word	0x08005c70
 8001588:	08005d70 	.word	0x08005d70
 800158c:	08005b70 	.word	0x08005b70
 8001590:	08005e70 	.word	0x08005e70
 8001594:	40020c00 	.word	0x40020c00
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);

	// Get currentMillis
	gCurrentMillis = HAL_GetTick();
 80015a6:	f000 fc11 	bl	8001dcc <HAL_GetTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a49      	ldr	r2, [pc, #292]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 80015ae:	6013      	str	r3, [r2, #0]

	if(GPIO_Pin == SW_Start_Stop_Pin && (gCurrentMillis - gPreviousMillis > BUTTON_DEBOUNCE_TIME))
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b6:	d12e      	bne.n	8001616 <HAL_GPIO_EXTI_Callback+0x7a>
 80015b8:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015c6:	d926      	bls.n	8001616 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		// Update State Machine variable
		gSM = SM_Start_Stop;
 80015c8:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_GPIO_EXTI_Callback+0x140>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]

		// Update Start Stop global variable
		gStart_Stop = !gStart_Stop;
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x144>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x144>)
 80015e2:	701a      	strb	r2, [r3, #0]

		if(gStart_Stop == 1)
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x144>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <HAL_GPIO_EXTI_Callback+0x60>
		{
			// Start DAC Timer
			// This is done in the Main Loop
			//HAL_TIM_Base_Start_IT(&htim7);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f4:	483b      	ldr	r0, [pc, #236]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x148>)
 80015f6:	f001 fa37 	bl	8002a68 <HAL_GPIO_WritePin>
 80015fa:	e008      	b.n	800160e <HAL_GPIO_EXTI_Callback+0x72>
		}
		else
		{
			// Stop DAC Timer
			HAL_TIM_Base_Stop_IT(&htim7);
 80015fc:	483a      	ldr	r0, [pc, #232]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x14c>)
 80015fe:	f001 ffbd 	bl	800357c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001608:	4836      	ldr	r0, [pc, #216]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x148>)
 800160a:	f001 fa2d 	bl	8002a68 <HAL_GPIO_WritePin>
		}

		// Update previousMillis
		gPreviousMillis = gCurrentMillis;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001614:	6013      	str	r3, [r2, #0]
	}

	if(GPIO_Pin == SW_Mode_Pin && (gCurrentMillis - gPreviousMillis > BUTTON_DEBOUNCE_TIME))
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161c:	d11f      	bne.n	800165e <HAL_GPIO_EXTI_Callback+0xc2>
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800162c:	d917      	bls.n	800165e <HAL_GPIO_EXTI_Callback+0xc2>
	{
		// Update previousMillis
		gPreviousMillis = gCurrentMillis;
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001634:	6013      	str	r3, [r2, #0]

		// Update State Machine variable
		gSM = SM_Mode;
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_GPIO_EXTI_Callback+0x140>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]

		// Rotate between waveforms
		gWaveformType = (gWaveformType + 1) % N_WAVEFORMS;
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_GPIO_EXTI_Callback+0x150>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x154>)
 8001646:	fb83 3102 	smull	r3, r1, r3, r2
 800164a:	17d3      	asrs	r3, r2, #31
 800164c:	1ac9      	subs	r1, r1, r3
 800164e:	460b      	mov	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	440b      	add	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	1ad1      	subs	r1, r2, r3
 8001658:	b2ca      	uxtb	r2, r1
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_GPIO_EXTI_Callback+0x150>)
 800165c:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == SW_Cursor_Pin && (gCurrentMillis - gPreviousMillis > BUTTON_DEBOUNCE_TIME))
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d10e      	bne.n	8001684 <HAL_GPIO_EXTI_Callback+0xe8>
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001674:	d906      	bls.n	8001684 <HAL_GPIO_EXTI_Callback+0xe8>
	{
		// Update previousMillis
		gPreviousMillis = gCurrentMillis;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 800167c:	6013      	str	r3, [r2, #0]

		// Update State Machine variable
		gSM = SM_Cursor;
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_GPIO_EXTI_Callback+0x140>)
 8001680:	2203      	movs	r2, #3
 8001682:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == SW_Plus_Pin && (gCurrentMillis - gPreviousMillis > BUTTON_DEBOUNCE_TIME))
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2b20      	cmp	r3, #32
 8001688:	d10e      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0x10c>
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001698:	d906      	bls.n	80016a8 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		// Update previousMillis
		gPreviousMillis = gCurrentMillis;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80016a0:	6013      	str	r3, [r2, #0]

		// Update State Machine variable
		gSM = SM_Plus;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_GPIO_EXTI_Callback+0x140>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == SW_Minus_Pin && (gCurrentMillis - gPreviousMillis > BUTTON_DEBOUNCE_TIME))
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d10e      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x130>
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016bc:	d906      	bls.n	80016cc <HAL_GPIO_EXTI_Callback+0x130>
	{
		// Update previousMillis
		gPreviousMillis = gCurrentMillis;
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x138>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80016c4:	6013      	str	r3, [r2, #0]

		// Update State Machine variable
		gSM = SM_Minus;
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_GPIO_EXTI_Callback+0x140>)
 80016c8:	2205      	movs	r2, #5
 80016ca:	701a      	strb	r2, [r3, #0]
	}

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000230 	.word	0x20000230
 80016d8:	2000022c 	.word	0x2000022c
 80016dc:	20000228 	.word	0x20000228
 80016e0:	20000229 	.word	0x20000229
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	20000094 	.word	0x20000094
 80016ec:	20000188 	.word	0x20000188
 80016f0:	2aaaaaab 	.word	0x2aaaaaab

080016f4 <HAL_UART_RxCpltCallback>:

// UART DMA Complete Callback Function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	// State Machine
	// ****************

	switch(myUART_State)
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_UART_RxCpltCallback+0x94>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_UART_RxCpltCallback+0x16>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d01c      	beq.n	8001742 <HAL_UART_RxCpltCallback+0x4e>
		HAL_UART_Receive_DMA(&huart3, (uint8_t *)gRXData, 1);

		break;

	default:
		break;
 8001708:	e039      	b.n	800177e <HAL_UART_RxCpltCallback+0x8a>
		if(gRXData[0] == '#')
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b23      	cmp	r3, #35	; 0x23
 8001710:	d106      	bne.n	8001720 <HAL_UART_RxCpltCallback+0x2c>
			myUART_State = SM_APP;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_UART_RxCpltCallback+0x94>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
			gAUX_Counter = 0;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_UART_RxCpltCallback+0x9c>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e00a      	b.n	8001736 <HAL_UART_RxCpltCallback+0x42>
			if( (gRXData[0] != '\r') || (gRXData[0] != '\n') )
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b0d      	cmp	r3, #13
 8001726:	d103      	bne.n	8001730 <HAL_UART_RxCpltCallback+0x3c>
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b0a      	cmp	r3, #10
 800172e:	d002      	beq.n	8001736 <HAL_UART_RxCpltCallback+0x42>
				my_printf("Invalid command.\r\n");
 8001730:	4818      	ldr	r0, [pc, #96]	; (8001794 <HAL_UART_RxCpltCallback+0xa0>)
 8001732:	f7ff fe89 	bl	8001448 <my_printf>
		HAL_UART_Receive_DMA(&huart3, (uint8_t *)gRXData, 1);
 8001736:	2201      	movs	r2, #1
 8001738:	4914      	ldr	r1, [pc, #80]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <HAL_UART_RxCpltCallback+0xa4>)
 800173c:	f002 fa8d 	bl	8003c5a <HAL_UART_Receive_DMA>
		break;
 8001740:	e01d      	b.n	800177e <HAL_UART_RxCpltCallback+0x8a>
		if(gRXData[0] == '*')
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b2a      	cmp	r3, #42	; 0x2a
 8001748:	d106      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x64>
			ApplicationCallback(gAUX_msgBuffer);
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <HAL_UART_RxCpltCallback+0xa8>)
 800174c:	f000 f828 	bl	80017a0 <ApplicationCallback>
			myUART_State = SM_START;
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_UART_RxCpltCallback+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e00c      	b.n	8001772 <HAL_UART_RxCpltCallback+0x7e>
			gAUX_msgBuffer[gAUX_Counter] = gRXData[0];
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_UART_RxCpltCallback+0x9c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 8001760:	7819      	ldrb	r1, [r3, #0]
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_UART_RxCpltCallback+0xa8>)
 8001764:	5499      	strb	r1, [r3, r2]
			gAUX_Counter++;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_UART_RxCpltCallback+0x9c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_UART_RxCpltCallback+0x9c>)
 8001770:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, (uint8_t *)gRXData, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	4905      	ldr	r1, [pc, #20]	; (800178c <HAL_UART_RxCpltCallback+0x98>)
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <HAL_UART_RxCpltCallback+0xa4>)
 8001778:	f002 fa6f 	bl	8003c5a <HAL_UART_Receive_DMA>
		break;
 800177c:	bf00      	nop
	}

	// ****************
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000227 	.word	0x20000227
 800178c:	200001c0 	.word	0x200001c0
 8001790:	20000226 	.word	0x20000226
 8001794:	080058cc 	.word	0x080058cc
 8001798:	200000dc 	.word	0x200000dc
 800179c:	200001f4 	.word	0x200001f4

080017a0 <ApplicationCallback>:

void ApplicationCallback(char *cmd)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	// DDS Command
	// *****************
	if( strstr(cmd, "DDS") != NULL )
 80017a8:	496f      	ldr	r1, [pc, #444]	; (8001968 <ApplicationCallback+0x1c8>)
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f003 fad0 	bl	8004d50 <strstr>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d02e      	beq.n	8001814 <ApplicationCallback+0x74>
	{
		if( strstr(cmd, CMD_DDS_ON) != NULL )
 80017b6:	496d      	ldr	r1, [pc, #436]	; (800196c <ApplicationCallback+0x1cc>)
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f003 fac9 	bl	8004d50 <strstr>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <ApplicationCallback+0x42>
		{
			// Update State Machine variable
			gSM = SM_Start_Stop;
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <ApplicationCallback+0x1d0>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]

			// Update Start Stop global variable
			gStart_Stop = 1;
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <ApplicationCallback+0x1d4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4868      	ldr	r0, [pc, #416]	; (8001978 <ApplicationCallback+0x1d8>)
 80017d8:	f001 f946 	bl	8002a68 <HAL_GPIO_WritePin>

			my_printf("CMD Ok.\r\n");
 80017dc:	4867      	ldr	r0, [pc, #412]	; (800197c <ApplicationCallback+0x1dc>)
 80017de:	f7ff fe33 	bl	8001448 <my_printf>
		}

		if( strstr(cmd, CMD_DDS_OFF) != NULL )
 80017e2:	4967      	ldr	r1, [pc, #412]	; (8001980 <ApplicationCallback+0x1e0>)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f003 fab3 	bl	8004d50 <strstr>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d011      	beq.n	8001814 <ApplicationCallback+0x74>
		{
			// Update State Machine variable
			gSM = SM_Start_Stop;
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <ApplicationCallback+0x1d0>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]

			// Update Start Stop global variable
			gStart_Stop = 0;
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <ApplicationCallback+0x1d4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

			// Stop DAC Timer
			HAL_TIM_Base_Stop_IT(&htim7);
 80017fc:	4861      	ldr	r0, [pc, #388]	; (8001984 <ApplicationCallback+0x1e4>)
 80017fe:	f001 febd 	bl	800357c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	485b      	ldr	r0, [pc, #364]	; (8001978 <ApplicationCallback+0x1d8>)
 800180a:	f001 f92d 	bl	8002a68 <HAL_GPIO_WritePin>

			my_printf("CMD Ok.\r\n");
 800180e:	485b      	ldr	r0, [pc, #364]	; (800197c <ApplicationCallback+0x1dc>)
 8001810:	f7ff fe1a 	bl	8001448 <my_printf>
	}
	// *****************

	// MODE Command
	// *****************
	if( strstr(cmd, "MODE") != NULL )
 8001814:	495c      	ldr	r1, [pc, #368]	; (8001988 <ApplicationCallback+0x1e8>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f003 fa9a 	bl	8004d50 <strstr>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d05f      	beq.n	80018e2 <ApplicationCallback+0x142>
	{
		// SINE WAVEFORM
		if( strstr(cmd, CMD_MODE_SINE) != NULL )
 8001822:	495a      	ldr	r1, [pc, #360]	; (800198c <ApplicationCallback+0x1ec>)
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f003 fa93 	bl	8004d50 <strstr>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <ApplicationCallback+0xa2>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <ApplicationCallback+0x1d0>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Sine_Wave;
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <ApplicationCallback+0x1f0>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 800183c:	484f      	ldr	r0, [pc, #316]	; (800197c <ApplicationCallback+0x1dc>)
 800183e:	f7ff fe03 	bl	8001448 <my_printf>
		}

		// COSINE WAVEFORM
		if( strstr(cmd, CMD_MODE_COSINE) != NULL )
 8001842:	4954      	ldr	r1, [pc, #336]	; (8001994 <ApplicationCallback+0x1f4>)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f003 fa83 	bl	8004d50 <strstr>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <ApplicationCallback+0xc2>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <ApplicationCallback+0x1d0>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Cosine_Wave;
 8001856:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <ApplicationCallback+0x1f0>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 800185c:	4847      	ldr	r0, [pc, #284]	; (800197c <ApplicationCallback+0x1dc>)
 800185e:	f7ff fdf3 	bl	8001448 <my_printf>
		}

		// TRIANGLE WAVEFORM
		if( strstr(cmd, CMD_MODE_TRIANGLE) != NULL )
 8001862:	494d      	ldr	r1, [pc, #308]	; (8001998 <ApplicationCallback+0x1f8>)
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f003 fa73 	bl	8004d50 <strstr>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <ApplicationCallback+0xe2>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <ApplicationCallback+0x1d0>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Triangle_Wave;
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <ApplicationCallback+0x1f0>)
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 800187c:	483f      	ldr	r0, [pc, #252]	; (800197c <ApplicationCallback+0x1dc>)
 800187e:	f7ff fde3 	bl	8001448 <my_printf>
		}

		// SQUARE WAVEFORM
		if( strstr(cmd, CMD_MODE_SQUARE) != NULL )
 8001882:	4946      	ldr	r1, [pc, #280]	; (800199c <ApplicationCallback+0x1fc>)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f003 fa63 	bl	8004d50 <strstr>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <ApplicationCallback+0x102>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <ApplicationCallback+0x1d0>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Square_Wave;
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <ApplicationCallback+0x1f0>)
 8001898:	2205      	movs	r2, #5
 800189a:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 800189c:	4837      	ldr	r0, [pc, #220]	; (800197c <ApplicationCallback+0x1dc>)
 800189e:	f7ff fdd3 	bl	8001448 <my_printf>
		}

		// SAWTOOTH WAVEFORM
		if( strstr(cmd, CMD_MODE_SAWTOOTH) != NULL )
 80018a2:	493f      	ldr	r1, [pc, #252]	; (80019a0 <ApplicationCallback+0x200>)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f003 fa53 	bl	8004d50 <strstr>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <ApplicationCallback+0x122>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <ApplicationCallback+0x1d0>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Sawtooth_Wave;
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <ApplicationCallback+0x1f0>)
 80018b8:	2203      	movs	r2, #3
 80018ba:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 80018bc:	482f      	ldr	r0, [pc, #188]	; (800197c <ApplicationCallback+0x1dc>)
 80018be:	f7ff fdc3 	bl	8001448 <my_printf>
		}

		// SAWTOOTH REVERSE WAVEFORM
		if( strstr(cmd, CMD_MODE_SAWTOOTH_REV) != NULL )
 80018c2:	4938      	ldr	r1, [pc, #224]	; (80019a4 <ApplicationCallback+0x204>)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f003 fa43 	bl	8004d50 <strstr>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <ApplicationCallback+0x142>
		{
			// Update State Machine variable
			gSM = SM_Mode;
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <ApplicationCallback+0x1d0>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]

			gWaveformType = DDS_Sawtooth_Rev_Wave;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <ApplicationCallback+0x1f0>)
 80018d8:	2204      	movs	r2, #4
 80018da:	701a      	strb	r2, [r3, #0]

			my_printf("CMD Ok.\r\n");
 80018dc:	4827      	ldr	r0, [pc, #156]	; (800197c <ApplicationCallback+0x1dc>)
 80018de:	f7ff fdb3 	bl	8001448 <my_printf>
	}
	// *****************

	// FREQ Command
	// *****************
	if( strstr(cmd, "FREQ") != NULL )
 80018e2:	4931      	ldr	r1, [pc, #196]	; (80019a8 <ApplicationCallback+0x208>)
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f003 fa33 	bl	8004d50 <strstr>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d030      	beq.n	8001952 <ApplicationCallback+0x1b2>
	{
		// Get pointer
		const char* freqPos = strstr(cmd, "FREQ:");
 80018f0:	492e      	ldr	r1, [pc, #184]	; (80019ac <ApplicationCallback+0x20c>)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f003 fa2c 	bl	8004d50 <strstr>
 80018f8:	60f8      	str	r0, [r7, #12]
		if(freqPos != NULL)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d028      	beq.n	8001952 <ApplicationCallback+0x1b2>
		{
			// Move the pointer to the position just after "FREQ:"
			freqPos += strlen("FREQ:");
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3305      	adds	r3, #5
 8001904:	60fb      	str	r3, [r7, #12]
			// Extract the number using atoi
			gDDS_Freq = (uint32_t) atoi(freqPos);
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f003 f9cb 	bl	8004ca2 <atoi>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <ApplicationCallback+0x210>)
 8001912:	601a      	str	r2, [r3, #0]

			// Update DDS Tuning Word Frequency
			gTuningWord = (pow(2, 32) * gDDS_Freq) / SAMPLING_FREQ;
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <ApplicationCallback+0x210>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fdf3 	bl	8000504 <__aeabi_ui2d>
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <ApplicationCallback+0x214>)
 8001924:	f7fe fe68 	bl	80005f8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	a30b      	add	r3, pc, #44	; (adr r3, 8001960 <ApplicationCallback+0x1c0>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe ff89 	bl	800084c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f86b 	bl	8000a1c <__aeabi_d2uiz>
 8001946:	4603      	mov	r3, r0
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <ApplicationCallback+0x218>)
 800194a:	6013      	str	r3, [r2, #0]

			my_printf("CMD Ok.\r\n");
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <ApplicationCallback+0x1dc>)
 800194e:	f7ff fd7b 	bl	8001448 <my_printf>
		}
	}
	// *****************

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	412e8480 	.word	0x412e8480
 8001968:	080058e0 	.word	0x080058e0
 800196c:	080058e4 	.word	0x080058e4
 8001970:	20000228 	.word	0x20000228
 8001974:	20000229 	.word	0x20000229
 8001978:	40020c00 	.word	0x40020c00
 800197c:	080058ec 	.word	0x080058ec
 8001980:	080058f8 	.word	0x080058f8
 8001984:	20000094 	.word	0x20000094
 8001988:	08005900 	.word	0x08005900
 800198c:	08005908 	.word	0x08005908
 8001990:	20000188 	.word	0x20000188
 8001994:	08005914 	.word	0x08005914
 8001998:	08005920 	.word	0x08005920
 800199c:	08005930 	.word	0x08005930
 80019a0:	0800593c 	.word	0x0800593c
 80019a4:	0800594c 	.word	0x0800594c
 80019a8:	08005960 	.word	0x08005960
 80019ac:	08005968 	.word	0x08005968
 80019b0:	20000000 	.word	0x20000000
 80019b4:	41f00000 	.word	0x41f00000
 80019b8:	20000004 	.word	0x20000004

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>
	...

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a06:	2007      	movs	r0, #7
 8001a08:	f000 fae0 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d115      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a34:	f043 0320 	orr.w	r3, r3, #32
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2037      	movs	r0, #55	; 0x37
 8001a4c:	f000 fac9 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a50:	2037      	movs	r0, #55	; 0x37
 8001a52:	f000 fae2 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40001400 	.word	0x40001400
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_UART_MspInit+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d15b      	bne.n	8001b42 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_UART_MspInit+0xe8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ac2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	481d      	ldr	r0, [pc, #116]	; (8001b54 <HAL_UART_MspInit+0xec>)
 8001ae0:	f000 fe26 	bl	8002730 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_UART_MspInit+0xf4>)
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001aec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b28:	f000 fa92 	bl	8002050 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b32:	f7ff ff43 	bl	80019bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_UART_MspInit+0xf0>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40004800 	.word	0x40004800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	20000120 	.word	0x20000120
 8001b5c:	40026028 	.word	0x40026028

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f8fa 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Minus_Pin);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f000 ff6f 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8001bca:	f000 fb47 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000120 	.word	0x20000120

08001bd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Plus_Pin);
 8001bdc:	2020      	movs	r0, #32
 8001bde:	f000 ff5d 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_Cursor_Pin);
 8001be2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001be6:	f000 ff59 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}

08001bee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Mode_Pin);
 8001bf2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bf6:	f000 ff51 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_Start_Stop_Pin);
 8001bfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bfe:	f000 ff4d 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM7_IRQHandler+0x10>)
 8001c0e:	f001 fce4 	bl	80035da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000094 	.word	0x20000094

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f003 f82e 	bl	8004cac <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000234 	.word	0x20000234
 8001c84:	20000270 	.word	0x20000270

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb2:	490e      	ldr	r1, [pc, #56]	; (8001cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc8:	4c0b      	ldr	r4, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd6:	f7ff ffd7 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f002 ffed 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff f83f 	bl	8000d60 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cf0:	080060d4 	.word	0x080060d4
  ldr r2, =_sbss
 8001cf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cf8:	2000026c 	.word	0x2000026c

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f94f 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fe48 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f967 	bl	8002036 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f92f 	bl	8001fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	2000000c 	.word	0x2000000c

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000238 	.word	0x20000238

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000238 	.word	0x20000238

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000010 	.word	0x20000010

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <__NVIC_EnableIRQ+0x38>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff29 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff3e 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff8e 	bl	8001f20 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5d 	bl	8001ecc <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff31 	bl	8001e90 <__NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffa2 	bl	8001f88 <SysTick_Config>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff feb6 	bl	8001dcc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e099      	b.n	80021a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208c:	e00f      	b.n	80020ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208e:	f7ff fe9d 	bl	8001dcc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b05      	cmp	r3, #5
 800209a:	d908      	bls.n	80020ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e078      	b.n	80021a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e8      	bne.n	800208e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_DMA_Init+0x158>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4313      	orrs	r3, r2
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b04      	cmp	r3, #4
 8002140:	d117      	bne.n	8002172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fa6f 	bl	8002638 <DMA_CheckFifoParam>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800216e:	2301      	movs	r3, #1
 8002170:	e016      	b.n	80021a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa26 	bl	80025cc <DMA_CalcBaseAndBitshift>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	223f      	movs	r2, #63	; 0x3f
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	f010803f 	.word	0xf010803f

080021ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_DMA_Start_IT+0x26>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e040      	b.n	8002254 <HAL_DMA_Start_IT+0xa8>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d12f      	bne.n	8002246 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f9b8 	bl	8002570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	223f      	movs	r2, #63	; 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0216 	orr.w	r2, r2, #22
 800221a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e005      	b.n	8002252 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002252:	7dfb      	ldrb	r3, [r7, #23]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002268:	4b8e      	ldr	r3, [pc, #568]	; (80024a4 <HAL_DMA_IRQHandler+0x248>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a8e      	ldr	r2, [pc, #568]	; (80024a8 <HAL_DMA_IRQHandler+0x24c>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2208      	movs	r2, #8
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2208      	movs	r2, #8
 80022b6:	409a      	lsls	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d012      	beq.n	80022fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	2201      	movs	r2, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2204      	movs	r2, #4
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2204      	movs	r2, #4
 8002322:	409a      	lsls	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	2210      	movs	r2, #16
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d043      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2210      	movs	r2, #16
 8002358:	409a      	lsls	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d018      	beq.n	800239e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d024      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e01f      	b.n	80023cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01b      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e016      	b.n	80023cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0208 	bic.w	r2, r2, #8
 80023ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2220      	movs	r2, #32
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 808f 	beq.w	80024fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8087 	beq.w	80024fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2220      	movs	r2, #32
 80023f4:	409a      	lsls	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b05      	cmp	r3, #5
 8002404:	d136      	bne.n	8002474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0216 	bic.w	r2, r2, #22
 8002414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <HAL_DMA_IRQHandler+0x1da>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0208 	bic.w	r2, r2, #8
 8002444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	223f      	movs	r2, #63	; 0x3f
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	2b00      	cmp	r3, #0
 8002468:	d07e      	beq.n	8002568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
        }
        return;
 8002472:	e079      	b.n	8002568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01d      	beq.n	80024be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	2b00      	cmp	r3, #0
 8002496:	d031      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e02c      	b.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008
 80024a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
 80024bc:	e01e      	b.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0210 	bic.w	r2, r2, #16
 80024da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	d032      	beq.n	800256a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d022      	beq.n	8002556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3301      	adds	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d307      	bcc.n	8002544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f2      	bne.n	8002528 <HAL_DMA_IRQHandler+0x2cc>
 8002542:	e000      	b.n	8002546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
 8002566:	e000      	b.n	800256a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002568:	bf00      	nop
    }
  }
}
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800258c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d108      	bne.n	80025b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ae:	e007      	b.n	80025c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	3b10      	subs	r3, #16
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <DMA_CalcBaseAndBitshift+0x64>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <DMA_CalcBaseAndBitshift+0x68>)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d909      	bls.n	800260e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	1d1a      	adds	r2, r3, #4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	; 0x58
 800260c:	e007      	b.n	800261e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	aaaaaaab 	.word	0xaaaaaaab
 8002634:	08005f88 	.word	0x08005f88

08002638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11f      	bne.n	8002692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d856      	bhi.n	8002706 <DMA_CheckFifoParam+0xce>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <DMA_CheckFifoParam+0x28>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	08002683 	.word	0x08002683
 8002668:	08002671 	.word	0x08002671
 800266c:	08002707 	.word	0x08002707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d046      	beq.n	800270a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e043      	b.n	800270a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800268a:	d140      	bne.n	800270e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e03d      	b.n	800270e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	d121      	bne.n	80026e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d837      	bhi.n	8002712 <DMA_CheckFifoParam+0xda>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <DMA_CheckFifoParam+0x70>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026b9 	.word	0x080026b9
 80026ac:	080026bf 	.word	0x080026bf
 80026b0:	080026b9 	.word	0x080026b9
 80026b4:	080026d1 	.word	0x080026d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      break;
 80026bc:	e030      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d025      	beq.n	8002716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ce:	e022      	b.n	8002716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d8:	d11f      	bne.n	800271a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026de:	e01c      	b.n	800271a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d903      	bls.n	80026ee <DMA_CheckFifoParam+0xb6>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d003      	beq.n	80026f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026ec:	e018      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      break;
 80026f2:	e015      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      break;
 8002704:	e00b      	b.n	800271e <DMA_CheckFifoParam+0xe6>
      break;
 8002706:	bf00      	nop
 8002708:	e00a      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e008      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e006      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e004      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;   
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
    }
  } 
  
  return status; 
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e16b      	b.n	8002a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 815a 	bne.w	8002a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b4 	beq.w	8002a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_GPIO_Init+0x310>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_GPIO_Init+0x314>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x226>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a51      	ldr	r2, [pc, #324]	; (8002a48 <HAL_GPIO_Init+0x318>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x222>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x31c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x21e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	; (8002a50 <HAL_GPIO_Init+0x320>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x324>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x328>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x32c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_GPIO_Init+0x330>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x20a>
 8002936:	2307      	movs	r3, #7
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293a:	2308      	movs	r3, #8
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x310>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x334>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae90 	bls.w	800274c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fd6e 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e267      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d075      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b82      	ldr	r3, [pc, #520]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x108>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e242      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x74>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b70      	ldr	r3, [pc, #448]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6f      	ldr	r2, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6c      	ldr	r2, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b64:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a68      	ldr	r2, [pc, #416]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7ff f922 	bl	8001dcc <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7ff f91e 	bl	8001dcc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e207      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f90e 	bl	8001dcc <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f90a 	bl	8001dcc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1f3      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b51      	ldr	r3, [pc, #324]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xe8>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e1c7      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4937      	ldr	r1, [pc, #220]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	e03a      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_OscConfig+0x244>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7ff f8c3 	bl	8001dcc <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7ff f8bf 	bl	8001dcc <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1a8      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4925      	ldr	r1, [pc, #148]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	e015      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_OscConfig+0x244>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7ff f8a2 	bl	8001dcc <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7ff f89e 	bl	8001dcc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e187      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d036      	beq.n	8002d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x248>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7ff f882 	bl	8001dcc <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7ff f87e 	bl	8001dcc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e167      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x200>
 8002cea:	e01b      	b.n	8002d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x248>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff f86b 	bl	8001dcc <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	e00e      	b.n	8002d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7ff f867 	bl	8001dcc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d907      	bls.n	8002d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e150      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	42470000 	.word	0x42470000
 8002d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ea      	bne.n	8002cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8097 	beq.w	8002e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10f      	bne.n	8002d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b7d      	ldr	r3, [pc, #500]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a7c      	ldr	r2, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b7a      	ldr	r3, [pc, #488]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b77      	ldr	r3, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x474>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4b74      	ldr	r3, [pc, #464]	; (8002f40 <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a73      	ldr	r2, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x474>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f827 	bl	8001dcc <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7ff f823 	bl	8001dcc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e10c      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x474>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x2ea>
 8002da8:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a63      	ldr	r2, [pc, #396]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	e01c      	b.n	8002df0 <HAL_RCC_OscConfig+0x324>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x30c>
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a5e      	ldr	r2, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a5b      	ldr	r2, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0x324>
 8002dd8:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a57      	ldr	r2, [pc, #348]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a54      	ldr	r2, [pc, #336]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0304 	bic.w	r3, r3, #4
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe ffe8 	bl	8001dcc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe ffe4 	bl	8001dcc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0cb      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ee      	beq.n	8002e00 <HAL_RCC_OscConfig+0x334>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fe ffd2 	bl	8001dcc <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe ffce 	bl	8001dcc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0b5      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ee      	bne.n	8002e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	4a38      	ldr	r2, [pc, #224]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a1 	beq.w	8002fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d05c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d141      	bne.n	8002f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_OscConfig+0x478>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe ffa2 	bl	8001dcc <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe ff9e 	bl	8001dcc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e087      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	019b      	lsls	r3, r3, #6
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	491b      	ldr	r1, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x478>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe ff77 	bl	8001dcc <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe ff73 	bl	8001dcc <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e05c      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x416>
 8002f00:	e054      	b.n	8002fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_RCC_OscConfig+0x478>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe ff60 	bl	8001dcc <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe ff5c 	bl	8001dcc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e045      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_OscConfig+0x470>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x444>
 8002f2e:	e03d      	b.n	8002fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e038      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40007000 	.word	0x40007000
 8002f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x4ec>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d121      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d11a      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d111      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	3b01      	subs	r3, #1
 8002f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800

08002fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0cc      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d90c      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b8      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494d      	ldr	r1, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d044      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d119      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d003      	beq.n	800307a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e067      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4934      	ldr	r1, [pc, #208]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fe8e 	bl	8001dcc <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fe8a 	bl	8001dcc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e04f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d20c      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e032      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f821 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490a      	ldr	r1, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fdee 	bl	8001d44 <HAL_InitTick>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00
 8003178:	40023800 	.word	0x40023800
 800317c:	08005f70 	.word	0x08005f70
 8003180:	20000008 	.word	0x20000008
 8003184:	2000000c 	.word	0x2000000c

08003188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b094      	sub	sp, #80	; 0x50
 800318e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
 8003194:	2300      	movs	r3, #0
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003198:	2300      	movs	r3, #0
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d00d      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x40>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	f200 80e1 	bhi.w	8003374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x34>
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ba:	e0db      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_GetSysClockFreq+0x204>)
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031c0:	e0db      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <HAL_RCC_GetSysClockFreq+0x208>)
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c6:	e0d8      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
 80031f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	f04f 0000 	mov.w	r0, #0
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	0159      	lsls	r1, r3, #5
 8003208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320c:	0150      	lsls	r0, r2, #5
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4621      	mov	r1, r4
 8003214:	1a51      	subs	r1, r2, r1
 8003216:	6139      	str	r1, [r7, #16]
 8003218:	4629      	mov	r1, r5
 800321a:	eb63 0301 	sbc.w	r3, r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	018b      	lsls	r3, r1, #6
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003236:	4651      	mov	r1, sl
 8003238:	018a      	lsls	r2, r1, #6
 800323a:	4651      	mov	r1, sl
 800323c:	ebb2 0801 	subs.w	r8, r2, r1
 8003240:	4659      	mov	r1, fp
 8003242:	eb63 0901 	sbc.w	r9, r3, r1
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325a:	4690      	mov	r8, r2
 800325c:	4699      	mov	r9, r3
 800325e:	4623      	mov	r3, r4
 8003260:	eb18 0303 	adds.w	r3, r8, r3
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	462b      	mov	r3, r5
 8003268:	eb49 0303 	adc.w	r3, r9, r3
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800327a:	4629      	mov	r1, r5
 800327c:	024b      	lsls	r3, r1, #9
 800327e:	4621      	mov	r1, r4
 8003280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003284:	4621      	mov	r1, r4
 8003286:	024a      	lsls	r2, r1, #9
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 8003292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003298:	f7fd fbe0 	bl	8000a5c <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	e058      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	4611      	mov	r1, r2
 80032b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	0159      	lsls	r1, r3, #5
 80032ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d2:	0150      	lsls	r0, r2, #5
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4641      	mov	r1, r8
 80032da:	ebb2 0a01 	subs.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f8:	ebb2 040a 	subs.w	r4, r2, sl
 80032fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	00eb      	lsls	r3, r5, #3
 800330a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330e:	00e2      	lsls	r2, r4, #3
 8003310:	4614      	mov	r4, r2
 8003312:	461d      	mov	r5, r3
 8003314:	4643      	mov	r3, r8
 8003316:	18e3      	adds	r3, r4, r3
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	464b      	mov	r3, r9
 800331c:	eb45 0303 	adc.w	r3, r5, r3
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332e:	4629      	mov	r1, r5
 8003330:	028b      	lsls	r3, r1, #10
 8003332:	4621      	mov	r1, r4
 8003334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003338:	4621      	mov	r1, r4
 800333a:	028a      	lsls	r2, r1, #10
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	2200      	movs	r2, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	61fa      	str	r2, [r7, #28]
 8003348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334c:	f7fd fb86 	bl	8000a5c <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetSysClockFreq+0x204>)
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800337c:	4618      	mov	r0, r3
 800337e:	3750      	adds	r7, #80	; 0x50
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	00f42400 	.word	0x00f42400
 8003390:	007a1200 	.word	0x007a1200

08003394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b0:	f7ff fff0 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08005f80 	.word	0x08005f80

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d8:	f7ff ffdc 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0b5b      	lsrs	r3, r3, #13
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08005f80 	.word	0x08005f80

080033fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe faf8 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 f9fe 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e04e      	b.n	8003552 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_TIM_Base_Start_IT+0xc4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d01d      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_TIM_Base_Start_IT+0xc8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <HAL_TIM_Base_Start_IT+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1c      	ldr	r2, [pc, #112]	; (800356c <HAL_TIM_Base_Start_IT+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_TIM_Base_Start_IT+0xd4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_TIM_Base_Start_IT+0xd8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_TIM_Base_Start_IT+0xdc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d111      	bne.n	8003540 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d010      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e007      	b.n	8003550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40010400 	.word	0x40010400
 8003574:	40014000 	.word	0x40014000
 8003578:	40001800 	.word	0x40001800

0800357c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	f241 1311 	movw	r3, #4369	; 0x1111
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_TIM_Base_Stop_IT+0x48>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a1a      	ldr	r2, [r3, #32]
 80035aa:	f240 4344 	movw	r3, #1092	; 0x444
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_Base_Stop_IT+0x48>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d122      	bne.n	8003636 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d11b      	bne.n	8003636 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0202 	mvn.w	r2, #2
 8003606:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8ee 	bl	80037fe <HAL_TIM_IC_CaptureCallback>
 8003622:	e005      	b.n	8003630 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8e0 	bl	80037ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8f1 	bl	8003812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d122      	bne.n	800368a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d11b      	bne.n	800368a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0204 	mvn.w	r2, #4
 800365a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8c4 	bl	80037fe <HAL_TIM_IC_CaptureCallback>
 8003676:	e005      	b.n	8003684 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8b6 	bl	80037ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8c7 	bl	8003812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d122      	bne.n	80036de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d11b      	bne.n	80036de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0208 	mvn.w	r2, #8
 80036ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2204      	movs	r2, #4
 80036b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f89a 	bl	80037fe <HAL_TIM_IC_CaptureCallback>
 80036ca:	e005      	b.n	80036d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f88c 	bl	80037ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f89d 	bl	8003812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d122      	bne.n	8003732 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d11b      	bne.n	8003732 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0210 	mvn.w	r2, #16
 8003702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2208      	movs	r2, #8
 8003708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f870 	bl	80037fe <HAL_TIM_IC_CaptureCallback>
 800371e:	e005      	b.n	800372c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f862 	bl	80037ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f873 	bl	8003812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10e      	bne.n	800375e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0201 	mvn.w	r2, #1
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fd fe91 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d10e      	bne.n	800378a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d107      	bne.n	800378a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f97f 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d10e      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f838 	bl	8003826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d10e      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d107      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0220 	mvn.w	r2, #32
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f949 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a40      	ldr	r2, [pc, #256]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d00f      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <TIM_Base_SetConfig+0x118>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00b      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3c      	ldr	r2, [pc, #240]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3b      	ldr	r2, [pc, #236]	; (800395c <TIM_Base_SetConfig+0x120>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3a      	ldr	r2, [pc, #232]	; (8003960 <TIM_Base_SetConfig+0x124>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d108      	bne.n	800388e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d027      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <TIM_Base_SetConfig+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d023      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2a      	ldr	r2, [pc, #168]	; (800395c <TIM_Base_SetConfig+0x120>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <TIM_Base_SetConfig+0x124>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d017      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <TIM_Base_SetConfig+0x128>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a27      	ldr	r2, [pc, #156]	; (8003968 <TIM_Base_SetConfig+0x12c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <TIM_Base_SetConfig+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <TIM_Base_SetConfig+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a24      	ldr	r2, [pc, #144]	; (8003974 <TIM_Base_SetConfig+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <TIM_Base_SetConfig+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0xf8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d103      	bne.n	800393c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	615a      	str	r2, [r3, #20]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40010400 	.word	0x40010400
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800
 8003970:	40001800 	.word	0x40001800
 8003974:	40001c00 	.word	0x40001c00
 8003978:	40002000 	.word	0x40002000

0800397c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e05a      	b.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d01d      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10c      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40001800 	.word	0x40001800

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e03f      	b.n	8003b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd ffd0 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb9b 	bl	800421c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d17c      	bne.n	8003c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_Transmit+0x2c>
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e075      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit+0x3e>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e06e      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2221      	movs	r2, #33	; 0x21
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe f91f 	bl	8001dcc <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bc8:	e02a      	b.n	8003c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f988 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cf      	bne.n	8003bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f958 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d11d      	bne.n	8003cb0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Receive_DMA+0x26>
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e016      	b.n	8003cb2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Receive_DMA+0x38>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e00f      	b.n	8003cb2 <HAL_UART_Receive_DMA+0x58>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f98e 	bl	8003fc8 <UART_Start_Receive_DMA>
 8003cac:	4603      	mov	r3, r0
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b09c      	sub	sp, #112	; 0x70
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d172      	bne.n	8003dfc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d3e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	667b      	str	r3, [r7, #100]	; 0x64
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d70:	647a      	str	r2, [r7, #68]	; 0x44
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	623b      	str	r3, [r7, #32]
   return(result);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003da4:	633a      	str	r2, [r7, #48]	; 0x30
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d119      	bne.n	8003dfc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0310 	bic.w	r3, r3, #16
 8003dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003de8:	61fa      	str	r2, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	617b      	str	r3, [r7, #20]
   return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e5      	bne.n	8003dc8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e0c:	f7ff ff69 	bl	8003ce2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e10:	e002      	b.n	8003e18 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e14:	f7fd fc6e 	bl	80016f4 <HAL_UART_RxCpltCallback>
}
 8003e18:	bf00      	nop
 8003e1a:	3770      	adds	r7, #112	; 0x70
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff4e 	bl	8003ce2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e46:	e002      	b.n	8003e4e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff ff36 	bl	8003cba <HAL_UART_RxHalfCpltCallback>
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b80      	cmp	r3, #128	; 0x80
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b21      	cmp	r3, #33	; 0x21
 8003e88:	d108      	bne.n	8003e9c <UART_DMAError+0x46>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e96:	68b8      	ldr	r0, [r7, #8]
 8003e98:	f000 f934 	bl	8004104 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b22      	cmp	r3, #34	; 0x22
 8003ebc:	d108      	bne.n	8003ed0 <UART_DMAError+0x7a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003eca:	68b8      	ldr	r0, [r7, #8]
 8003ecc:	f000 f942 	bl	8004154 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f7ff fef6 	bl	8003cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b090      	sub	sp, #64	; 0x40
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	e050      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d04c      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	f7fd ff5f 	bl	8001dcc <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d241      	bcs.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f6e:	623a      	str	r2, [r7, #32]
 8003f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d09f      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3740      	adds	r7, #64	; 0x40
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b098      	sub	sp, #96	; 0x60
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2222      	movs	r2, #34	; 0x22
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <UART_Start_Receive_DMA+0x130>)
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <UART_Start_Receive_DMA+0x134>)
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <UART_Start_Receive_DMA+0x138>)
 8004006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	2200      	movs	r2, #0
 800400e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	f7fe f8c0 	bl	80021ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004072:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	657b      	str	r3, [r7, #84]	; 0x54
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d0:	653b      	str	r3, [r7, #80]	; 0x50
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040da:	627a      	str	r2, [r7, #36]	; 0x24
 80040dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6a39      	ldr	r1, [r7, #32]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3760      	adds	r7, #96	; 0x60
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08003cfb 	.word	0x08003cfb
 80040fc:	08003e21 	.word	0x08003e21
 8004100:	08003e57 	.word	0x08003e57

08004104 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	61ba      	str	r2, [r7, #24]
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004148:	bf00      	nop
 800414a:	3724      	adds	r7, #36	; 0x24
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b095      	sub	sp, #84	; 0x54
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417c:	643a      	str	r2, [r7, #64]	; 0x40
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d119      	bne.n	8004200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60bb      	str	r3, [r7, #8]
   return(result);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ec:	61ba      	str	r2, [r7, #24]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800420e:	bf00      	nop
 8004210:	3754      	adds	r7, #84	; 0x54
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b0c0      	sub	sp, #256	; 0x100
 8004222:	af00      	add	r7, sp, #0
 8004224:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	ea40 0301 	orr.w	r3, r0, r1
 8004244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	431a      	orrs	r2, r3
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004274:	f021 010c 	bic.w	r1, r1, #12
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004282:	430b      	orrs	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	6999      	ldr	r1, [r3, #24]
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	ea40 0301 	orr.w	r3, r0, r1
 80042a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b8f      	ldr	r3, [pc, #572]	; (80044e8 <UART_SetConfig+0x2cc>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d005      	beq.n	80042bc <UART_SetConfig+0xa0>
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <UART_SetConfig+0x2d0>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d104      	bne.n	80042c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042bc:	f7ff f88a 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 80042c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042c4:	e003      	b.n	80042ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7ff f871 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 80042ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d8:	f040 810c 	bne.w	80044f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042ee:	4622      	mov	r2, r4
 80042f0:	462b      	mov	r3, r5
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042f6:	415b      	adcs	r3, r3
 80042f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042fe:	4621      	mov	r1, r4
 8004300:	eb12 0801 	adds.w	r8, r2, r1
 8004304:	4629      	mov	r1, r5
 8004306:	eb43 0901 	adc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800432c:	462b      	mov	r3, r5
 800432e:	eb49 0303 	adc.w	r3, r9, r3
 8004332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004342:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800434a:	460b      	mov	r3, r1
 800434c:	18db      	adds	r3, r3, r3
 800434e:	653b      	str	r3, [r7, #80]	; 0x50
 8004350:	4613      	mov	r3, r2
 8004352:	eb42 0303 	adc.w	r3, r2, r3
 8004356:	657b      	str	r3, [r7, #84]	; 0x54
 8004358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800435c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004360:	f7fc fb7c 	bl	8000a5c <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <UART_SetConfig+0x2d4>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	011c      	lsls	r4, r3, #4
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800437c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	64b9      	str	r1, [r7, #72]	; 0x48
 800438c:	415b      	adcs	r3, r3
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004394:	4641      	mov	r1, r8
 8004396:	eb12 0a01 	adds.w	sl, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0b01 	adc.w	fp, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b4:	4692      	mov	sl, r2
 80043b6:	469b      	mov	fp, r3
 80043b8:	4643      	mov	r3, r8
 80043ba:	eb1a 0303 	adds.w	r3, sl, r3
 80043be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043c2:	464b      	mov	r3, r9
 80043c4:	eb4b 0303 	adc.w	r3, fp, r3
 80043c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043e0:	460b      	mov	r3, r1
 80043e2:	18db      	adds	r3, r3, r3
 80043e4:	643b      	str	r3, [r7, #64]	; 0x40
 80043e6:	4613      	mov	r3, r2
 80043e8:	eb42 0303 	adc.w	r3, r2, r3
 80043ec:	647b      	str	r3, [r7, #68]	; 0x44
 80043ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043f6:	f7fc fb31 	bl	8000a5c <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2301 	umull	r2, r3, r3, r1
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2264      	movs	r2, #100	; 0x64
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	1acb      	subs	r3, r1, r3
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <UART_SetConfig+0x2d4>)
 8004418:	fba3 2302 	umull	r2, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004424:	441c      	add	r4, r3
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004440:	415b      	adcs	r3, r3
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004448:	4641      	mov	r1, r8
 800444a:	1851      	adds	r1, r2, r1
 800444c:	6339      	str	r1, [r7, #48]	; 0x30
 800444e:	4649      	mov	r1, r9
 8004450:	414b      	adcs	r3, r1
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004460:	4659      	mov	r1, fp
 8004462:	00cb      	lsls	r3, r1, #3
 8004464:	4651      	mov	r1, sl
 8004466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446a:	4651      	mov	r1, sl
 800446c:	00ca      	lsls	r2, r1, #3
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	4603      	mov	r3, r0
 8004474:	4642      	mov	r2, r8
 8004476:	189b      	adds	r3, r3, r2
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800447c:	464b      	mov	r3, r9
 800447e:	460a      	mov	r2, r1
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004494:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800449c:	460b      	mov	r3, r1
 800449e:	18db      	adds	r3, r3, r3
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a2:	4613      	mov	r3, r2
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044b2:	f7fc fad3 	bl	8000a5c <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <UART_SetConfig+0x2d4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	; 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	3332      	adds	r3, #50	; 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <UART_SetConfig+0x2d4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 0207 	and.w	r2, r3, #7
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044e4:	e105      	b.n	80046f2 <UART_SetConfig+0x4d6>
 80044e6:	bf00      	nop
 80044e8:	40011000 	.word	0x40011000
 80044ec:	40011400 	.word	0x40011400
 80044f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004506:	4642      	mov	r2, r8
 8004508:	464b      	mov	r3, r9
 800450a:	1891      	adds	r1, r2, r2
 800450c:	6239      	str	r1, [r7, #32]
 800450e:	415b      	adcs	r3, r3
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004516:	4641      	mov	r1, r8
 8004518:	1854      	adds	r4, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb43 0501 	adc.w	r5, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	00eb      	lsls	r3, r5, #3
 800452a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	4643      	mov	r3, r8
 8004536:	18e3      	adds	r3, r4, r3
 8004538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800453c:	464b      	mov	r3, r9
 800453e:	eb45 0303 	adc.w	r3, r5, r3
 8004542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004562:	4629      	mov	r1, r5
 8004564:	008b      	lsls	r3, r1, #2
 8004566:	4621      	mov	r1, r4
 8004568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800456c:	4621      	mov	r1, r4
 800456e:	008a      	lsls	r2, r1, #2
 8004570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004574:	f7fc fa72 	bl	8000a5c <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4b60      	ldr	r3, [pc, #384]	; (8004700 <UART_SetConfig+0x4e4>)
 800457e:	fba3 2302 	umull	r2, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	011c      	lsls	r4, r3, #4
 8004586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	61b9      	str	r1, [r7, #24]
 80045a0:	415b      	adcs	r3, r3
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a8:	4641      	mov	r1, r8
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	6139      	str	r1, [r7, #16]
 80045ae:	4649      	mov	r1, r9
 80045b0:	414b      	adcs	r3, r1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c0:	4659      	mov	r1, fp
 80045c2:	00cb      	lsls	r3, r1, #3
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ca:	4651      	mov	r1, sl
 80045cc:	00ca      	lsls	r2, r1, #3
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	4642      	mov	r2, r8
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045dc:	464b      	mov	r3, r9
 80045de:	460a      	mov	r2, r1
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004600:	4649      	mov	r1, r9
 8004602:	008b      	lsls	r3, r1, #2
 8004604:	4641      	mov	r1, r8
 8004606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460a:	4641      	mov	r1, r8
 800460c:	008a      	lsls	r2, r1, #2
 800460e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004612:	f7fc fa23 	bl	8000a5c <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <UART_SetConfig+0x4e4>)
 800461c:	fba3 1302 	umull	r1, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2164      	movs	r1, #100	; 0x64
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	3332      	adds	r3, #50	; 0x32
 800462e:	4a34      	ldr	r2, [pc, #208]	; (8004700 <UART_SetConfig+0x4e4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463a:	441c      	add	r4, r3
 800463c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004640:	2200      	movs	r2, #0
 8004642:	673b      	str	r3, [r7, #112]	; 0x70
 8004644:	677a      	str	r2, [r7, #116]	; 0x74
 8004646:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	1891      	adds	r1, r2, r2
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	415b      	adcs	r3, r3
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800465a:	4641      	mov	r1, r8
 800465c:	1851      	adds	r1, r2, r1
 800465e:	6039      	str	r1, [r7, #0]
 8004660:	4649      	mov	r1, r9
 8004662:	414b      	adcs	r3, r1
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004672:	4659      	mov	r1, fp
 8004674:	00cb      	lsls	r3, r1, #3
 8004676:	4651      	mov	r1, sl
 8004678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467c:	4651      	mov	r1, sl
 800467e:	00ca      	lsls	r2, r1, #3
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	4603      	mov	r3, r0
 8004686:	4642      	mov	r2, r8
 8004688:	189b      	adds	r3, r3, r2
 800468a:	66bb      	str	r3, [r7, #104]	; 0x68
 800468c:	464b      	mov	r3, r9
 800468e:	460a      	mov	r2, r1
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	663b      	str	r3, [r7, #96]	; 0x60
 80046a0:	667a      	str	r2, [r7, #100]	; 0x64
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046ae:	4649      	mov	r1, r9
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	4641      	mov	r1, r8
 80046b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b8:	4641      	mov	r1, r8
 80046ba:	008a      	lsls	r2, r1, #2
 80046bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046c0:	f7fc f9cc 	bl	8000a5c <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <UART_SetConfig+0x4e4>)
 80046ca:	fba3 1302 	umull	r1, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2164      	movs	r1, #100	; 0x64
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	3332      	adds	r3, #50	; 0x32
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <UART_SetConfig+0x4e4>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f003 020f 	and.w	r2, r3, #15
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4422      	add	r2, r4
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	bf00      	nop
 80046f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046f8:	46bd      	mov	sp, r7
 80046fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fe:	bf00      	nop
 8004700:	51eb851f 	.word	0x51eb851f

08004704 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <DWT_Delay_Init+0x58>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <DWT_Delay_Init+0x58>)
 800470e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004712:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <DWT_Delay_Init+0x58>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a10      	ldr	r2, [pc, #64]	; (800475c <DWT_Delay_Init+0x58>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <DWT_Delay_Init+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <DWT_Delay_Init+0x5c>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <DWT_Delay_Init+0x5c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <DWT_Delay_Init+0x5c>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <DWT_Delay_Init+0x5c>)
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800473e:	bf00      	nop
  __NOP();
 8004740:	bf00      	nop
  __NOP();
 8004742:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <DWT_Delay_Init+0x5c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <DWT_Delay_Init+0x4c>
  {
    return 0;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8004750:	2301      	movs	r3, #1
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000edf0 	.word	0xe000edf0
 8004760:	e0001000 	.word	0xe0001000

08004764 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <DWT_Delay_us+0x40>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004772:	f7fe fe0f 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 8004776:	4603      	mov	r3, r0
 8004778:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <DWT_Delay_us+0x44>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8004788:	bf00      	nop
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <DWT_Delay_us+0x40>)
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d3f8      	bcc.n	800478a <DWT_Delay_us+0x26>
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e0001000 	.word	0xe0001000
 80047a8:	431bde83 	.word	0x431bde83

080047ac <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <lcd16x2_enablePulse+0x34>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <lcd16x2_enablePulse+0x38>)
 80047b6:	8811      	ldrh	r1, [r2, #0]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f954 	bl	8002a68 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80047c0:	2014      	movs	r0, #20
 80047c2:	f7ff ffcf 	bl	8004764 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <lcd16x2_enablePulse+0x34>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <lcd16x2_enablePulse+0x38>)
 80047cc:	8811      	ldrh	r1, [r2, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f949 	bl	8002a68 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80047d6:	203c      	movs	r0, #60	; 0x3c
 80047d8:	f7ff ffc4 	bl	8004764 <DWT_Delay_us>
}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000023c 	.word	0x2000023c
 80047e4:	20000242 	.word	0x20000242

080047e8 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <lcd16x2_rs+0x24>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <lcd16x2_rs+0x28>)
 80047f8:	8811      	ldrh	r1, [r2, #0]
 80047fa:	79fa      	ldrb	r2, [r7, #7]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe f933 	bl	8002a68 <HAL_GPIO_WritePin>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000023c 	.word	0x2000023c
 8004810:	20000240 	.word	0x20000240

08004814 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	73fb      	strb	r3, [r7, #15]
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 800482c:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <lcd16x2_write+0x198>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05a      	beq.n	80048ea <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004834:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <lcd16x2_write+0x19c>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	4b5e      	ldr	r3, [pc, #376]	; (80049b4 <lcd16x2_write+0x1a0>)
 800483a:	8819      	ldrh	r1, [r3, #0]
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	f7fe f90f 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800484a:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <lcd16x2_write+0x19c>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	4b5a      	ldr	r3, [pc, #360]	; (80049b8 <lcd16x2_write+0x1a4>)
 8004850:	8819      	ldrh	r1, [r3, #0]
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	f7fe f904 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <lcd16x2_write+0x19c>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <lcd16x2_write+0x1a8>)
 8004866:	8819      	ldrh	r1, [r3, #0]
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	f7fe f8f9 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8004876:	4b4e      	ldr	r3, [pc, #312]	; (80049b0 <lcd16x2_write+0x19c>)
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <lcd16x2_write+0x1ac>)
 800487c:	8819      	ldrh	r1, [r3, #0]
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	f7fe f8ee 	bl	8002a68 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800488c:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <lcd16x2_write+0x1b0>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <lcd16x2_write+0x1b4>)
 8004892:	8819      	ldrh	r1, [r3, #0]
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	f7fe f8e3 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80048a2:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <lcd16x2_write+0x1b0>)
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	4b49      	ldr	r3, [pc, #292]	; (80049cc <lcd16x2_write+0x1b8>)
 80048a8:	8819      	ldrh	r1, [r3, #0]
 80048aa:	7bbb      	ldrb	r3, [r7, #14]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fe f8d8 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <lcd16x2_write+0x1b0>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <lcd16x2_write+0x1bc>)
 80048be:	8819      	ldrh	r1, [r3, #0]
 80048c0:	7bbb      	ldrb	r3, [r7, #14]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	f7fe f8cd 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <lcd16x2_write+0x1b0>)
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <lcd16x2_write+0x1c0>)
 80048d4:	8819      	ldrh	r1, [r3, #0]
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	f7fe f8c2 	bl	8002a68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80048e4:	f7ff ff62 	bl	80047ac <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80048e8:	e05b      	b.n	80049a2 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80048ea:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <lcd16x2_write+0x1b0>)
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <lcd16x2_write+0x1b4>)
 80048f0:	8819      	ldrh	r1, [r3, #0]
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fe f8b4 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8004900:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <lcd16x2_write+0x1b0>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	4b31      	ldr	r3, [pc, #196]	; (80049cc <lcd16x2_write+0x1b8>)
 8004906:	8819      	ldrh	r1, [r3, #0]
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	f7fe f8a9 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <lcd16x2_write+0x1b0>)
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <lcd16x2_write+0x1bc>)
 800491c:	8819      	ldrh	r1, [r3, #0]
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	f7fe f89e 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <lcd16x2_write+0x1b0>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <lcd16x2_write+0x1c0>)
 8004932:	8819      	ldrh	r1, [r3, #0]
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	f7fe f893 	bl	8002a68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8004942:	f7ff ff33 	bl	80047ac <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <lcd16x2_write+0x1b0>)
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <lcd16x2_write+0x1b4>)
 800494c:	8819      	ldrh	r1, [r3, #0]
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	f7fe f886 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <lcd16x2_write+0x1b0>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <lcd16x2_write+0x1b8>)
 8004962:	8819      	ldrh	r1, [r3, #0]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	f7fe f87b 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <lcd16x2_write+0x1b0>)
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <lcd16x2_write+0x1bc>)
 8004978:	8819      	ldrh	r1, [r3, #0]
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	f7fe f870 	bl	8002a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <lcd16x2_write+0x1b0>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <lcd16x2_write+0x1c0>)
 800498e:	8819      	ldrh	r1, [r3, #0]
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	f7fe f865 	bl	8002a68 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800499e:	f7ff ff05 	bl	80047ac <lcd16x2_enablePulse>
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000011 	.word	0x20000011
 80049b0:	20000244 	.word	0x20000244
 80049b4:	20000248 	.word	0x20000248
 80049b8:	2000024a 	.word	0x2000024a
 80049bc:	2000024c 	.word	0x2000024c
 80049c0:	2000024e 	.word	0x2000024e
 80049c4:	20000250 	.word	0x20000250
 80049c8:	20000254 	.word	0x20000254
 80049cc:	20000256 	.word	0x20000256
 80049d0:	20000258 	.word	0x20000258
 80049d4:	2000025a 	.word	0x2000025a

080049d8 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ff00 	bl	80047e8 <lcd16x2_rs>
  lcd16x2_write(cmd);
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff12 	bl	8004814 <lcd16x2_write>
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f7ff fef0 	bl	80047e8 <lcd16x2_rs>
  lcd16x2_write(data);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff ff02 	bl	8004814 <lcd16x2_write>
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7ff fedc 	bl	80047e8 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <lcd16x2_write4+0x7c>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <lcd16x2_write4+0x80>)
 8004a36:	8819      	ldrh	r1, [r3, #0]
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	f7fe f811 	bl	8002a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <lcd16x2_write4+0x7c>)
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <lcd16x2_write4+0x84>)
 8004a4c:	8819      	ldrh	r1, [r3, #0]
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fe f806 	bl	8002a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <lcd16x2_write4+0x7c>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <lcd16x2_write4+0x88>)
 8004a62:	8819      	ldrh	r1, [r3, #0]
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f7fd fffb 	bl	8002a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <lcd16x2_write4+0x7c>)
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <lcd16x2_write4+0x8c>)
 8004a78:	8819      	ldrh	r1, [r3, #0]
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fd fff0 	bl	8002a68 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8004a88:	f7ff fe90 	bl	80047ac <lcd16x2_enablePulse>
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000250 	.word	0x20000250
 8004a98:	20000254 	.word	0x20000254
 8004a9c:	20000256 	.word	0x20000256
 8004aa0:	20000258 	.word	0x20000258
 8004aa4:	2000025a 	.word	0x2000025a

08004aa8 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8004aba:	f7ff fe23 	bl	8004704 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <lcd16x2_init_4bits+0xa8>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <lcd16x2_init_4bits+0xac>)
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8004aca:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <lcd16x2_init_4bits+0xb0>)
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8004ad0:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <lcd16x2_init_4bits+0xb4>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8004ad6:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <lcd16x2_init_4bits+0xb8>)
 8004ad8:	8b3b      	ldrh	r3, [r7, #24]
 8004ada:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8004adc:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <lcd16x2_init_4bits+0xbc>)
 8004ade:	8bbb      	ldrh	r3, [r7, #28]
 8004ae0:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8004ae2:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <lcd16x2_init_4bits+0xc0>)
 8004ae4:	8c3b      	ldrh	r3, [r7, #32]
 8004ae6:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <lcd16x2_init_4bits+0xc4>)
 8004aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aec:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <lcd16x2_init_4bits+0xc8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8004af4:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <lcd16x2_init_4bits+0xcc>)
 8004af6:	2228      	movs	r2, #40	; 0x28
 8004af8:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8004afa:	2014      	movs	r0, #20
 8004afc:	f7fd f972 	bl	8001de4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8004b00:	2003      	movs	r0, #3
 8004b02:	f7ff ff89 	bl	8004a18 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8004b06:	2005      	movs	r0, #5
 8004b08:	f7fd f96c 	bl	8001de4 <HAL_Delay>
  lcd16x2_write4(0x3);
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	f7ff ff83 	bl	8004a18 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f7fd f966 	bl	8001de4 <HAL_Delay>
  lcd16x2_write4(0x3);
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f7ff ff7d 	bl	8004a18 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7fd f960 	bl	8001de4 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8004b24:	2002      	movs	r0, #2
 8004b26:	f7ff ff77 	bl	8004a18 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f7fd f95a 	bl	8001de4 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8004b30:	2028      	movs	r0, #40	; 0x28
 8004b32:	f7ff ff51 	bl	80049d8 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8004b36:	200f      	movs	r0, #15
 8004b38:	f7ff ff4e 	bl	80049d8 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f7ff ff4b 	bl	80049d8 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8004b42:	2003      	movs	r0, #3
 8004b44:	f7fd f94e 	bl	8001de4 <HAL_Delay>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	2000023c 	.word	0x2000023c
 8004b54:	20000240 	.word	0x20000240
 8004b58:	20000242 	.word	0x20000242
 8004b5c:	20000250 	.word	0x20000250
 8004b60:	20000254 	.word	0x20000254
 8004b64:	20000256 	.word	0x20000256
 8004b68:	20000258 	.word	0x20000258
 8004b6c:	2000025a 	.word	0x2000025a
 8004b70:	20000011 	.word	0x20000011
 8004b74:	20000013 	.word	0x20000013

08004b78 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	460a      	mov	r2, r1
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b9c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff19 	bl	80049d8 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8004ba6:	e007      	b.n	8004bb8 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004bae:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff10 	bl	80049d8 <lcd16x2_writeCommand>
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f7ff ffd6 	bl	8004b78 <lcd16x2_setCursor>
}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7ff ffce 	bl	8004b78 <lcd16x2_setCursor>
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if(state)
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f043 0303 	orr.w	r3, r3, #3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004bfc:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fee8 	bl	80049d8 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8004c08:	e00b      	b.n	8004c22 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004c16:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <lcd16x2_cursorShow+0x4c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fedb 	bl	80049d8 <lcd16x2_writeCommand>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000012 	.word	0x20000012

08004c30 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7ff fecf 	bl	80049d8 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	f7fd f8d2 	bl	8001de4 <HAL_Delay>
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8004c44:	b40f      	push	{r0, r1, r2, r3}
 8004c46:	b590      	push	{r4, r7, lr}
 8004c48:	b089      	sub	sp, #36	; 0x24
 8004c4a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8004c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c50:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8004c52:	f107 0308 	add.w	r3, r7, #8
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f930 	bl	8004ec0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e00a      	b.n	8004c7c <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	3320      	adds	r3, #32
 8004c6a:	443b      	add	r3, r7
 8004c6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fec1 	bl	80049f8 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004c76:	7ffb      	ldrb	r3, [r7, #31]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	7ffc      	ldrb	r4, [r7, #31]
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb faa4 	bl	80001d0 <strlen>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d202      	bcs.n	8004c94 <lcd16x2_printf+0x50>
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	d9e8      	bls.n	8004c66 <lcd16x2_printf+0x22>
  }
}
 8004c94:	bf00      	nop
 8004c96:	3724      	adds	r7, #36	; 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c9e:	b004      	add	sp, #16
 8004ca0:	4770      	bx	lr

08004ca2 <atoi>:
 8004ca2:	220a      	movs	r2, #10
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	f000 b8eb 	b.w	8004e80 <strtol>
	...

08004cac <__errno>:
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <__errno+0x8>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000014 	.word	0x20000014

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 fd50 	bl	8005770 <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	080060cc 	.word	0x080060cc
 8004cf4:	080060cc 	.word	0x080060cc
 8004cf8:	080060cc 	.word	0x080060cc
 8004cfc:	080060d0 	.word	0x080060d0

08004d00 <memset>:
 8004d00:	4402      	add	r2, r0
 8004d02:	4603      	mov	r3, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <siprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	b500      	push	{lr}
 8004d14:	b09c      	sub	sp, #112	; 0x70
 8004d16:	ab1d      	add	r3, sp, #116	; 0x74
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d20:	4809      	ldr	r0, [pc, #36]	; (8004d48 <siprintf+0x38>)
 8004d22:	9107      	str	r1, [sp, #28]
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4909      	ldr	r1, [pc, #36]	; (8004d4c <siprintf+0x3c>)
 8004d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2c:	9105      	str	r1, [sp, #20]
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	a902      	add	r1, sp, #8
 8004d34:	f000 f92a 	bl	8004f8c <_svfiprintf_r>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	b01c      	add	sp, #112	; 0x70
 8004d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d44:	b003      	add	sp, #12
 8004d46:	4770      	bx	lr
 8004d48:	20000014 	.word	0x20000014
 8004d4c:	ffff0208 	.word	0xffff0208

08004d50 <strstr>:
 8004d50:	780a      	ldrb	r2, [r1, #0]
 8004d52:	b570      	push	{r4, r5, r6, lr}
 8004d54:	b96a      	cbnz	r2, 8004d72 <strstr+0x22>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d109      	bne.n	8004d70 <strstr+0x20>
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4605      	mov	r5, r0
 8004d60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f6      	beq.n	8004d56 <strstr+0x6>
 8004d68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004d6c:	429e      	cmp	r6, r3
 8004d6e:	d0f7      	beq.n	8004d60 <strstr+0x10>
 8004d70:	3001      	adds	r0, #1
 8004d72:	7803      	ldrb	r3, [r0, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ef      	bne.n	8004d58 <strstr+0x8>
 8004d78:	4618      	mov	r0, r3
 8004d7a:	e7ec      	b.n	8004d56 <strstr+0x6>

08004d7c <_strtol_l.constprop.0>:
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d82:	d001      	beq.n	8004d88 <_strtol_l.constprop.0+0xc>
 8004d84:	2b24      	cmp	r3, #36	; 0x24
 8004d86:	d906      	bls.n	8004d96 <_strtol_l.constprop.0+0x1a>
 8004d88:	f7ff ff90 	bl	8004cac <__errno>
 8004d8c:	2316      	movs	r3, #22
 8004d8e:	6003      	str	r3, [r0, #0]
 8004d90:	2000      	movs	r0, #0
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e7c <_strtol_l.constprop.0+0x100>
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	462e      	mov	r6, r5
 8004d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004da2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004da6:	f017 0708 	ands.w	r7, r7, #8
 8004daa:	d1f7      	bne.n	8004d9c <_strtol_l.constprop.0+0x20>
 8004dac:	2c2d      	cmp	r4, #45	; 0x2d
 8004dae:	d132      	bne.n	8004e16 <_strtol_l.constprop.0+0x9a>
 8004db0:	782c      	ldrb	r4, [r5, #0]
 8004db2:	2701      	movs	r7, #1
 8004db4:	1cb5      	adds	r5, r6, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d05b      	beq.n	8004e72 <_strtol_l.constprop.0+0xf6>
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d109      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004dbe:	2c30      	cmp	r4, #48	; 0x30
 8004dc0:	d107      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004dc2:	782c      	ldrb	r4, [r5, #0]
 8004dc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004dc8:	2c58      	cmp	r4, #88	; 0x58
 8004dca:	d14d      	bne.n	8004e68 <_strtol_l.constprop.0+0xec>
 8004dcc:	786c      	ldrb	r4, [r5, #1]
 8004dce:	2310      	movs	r3, #16
 8004dd0:	3502      	adds	r5, #2
 8004dd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dda:	f04f 0c00 	mov.w	ip, #0
 8004dde:	fbb8 f9f3 	udiv	r9, r8, r3
 8004de2:	4666      	mov	r6, ip
 8004de4:	fb03 8a19 	mls	sl, r3, r9, r8
 8004de8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004dec:	f1be 0f09 	cmp.w	lr, #9
 8004df0:	d816      	bhi.n	8004e20 <_strtol_l.constprop.0+0xa4>
 8004df2:	4674      	mov	r4, lr
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	dd24      	ble.n	8004e42 <_strtol_l.constprop.0+0xc6>
 8004df8:	f1bc 0f00 	cmp.w	ip, #0
 8004dfc:	db1e      	blt.n	8004e3c <_strtol_l.constprop.0+0xc0>
 8004dfe:	45b1      	cmp	r9, r6
 8004e00:	d31c      	bcc.n	8004e3c <_strtol_l.constprop.0+0xc0>
 8004e02:	d101      	bne.n	8004e08 <_strtol_l.constprop.0+0x8c>
 8004e04:	45a2      	cmp	sl, r4
 8004e06:	db19      	blt.n	8004e3c <_strtol_l.constprop.0+0xc0>
 8004e08:	fb06 4603 	mla	r6, r6, r3, r4
 8004e0c:	f04f 0c01 	mov.w	ip, #1
 8004e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e14:	e7e8      	b.n	8004de8 <_strtol_l.constprop.0+0x6c>
 8004e16:	2c2b      	cmp	r4, #43	; 0x2b
 8004e18:	bf04      	itt	eq
 8004e1a:	782c      	ldrbeq	r4, [r5, #0]
 8004e1c:	1cb5      	addeq	r5, r6, #2
 8004e1e:	e7ca      	b.n	8004db6 <_strtol_l.constprop.0+0x3a>
 8004e20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004e24:	f1be 0f19 	cmp.w	lr, #25
 8004e28:	d801      	bhi.n	8004e2e <_strtol_l.constprop.0+0xb2>
 8004e2a:	3c37      	subs	r4, #55	; 0x37
 8004e2c:	e7e2      	b.n	8004df4 <_strtol_l.constprop.0+0x78>
 8004e2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004e32:	f1be 0f19 	cmp.w	lr, #25
 8004e36:	d804      	bhi.n	8004e42 <_strtol_l.constprop.0+0xc6>
 8004e38:	3c57      	subs	r4, #87	; 0x57
 8004e3a:	e7db      	b.n	8004df4 <_strtol_l.constprop.0+0x78>
 8004e3c:	f04f 3cff 	mov.w	ip, #4294967295
 8004e40:	e7e6      	b.n	8004e10 <_strtol_l.constprop.0+0x94>
 8004e42:	f1bc 0f00 	cmp.w	ip, #0
 8004e46:	da05      	bge.n	8004e54 <_strtol_l.constprop.0+0xd8>
 8004e48:	2322      	movs	r3, #34	; 0x22
 8004e4a:	6003      	str	r3, [r0, #0]
 8004e4c:	4646      	mov	r6, r8
 8004e4e:	b942      	cbnz	r2, 8004e62 <_strtol_l.constprop.0+0xe6>
 8004e50:	4630      	mov	r0, r6
 8004e52:	e79e      	b.n	8004d92 <_strtol_l.constprop.0+0x16>
 8004e54:	b107      	cbz	r7, 8004e58 <_strtol_l.constprop.0+0xdc>
 8004e56:	4276      	negs	r6, r6
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d0f9      	beq.n	8004e50 <_strtol_l.constprop.0+0xd4>
 8004e5c:	f1bc 0f00 	cmp.w	ip, #0
 8004e60:	d000      	beq.n	8004e64 <_strtol_l.constprop.0+0xe8>
 8004e62:	1e69      	subs	r1, r5, #1
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	e7f3      	b.n	8004e50 <_strtol_l.constprop.0+0xd4>
 8004e68:	2430      	movs	r4, #48	; 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1b1      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	e7af      	b.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e72:	2c30      	cmp	r4, #48	; 0x30
 8004e74:	d0a5      	beq.n	8004dc2 <_strtol_l.constprop.0+0x46>
 8004e76:	230a      	movs	r3, #10
 8004e78:	e7ab      	b.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e7a:	bf00      	nop
 8004e7c:	08005f91 	.word	0x08005f91

08004e80 <strtol>:
 8004e80:	4613      	mov	r3, r2
 8004e82:	460a      	mov	r2, r1
 8004e84:	4601      	mov	r1, r0
 8004e86:	4802      	ldr	r0, [pc, #8]	; (8004e90 <strtol+0x10>)
 8004e88:	6800      	ldr	r0, [r0, #0]
 8004e8a:	f7ff bf77 	b.w	8004d7c <_strtol_l.constprop.0>
 8004e8e:	bf00      	nop
 8004e90:	20000014 	.word	0x20000014

08004e94 <_vsiprintf_r>:
 8004e94:	b500      	push	{lr}
 8004e96:	b09b      	sub	sp, #108	; 0x6c
 8004e98:	9100      	str	r1, [sp, #0]
 8004e9a:	9104      	str	r1, [sp, #16]
 8004e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea0:	9105      	str	r1, [sp, #20]
 8004ea2:	9102      	str	r1, [sp, #8]
 8004ea4:	4905      	ldr	r1, [pc, #20]	; (8004ebc <_vsiprintf_r+0x28>)
 8004ea6:	9103      	str	r1, [sp, #12]
 8004ea8:	4669      	mov	r1, sp
 8004eaa:	f000 f86f 	bl	8004f8c <_svfiprintf_r>
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	b01b      	add	sp, #108	; 0x6c
 8004eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eba:	bf00      	nop
 8004ebc:	ffff0208 	.word	0xffff0208

08004ec0 <vsiprintf>:
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <vsiprintf+0x10>)
 8004ec8:	6800      	ldr	r0, [r0, #0]
 8004eca:	f7ff bfe3 	b.w	8004e94 <_vsiprintf_r>
 8004ece:	bf00      	nop
 8004ed0:	20000014 	.word	0x20000014

08004ed4 <__ssputs_r>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	688e      	ldr	r6, [r1, #8]
 8004eda:	429e      	cmp	r6, r3
 8004edc:	4682      	mov	sl, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	d838      	bhi.n	8004f58 <__ssputs_r+0x84>
 8004ee6:	898a      	ldrh	r2, [r1, #12]
 8004ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004eec:	d032      	beq.n	8004f54 <__ssputs_r+0x80>
 8004eee:	6825      	ldr	r5, [r4, #0]
 8004ef0:	6909      	ldr	r1, [r1, #16]
 8004ef2:	eba5 0901 	sub.w	r9, r5, r1
 8004ef6:	6965      	ldr	r5, [r4, #20]
 8004ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f00:	3301      	adds	r3, #1
 8004f02:	444b      	add	r3, r9
 8004f04:	106d      	asrs	r5, r5, #1
 8004f06:	429d      	cmp	r5, r3
 8004f08:	bf38      	it	cc
 8004f0a:	461d      	movcc	r5, r3
 8004f0c:	0553      	lsls	r3, r2, #21
 8004f0e:	d531      	bpl.n	8004f74 <__ssputs_r+0xa0>
 8004f10:	4629      	mov	r1, r5
 8004f12:	f000 fb63 	bl	80055dc <_malloc_r>
 8004f16:	4606      	mov	r6, r0
 8004f18:	b950      	cbnz	r0, 8004f30 <__ssputs_r+0x5c>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	f8ca 3000 	str.w	r3, [sl]
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	6921      	ldr	r1, [r4, #16]
 8004f32:	464a      	mov	r2, r9
 8004f34:	f000 fabe 	bl	80054b4 <memcpy>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	6126      	str	r6, [r4, #16]
 8004f46:	6165      	str	r5, [r4, #20]
 8004f48:	444e      	add	r6, r9
 8004f4a:	eba5 0509 	sub.w	r5, r5, r9
 8004f4e:	6026      	str	r6, [r4, #0]
 8004f50:	60a5      	str	r5, [r4, #8]
 8004f52:	463e      	mov	r6, r7
 8004f54:	42be      	cmp	r6, r7
 8004f56:	d900      	bls.n	8004f5a <__ssputs_r+0x86>
 8004f58:	463e      	mov	r6, r7
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	4641      	mov	r1, r8
 8004f60:	f000 fab6 	bl	80054d0 <memmove>
 8004f64:	68a3      	ldr	r3, [r4, #8]
 8004f66:	1b9b      	subs	r3, r3, r6
 8004f68:	60a3      	str	r3, [r4, #8]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	4433      	add	r3, r6
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	2000      	movs	r0, #0
 8004f72:	e7db      	b.n	8004f2c <__ssputs_r+0x58>
 8004f74:	462a      	mov	r2, r5
 8004f76:	f000 fba5 	bl	80056c4 <_realloc_r>
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1e1      	bne.n	8004f44 <__ssputs_r+0x70>
 8004f80:	6921      	ldr	r1, [r4, #16]
 8004f82:	4650      	mov	r0, sl
 8004f84:	f000 fabe 	bl	8005504 <_free_r>
 8004f88:	e7c7      	b.n	8004f1a <__ssputs_r+0x46>
	...

08004f8c <_svfiprintf_r>:
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	4698      	mov	r8, r3
 8004f92:	898b      	ldrh	r3, [r1, #12]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	b09d      	sub	sp, #116	; 0x74
 8004f98:	4607      	mov	r7, r0
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	4614      	mov	r4, r2
 8004f9e:	d50e      	bpl.n	8004fbe <_svfiprintf_r+0x32>
 8004fa0:	690b      	ldr	r3, [r1, #16]
 8004fa2:	b963      	cbnz	r3, 8004fbe <_svfiprintf_r+0x32>
 8004fa4:	2140      	movs	r1, #64	; 0x40
 8004fa6:	f000 fb19 	bl	80055dc <_malloc_r>
 8004faa:	6028      	str	r0, [r5, #0]
 8004fac:	6128      	str	r0, [r5, #16]
 8004fae:	b920      	cbnz	r0, 8004fba <_svfiprintf_r+0x2e>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	e0d1      	b.n	800515e <_svfiprintf_r+0x1d2>
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	616b      	str	r3, [r5, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fcc:	2330      	movs	r3, #48	; 0x30
 8004fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005178 <_svfiprintf_r+0x1ec>
 8004fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fd6:	f04f 0901 	mov.w	r9, #1
 8004fda:	4623      	mov	r3, r4
 8004fdc:	469a      	mov	sl, r3
 8004fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fe2:	b10a      	cbz	r2, 8004fe8 <_svfiprintf_r+0x5c>
 8004fe4:	2a25      	cmp	r2, #37	; 0x25
 8004fe6:	d1f9      	bne.n	8004fdc <_svfiprintf_r+0x50>
 8004fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8004fec:	d00b      	beq.n	8005006 <_svfiprintf_r+0x7a>
 8004fee:	465b      	mov	r3, fp
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f7ff ff6d 	bl	8004ed4 <__ssputs_r>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f000 80aa 	beq.w	8005154 <_svfiprintf_r+0x1c8>
 8005000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005002:	445a      	add	r2, fp
 8005004:	9209      	str	r2, [sp, #36]	; 0x24
 8005006:	f89a 3000 	ldrb.w	r3, [sl]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80a2 	beq.w	8005154 <_svfiprintf_r+0x1c8>
 8005010:	2300      	movs	r3, #0
 8005012:	f04f 32ff 	mov.w	r2, #4294967295
 8005016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800501a:	f10a 0a01 	add.w	sl, sl, #1
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005026:	931a      	str	r3, [sp, #104]	; 0x68
 8005028:	4654      	mov	r4, sl
 800502a:	2205      	movs	r2, #5
 800502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005030:	4851      	ldr	r0, [pc, #324]	; (8005178 <_svfiprintf_r+0x1ec>)
 8005032:	f7fb f8d5 	bl	80001e0 <memchr>
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	b9d8      	cbnz	r0, 8005072 <_svfiprintf_r+0xe6>
 800503a:	06d0      	lsls	r0, r2, #27
 800503c:	bf44      	itt	mi
 800503e:	2320      	movmi	r3, #32
 8005040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005044:	0711      	lsls	r1, r2, #28
 8005046:	bf44      	itt	mi
 8005048:	232b      	movmi	r3, #43	; 0x2b
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504e:	f89a 3000 	ldrb.w	r3, [sl]
 8005052:	2b2a      	cmp	r3, #42	; 0x2a
 8005054:	d015      	beq.n	8005082 <_svfiprintf_r+0xf6>
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	4654      	mov	r4, sl
 800505a:	2000      	movs	r0, #0
 800505c:	f04f 0c0a 	mov.w	ip, #10
 8005060:	4621      	mov	r1, r4
 8005062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005066:	3b30      	subs	r3, #48	; 0x30
 8005068:	2b09      	cmp	r3, #9
 800506a:	d94e      	bls.n	800510a <_svfiprintf_r+0x17e>
 800506c:	b1b0      	cbz	r0, 800509c <_svfiprintf_r+0x110>
 800506e:	9207      	str	r2, [sp, #28]
 8005070:	e014      	b.n	800509c <_svfiprintf_r+0x110>
 8005072:	eba0 0308 	sub.w	r3, r0, r8
 8005076:	fa09 f303 	lsl.w	r3, r9, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	46a2      	mov	sl, r4
 8005080:	e7d2      	b.n	8005028 <_svfiprintf_r+0x9c>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9103      	str	r1, [sp, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbb      	ittet	lt
 800508e:	425b      	neglt	r3, r3
 8005090:	f042 0202 	orrlt.w	r2, r2, #2
 8005094:	9307      	strge	r3, [sp, #28]
 8005096:	9307      	strlt	r3, [sp, #28]
 8005098:	bfb8      	it	lt
 800509a:	9204      	strlt	r2, [sp, #16]
 800509c:	7823      	ldrb	r3, [r4, #0]
 800509e:	2b2e      	cmp	r3, #46	; 0x2e
 80050a0:	d10c      	bne.n	80050bc <_svfiprintf_r+0x130>
 80050a2:	7863      	ldrb	r3, [r4, #1]
 80050a4:	2b2a      	cmp	r3, #42	; 0x2a
 80050a6:	d135      	bne.n	8005114 <_svfiprintf_r+0x188>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9203      	str	r2, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfb8      	it	lt
 80050b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b8:	3402      	adds	r4, #2
 80050ba:	9305      	str	r3, [sp, #20]
 80050bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005188 <_svfiprintf_r+0x1fc>
 80050c0:	7821      	ldrb	r1, [r4, #0]
 80050c2:	2203      	movs	r2, #3
 80050c4:	4650      	mov	r0, sl
 80050c6:	f7fb f88b 	bl	80001e0 <memchr>
 80050ca:	b140      	cbz	r0, 80050de <_svfiprintf_r+0x152>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	eba0 000a 	sub.w	r0, r0, sl
 80050d2:	fa03 f000 	lsl.w	r0, r3, r0
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	4303      	orrs	r3, r0
 80050da:	3401      	adds	r4, #1
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e2:	4826      	ldr	r0, [pc, #152]	; (800517c <_svfiprintf_r+0x1f0>)
 80050e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e8:	2206      	movs	r2, #6
 80050ea:	f7fb f879 	bl	80001e0 <memchr>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d038      	beq.n	8005164 <_svfiprintf_r+0x1d8>
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <_svfiprintf_r+0x1f4>)
 80050f4:	bb1b      	cbnz	r3, 800513e <_svfiprintf_r+0x1b2>
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	3307      	adds	r3, #7
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	3308      	adds	r3, #8
 8005100:	9303      	str	r3, [sp, #12]
 8005102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005104:	4433      	add	r3, r6
 8005106:	9309      	str	r3, [sp, #36]	; 0x24
 8005108:	e767      	b.n	8004fda <_svfiprintf_r+0x4e>
 800510a:	fb0c 3202 	mla	r2, ip, r2, r3
 800510e:	460c      	mov	r4, r1
 8005110:	2001      	movs	r0, #1
 8005112:	e7a5      	b.n	8005060 <_svfiprintf_r+0xd4>
 8005114:	2300      	movs	r3, #0
 8005116:	3401      	adds	r4, #1
 8005118:	9305      	str	r3, [sp, #20]
 800511a:	4619      	mov	r1, r3
 800511c:	f04f 0c0a 	mov.w	ip, #10
 8005120:	4620      	mov	r0, r4
 8005122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005126:	3a30      	subs	r2, #48	; 0x30
 8005128:	2a09      	cmp	r2, #9
 800512a:	d903      	bls.n	8005134 <_svfiprintf_r+0x1a8>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0c5      	beq.n	80050bc <_svfiprintf_r+0x130>
 8005130:	9105      	str	r1, [sp, #20]
 8005132:	e7c3      	b.n	80050bc <_svfiprintf_r+0x130>
 8005134:	fb0c 2101 	mla	r1, ip, r1, r2
 8005138:	4604      	mov	r4, r0
 800513a:	2301      	movs	r3, #1
 800513c:	e7f0      	b.n	8005120 <_svfiprintf_r+0x194>
 800513e:	ab03      	add	r3, sp, #12
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	462a      	mov	r2, r5
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <_svfiprintf_r+0x1f8>)
 8005146:	a904      	add	r1, sp, #16
 8005148:	4638      	mov	r0, r7
 800514a:	f3af 8000 	nop.w
 800514e:	1c42      	adds	r2, r0, #1
 8005150:	4606      	mov	r6, r0
 8005152:	d1d6      	bne.n	8005102 <_svfiprintf_r+0x176>
 8005154:	89ab      	ldrh	r3, [r5, #12]
 8005156:	065b      	lsls	r3, r3, #25
 8005158:	f53f af2c 	bmi.w	8004fb4 <_svfiprintf_r+0x28>
 800515c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800515e:	b01d      	add	sp, #116	; 0x74
 8005160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <_svfiprintf_r+0x1f8>)
 800516c:	a904      	add	r1, sp, #16
 800516e:	4638      	mov	r0, r7
 8005170:	f000 f87a 	bl	8005268 <_printf_i>
 8005174:	e7eb      	b.n	800514e <_svfiprintf_r+0x1c2>
 8005176:	bf00      	nop
 8005178:	08006091 	.word	0x08006091
 800517c:	0800609b 	.word	0x0800609b
 8005180:	00000000 	.word	0x00000000
 8005184:	08004ed5 	.word	0x08004ed5
 8005188:	08006097 	.word	0x08006097

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4616      	mov	r6, r2
 8005192:	4699      	mov	r9, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a8:	4607      	mov	r7, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b10a      	cbz	r2, 80051b2 <_printf_common+0x26>
 80051ae:	3301      	adds	r3, #1
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0699      	lsls	r1, r3, #26
 80051b6:	bf42      	ittt	mi
 80051b8:	6833      	ldrmi	r3, [r6, #0]
 80051ba:	3302      	addmi	r3, #2
 80051bc:	6033      	strmi	r3, [r6, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	f015 0506 	ands.w	r5, r5, #6
 80051c4:	d106      	bne.n	80051d4 <_printf_common+0x48>
 80051c6:	f104 0a19 	add.w	sl, r4, #25
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	6832      	ldr	r2, [r6, #0]
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dc26      	bgt.n	8005222 <_printf_common+0x96>
 80051d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d8:	1e13      	subs	r3, r2, #0
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	bf18      	it	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	0692      	lsls	r2, r2, #26
 80051e2:	d42b      	bmi.n	800523c <_printf_common+0xb0>
 80051e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d01e      	beq.n	8005230 <_printf_common+0xa4>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	68e5      	ldr	r5, [r4, #12]
 80051f6:	6832      	ldr	r2, [r6, #0]
 80051f8:	f003 0306 	and.w	r3, r3, #6
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	bf08      	it	eq
 8005200:	1aad      	subeq	r5, r5, r2
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	bf0c      	ite	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	2500      	movne	r5, #0
 800520e:	4293      	cmp	r3, r2
 8005210:	bfc4      	itt	gt
 8005212:	1a9b      	subgt	r3, r3, r2
 8005214:	18ed      	addgt	r5, r5, r3
 8005216:	2600      	movs	r6, #0
 8005218:	341a      	adds	r4, #26
 800521a:	42b5      	cmp	r5, r6
 800521c:	d11a      	bne.n	8005254 <_printf_common+0xc8>
 800521e:	2000      	movs	r0, #0
 8005220:	e008      	b.n	8005234 <_printf_common+0xa8>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4649      	mov	r1, r9
 8005228:	4638      	mov	r0, r7
 800522a:	47c0      	blx	r8
 800522c:	3001      	adds	r0, #1
 800522e:	d103      	bne.n	8005238 <_printf_common+0xac>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	3501      	adds	r5, #1
 800523a:	e7c6      	b.n	80051ca <_printf_common+0x3e>
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	2030      	movs	r0, #48	; 0x30
 8005242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005246:	4422      	add	r2, r4
 8005248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005250:	3302      	adds	r3, #2
 8005252:	e7c7      	b.n	80051e4 <_printf_common+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	4622      	mov	r2, r4
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d0e6      	beq.n	8005230 <_printf_common+0xa4>
 8005262:	3601      	adds	r6, #1
 8005264:	e7d9      	b.n	800521a <_printf_common+0x8e>
	...

08005268 <_printf_i>:
 8005268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	7e0f      	ldrb	r7, [r1, #24]
 800526e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005270:	2f78      	cmp	r7, #120	; 0x78
 8005272:	4691      	mov	r9, r2
 8005274:	4680      	mov	r8, r0
 8005276:	460c      	mov	r4, r1
 8005278:	469a      	mov	sl, r3
 800527a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800527e:	d807      	bhi.n	8005290 <_printf_i+0x28>
 8005280:	2f62      	cmp	r7, #98	; 0x62
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x32>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f000 80d8 	beq.w	800543a <_printf_i+0x1d2>
 800528a:	2f58      	cmp	r7, #88	; 0x58
 800528c:	f000 80a3 	beq.w	80053d6 <_printf_i+0x16e>
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005298:	e03a      	b.n	8005310 <_printf_i+0xa8>
 800529a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529e:	2b15      	cmp	r3, #21
 80052a0:	d8f6      	bhi.n	8005290 <_printf_i+0x28>
 80052a2:	a101      	add	r1, pc, #4	; (adr r1, 80052a8 <_printf_i+0x40>)
 80052a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005291 	.word	0x08005291
 80052b4:	08005291 	.word	0x08005291
 80052b8:	08005291 	.word	0x08005291
 80052bc:	08005291 	.word	0x08005291
 80052c0:	08005315 	.word	0x08005315
 80052c4:	08005291 	.word	0x08005291
 80052c8:	08005291 	.word	0x08005291
 80052cc:	08005291 	.word	0x08005291
 80052d0:	08005291 	.word	0x08005291
 80052d4:	08005421 	.word	0x08005421
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005403 	.word	0x08005403
 80052e0:	08005291 	.word	0x08005291
 80052e4:	08005291 	.word	0x08005291
 80052e8:	08005443 	.word	0x08005443
 80052ec:	08005291 	.word	0x08005291
 80052f0:	08005345 	.word	0x08005345
 80052f4:	08005291 	.word	0x08005291
 80052f8:	08005291 	.word	0x08005291
 80052fc:	0800540b 	.word	0x0800540b
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800530c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005310:	2301      	movs	r3, #1
 8005312:	e0a3      	b.n	800545c <_printf_i+0x1f4>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	6829      	ldr	r1, [r5, #0]
 8005318:	0606      	lsls	r6, r0, #24
 800531a:	f101 0304 	add.w	r3, r1, #4
 800531e:	d50a      	bpl.n	8005336 <_printf_i+0xce>
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	2e00      	cmp	r6, #0
 8005326:	da03      	bge.n	8005330 <_printf_i+0xc8>
 8005328:	232d      	movs	r3, #45	; 0x2d
 800532a:	4276      	negs	r6, r6
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	485e      	ldr	r0, [pc, #376]	; (80054ac <_printf_i+0x244>)
 8005332:	230a      	movs	r3, #10
 8005334:	e019      	b.n	800536a <_printf_i+0x102>
 8005336:	680e      	ldr	r6, [r1, #0]
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800533e:	bf18      	it	ne
 8005340:	b236      	sxthne	r6, r6
 8005342:	e7ef      	b.n	8005324 <_printf_i+0xbc>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	6029      	str	r1, [r5, #0]
 800534c:	0601      	lsls	r1, r0, #24
 800534e:	d501      	bpl.n	8005354 <_printf_i+0xec>
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0xf2>
 8005354:	0646      	lsls	r6, r0, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0xe8>
 8005358:	881e      	ldrh	r6, [r3, #0]
 800535a:	4854      	ldr	r0, [pc, #336]	; (80054ac <_printf_i+0x244>)
 800535c:	2f6f      	cmp	r7, #111	; 0x6f
 800535e:	bf0c      	ite	eq
 8005360:	2308      	moveq	r3, #8
 8005362:	230a      	movne	r3, #10
 8005364:	2100      	movs	r1, #0
 8005366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800536a:	6865      	ldr	r5, [r4, #4]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	2d00      	cmp	r5, #0
 8005370:	bfa2      	ittt	ge
 8005372:	6821      	ldrge	r1, [r4, #0]
 8005374:	f021 0104 	bicge.w	r1, r1, #4
 8005378:	6021      	strge	r1, [r4, #0]
 800537a:	b90e      	cbnz	r6, 8005380 <_printf_i+0x118>
 800537c:	2d00      	cmp	r5, #0
 800537e:	d04d      	beq.n	800541c <_printf_i+0x1b4>
 8005380:	4615      	mov	r5, r2
 8005382:	fbb6 f1f3 	udiv	r1, r6, r3
 8005386:	fb03 6711 	mls	r7, r3, r1, r6
 800538a:	5dc7      	ldrb	r7, [r0, r7]
 800538c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005390:	4637      	mov	r7, r6
 8005392:	42bb      	cmp	r3, r7
 8005394:	460e      	mov	r6, r1
 8005396:	d9f4      	bls.n	8005382 <_printf_i+0x11a>
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <_printf_i+0x14c>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07de      	lsls	r6, r3, #31
 80053a0:	d508      	bpl.n	80053b4 <_printf_i+0x14c>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	4299      	cmp	r1, r3
 80053a8:	bfde      	ittt	le
 80053aa:	2330      	movle	r3, #48	; 0x30
 80053ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053b4:	1b52      	subs	r2, r2, r5
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	f8cd a000 	str.w	sl, [sp]
 80053bc:	464b      	mov	r3, r9
 80053be:	aa03      	add	r2, sp, #12
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fee2 	bl	800518c <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d14c      	bne.n	8005466 <_printf_i+0x1fe>
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	b004      	add	sp, #16
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	4835      	ldr	r0, [pc, #212]	; (80054ac <_printf_i+0x244>)
 80053d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053dc:	6829      	ldr	r1, [r5, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053e4:	6029      	str	r1, [r5, #0]
 80053e6:	061d      	lsls	r5, r3, #24
 80053e8:	d514      	bpl.n	8005414 <_printf_i+0x1ac>
 80053ea:	07df      	lsls	r7, r3, #31
 80053ec:	bf44      	itt	mi
 80053ee:	f043 0320 	orrmi.w	r3, r3, #32
 80053f2:	6023      	strmi	r3, [r4, #0]
 80053f4:	b91e      	cbnz	r6, 80053fe <_printf_i+0x196>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f023 0320 	bic.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	2310      	movs	r3, #16
 8005400:	e7b0      	b.n	8005364 <_printf_i+0xfc>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f043 0320 	orr.w	r3, r3, #32
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2378      	movs	r3, #120	; 0x78
 800540c:	4828      	ldr	r0, [pc, #160]	; (80054b0 <_printf_i+0x248>)
 800540e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005412:	e7e3      	b.n	80053dc <_printf_i+0x174>
 8005414:	0659      	lsls	r1, r3, #25
 8005416:	bf48      	it	mi
 8005418:	b2b6      	uxthmi	r6, r6
 800541a:	e7e6      	b.n	80053ea <_printf_i+0x182>
 800541c:	4615      	mov	r5, r2
 800541e:	e7bb      	b.n	8005398 <_printf_i+0x130>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	6826      	ldr	r6, [r4, #0]
 8005424:	6961      	ldr	r1, [r4, #20]
 8005426:	1d18      	adds	r0, r3, #4
 8005428:	6028      	str	r0, [r5, #0]
 800542a:	0635      	lsls	r5, r6, #24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	d501      	bpl.n	8005434 <_printf_i+0x1cc>
 8005430:	6019      	str	r1, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0x1d2>
 8005434:	0670      	lsls	r0, r6, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0x1c8>
 8005438:	8019      	strh	r1, [r3, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	4615      	mov	r5, r2
 8005440:	e7ba      	b.n	80053b8 <_printf_i+0x150>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	681d      	ldr	r5, [r3, #0]
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	2100      	movs	r1, #0
 800544e:	4628      	mov	r0, r5
 8005450:	f7fa fec6 	bl	80001e0 <memchr>
 8005454:	b108      	cbz	r0, 800545a <_printf_i+0x1f2>
 8005456:	1b40      	subs	r0, r0, r5
 8005458:	6060      	str	r0, [r4, #4]
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	2300      	movs	r3, #0
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005464:	e7a8      	b.n	80053b8 <_printf_i+0x150>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	462a      	mov	r2, r5
 800546a:	4649      	mov	r1, r9
 800546c:	4640      	mov	r0, r8
 800546e:	47d0      	blx	sl
 8005470:	3001      	adds	r0, #1
 8005472:	d0ab      	beq.n	80053cc <_printf_i+0x164>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	d413      	bmi.n	80054a2 <_printf_i+0x23a>
 800547a:	68e0      	ldr	r0, [r4, #12]
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	4298      	cmp	r0, r3
 8005480:	bfb8      	it	lt
 8005482:	4618      	movlt	r0, r3
 8005484:	e7a4      	b.n	80053d0 <_printf_i+0x168>
 8005486:	2301      	movs	r3, #1
 8005488:	4632      	mov	r2, r6
 800548a:	4649      	mov	r1, r9
 800548c:	4640      	mov	r0, r8
 800548e:	47d0      	blx	sl
 8005490:	3001      	adds	r0, #1
 8005492:	d09b      	beq.n	80053cc <_printf_i+0x164>
 8005494:	3501      	adds	r5, #1
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	1a5b      	subs	r3, r3, r1
 800549c:	42ab      	cmp	r3, r5
 800549e:	dcf2      	bgt.n	8005486 <_printf_i+0x21e>
 80054a0:	e7eb      	b.n	800547a <_printf_i+0x212>
 80054a2:	2500      	movs	r5, #0
 80054a4:	f104 0619 	add.w	r6, r4, #25
 80054a8:	e7f5      	b.n	8005496 <_printf_i+0x22e>
 80054aa:	bf00      	nop
 80054ac:	080060a2 	.word	0x080060a2
 80054b0:	080060b3 	.word	0x080060b3

080054b4 <memcpy>:
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054bc:	d100      	bne.n	80054c0 <memcpy+0xc>
 80054be:	4770      	bx	lr
 80054c0:	b510      	push	{r4, lr}
 80054c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d1f9      	bne.n	80054c2 <memcpy+0xe>
 80054ce:	bd10      	pop	{r4, pc}

080054d0 <memmove>:
 80054d0:	4288      	cmp	r0, r1
 80054d2:	b510      	push	{r4, lr}
 80054d4:	eb01 0402 	add.w	r4, r1, r2
 80054d8:	d902      	bls.n	80054e0 <memmove+0x10>
 80054da:	4284      	cmp	r4, r0
 80054dc:	4623      	mov	r3, r4
 80054de:	d807      	bhi.n	80054f0 <memmove+0x20>
 80054e0:	1e43      	subs	r3, r0, #1
 80054e2:	42a1      	cmp	r1, r4
 80054e4:	d008      	beq.n	80054f8 <memmove+0x28>
 80054e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ee:	e7f8      	b.n	80054e2 <memmove+0x12>
 80054f0:	4402      	add	r2, r0
 80054f2:	4601      	mov	r1, r0
 80054f4:	428a      	cmp	r2, r1
 80054f6:	d100      	bne.n	80054fa <memmove+0x2a>
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005502:	e7f7      	b.n	80054f4 <memmove+0x24>

08005504 <_free_r>:
 8005504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005506:	2900      	cmp	r1, #0
 8005508:	d044      	beq.n	8005594 <_free_r+0x90>
 800550a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800550e:	9001      	str	r0, [sp, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f1a1 0404 	sub.w	r4, r1, #4
 8005516:	bfb8      	it	lt
 8005518:	18e4      	addlt	r4, r4, r3
 800551a:	f000 f913 	bl	8005744 <__malloc_lock>
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <_free_r+0x94>)
 8005520:	9801      	ldr	r0, [sp, #4]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x30>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	b003      	add	sp, #12
 800552c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005530:	f000 b90e 	b.w	8005750 <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x46>
 8005538:	6825      	ldr	r5, [r4, #0]
 800553a:	1961      	adds	r1, r4, r5
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1949      	addeq	r1, r1, r5
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x22>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x50>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x46>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1855      	adds	r5, r2, r1
 8005558:	42a5      	cmp	r5, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x70>
 800555c:	6824      	ldr	r4, [r4, #0]
 800555e:	4421      	add	r1, r4
 8005560:	1854      	adds	r4, r2, r1
 8005562:	42a3      	cmp	r3, r4
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x26>
 8005568:	681c      	ldr	r4, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6053      	str	r3, [r2, #4]
 800556e:	4421      	add	r1, r4
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	e7da      	b.n	800552a <_free_r+0x26>
 8005574:	d902      	bls.n	800557c <_free_r+0x78>
 8005576:	230c      	movs	r3, #12
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x26>
 800557c:	6825      	ldr	r5, [r4, #0]
 800557e:	1961      	adds	r1, r4, r5
 8005580:	428b      	cmp	r3, r1
 8005582:	bf04      	itt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	6063      	str	r3, [r4, #4]
 800558a:	bf04      	itt	eq
 800558c:	1949      	addeq	r1, r1, r5
 800558e:	6021      	streq	r1, [r4, #0]
 8005590:	6054      	str	r4, [r2, #4]
 8005592:	e7ca      	b.n	800552a <_free_r+0x26>
 8005594:	b003      	add	sp, #12
 8005596:	bd30      	pop	{r4, r5, pc}
 8005598:	2000025c 	.word	0x2000025c

0800559c <sbrk_aligned>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4e0e      	ldr	r6, [pc, #56]	; (80055d8 <sbrk_aligned+0x3c>)
 80055a0:	460c      	mov	r4, r1
 80055a2:	6831      	ldr	r1, [r6, #0]
 80055a4:	4605      	mov	r5, r0
 80055a6:	b911      	cbnz	r1, 80055ae <sbrk_aligned+0x12>
 80055a8:	f000 f8bc 	bl	8005724 <_sbrk_r>
 80055ac:	6030      	str	r0, [r6, #0]
 80055ae:	4621      	mov	r1, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 f8b7 	bl	8005724 <_sbrk_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d00a      	beq.n	80055d0 <sbrk_aligned+0x34>
 80055ba:	1cc4      	adds	r4, r0, #3
 80055bc:	f024 0403 	bic.w	r4, r4, #3
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d007      	beq.n	80055d4 <sbrk_aligned+0x38>
 80055c4:	1a21      	subs	r1, r4, r0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f8ac 	bl	8005724 <_sbrk_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d101      	bne.n	80055d4 <sbrk_aligned+0x38>
 80055d0:	f04f 34ff 	mov.w	r4, #4294967295
 80055d4:	4620      	mov	r0, r4
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	20000260 	.word	0x20000260

080055dc <_malloc_r>:
 80055dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e0:	1ccd      	adds	r5, r1, #3
 80055e2:	f025 0503 	bic.w	r5, r5, #3
 80055e6:	3508      	adds	r5, #8
 80055e8:	2d0c      	cmp	r5, #12
 80055ea:	bf38      	it	cc
 80055ec:	250c      	movcc	r5, #12
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	4607      	mov	r7, r0
 80055f2:	db01      	blt.n	80055f8 <_malloc_r+0x1c>
 80055f4:	42a9      	cmp	r1, r5
 80055f6:	d905      	bls.n	8005604 <_malloc_r+0x28>
 80055f8:	230c      	movs	r3, #12
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	2600      	movs	r6, #0
 80055fe:	4630      	mov	r0, r6
 8005600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005604:	4e2e      	ldr	r6, [pc, #184]	; (80056c0 <_malloc_r+0xe4>)
 8005606:	f000 f89d 	bl	8005744 <__malloc_lock>
 800560a:	6833      	ldr	r3, [r6, #0]
 800560c:	461c      	mov	r4, r3
 800560e:	bb34      	cbnz	r4, 800565e <_malloc_r+0x82>
 8005610:	4629      	mov	r1, r5
 8005612:	4638      	mov	r0, r7
 8005614:	f7ff ffc2 	bl	800559c <sbrk_aligned>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	4604      	mov	r4, r0
 800561c:	d14d      	bne.n	80056ba <_malloc_r+0xde>
 800561e:	6834      	ldr	r4, [r6, #0]
 8005620:	4626      	mov	r6, r4
 8005622:	2e00      	cmp	r6, #0
 8005624:	d140      	bne.n	80056a8 <_malloc_r+0xcc>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	4631      	mov	r1, r6
 800562a:	4638      	mov	r0, r7
 800562c:	eb04 0803 	add.w	r8, r4, r3
 8005630:	f000 f878 	bl	8005724 <_sbrk_r>
 8005634:	4580      	cmp	r8, r0
 8005636:	d13a      	bne.n	80056ae <_malloc_r+0xd2>
 8005638:	6821      	ldr	r1, [r4, #0]
 800563a:	3503      	adds	r5, #3
 800563c:	1a6d      	subs	r5, r5, r1
 800563e:	f025 0503 	bic.w	r5, r5, #3
 8005642:	3508      	adds	r5, #8
 8005644:	2d0c      	cmp	r5, #12
 8005646:	bf38      	it	cc
 8005648:	250c      	movcc	r5, #12
 800564a:	4629      	mov	r1, r5
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff ffa5 	bl	800559c <sbrk_aligned>
 8005652:	3001      	adds	r0, #1
 8005654:	d02b      	beq.n	80056ae <_malloc_r+0xd2>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	442b      	add	r3, r5
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	e00e      	b.n	800567c <_malloc_r+0xa0>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	1b52      	subs	r2, r2, r5
 8005662:	d41e      	bmi.n	80056a2 <_malloc_r+0xc6>
 8005664:	2a0b      	cmp	r2, #11
 8005666:	d916      	bls.n	8005696 <_malloc_r+0xba>
 8005668:	1961      	adds	r1, r4, r5
 800566a:	42a3      	cmp	r3, r4
 800566c:	6025      	str	r5, [r4, #0]
 800566e:	bf18      	it	ne
 8005670:	6059      	strne	r1, [r3, #4]
 8005672:	6863      	ldr	r3, [r4, #4]
 8005674:	bf08      	it	eq
 8005676:	6031      	streq	r1, [r6, #0]
 8005678:	5162      	str	r2, [r4, r5]
 800567a:	604b      	str	r3, [r1, #4]
 800567c:	4638      	mov	r0, r7
 800567e:	f104 060b 	add.w	r6, r4, #11
 8005682:	f000 f865 	bl	8005750 <__malloc_unlock>
 8005686:	f026 0607 	bic.w	r6, r6, #7
 800568a:	1d23      	adds	r3, r4, #4
 800568c:	1af2      	subs	r2, r6, r3
 800568e:	d0b6      	beq.n	80055fe <_malloc_r+0x22>
 8005690:	1b9b      	subs	r3, r3, r6
 8005692:	50a3      	str	r3, [r4, r2]
 8005694:	e7b3      	b.n	80055fe <_malloc_r+0x22>
 8005696:	6862      	ldr	r2, [r4, #4]
 8005698:	42a3      	cmp	r3, r4
 800569a:	bf0c      	ite	eq
 800569c:	6032      	streq	r2, [r6, #0]
 800569e:	605a      	strne	r2, [r3, #4]
 80056a0:	e7ec      	b.n	800567c <_malloc_r+0xa0>
 80056a2:	4623      	mov	r3, r4
 80056a4:	6864      	ldr	r4, [r4, #4]
 80056a6:	e7b2      	b.n	800560e <_malloc_r+0x32>
 80056a8:	4634      	mov	r4, r6
 80056aa:	6876      	ldr	r6, [r6, #4]
 80056ac:	e7b9      	b.n	8005622 <_malloc_r+0x46>
 80056ae:	230c      	movs	r3, #12
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4638      	mov	r0, r7
 80056b4:	f000 f84c 	bl	8005750 <__malloc_unlock>
 80056b8:	e7a1      	b.n	80055fe <_malloc_r+0x22>
 80056ba:	6025      	str	r5, [r4, #0]
 80056bc:	e7de      	b.n	800567c <_malloc_r+0xa0>
 80056be:	bf00      	nop
 80056c0:	2000025c 	.word	0x2000025c

080056c4 <_realloc_r>:
 80056c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c8:	4680      	mov	r8, r0
 80056ca:	4614      	mov	r4, r2
 80056cc:	460e      	mov	r6, r1
 80056ce:	b921      	cbnz	r1, 80056da <_realloc_r+0x16>
 80056d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	4611      	mov	r1, r2
 80056d6:	f7ff bf81 	b.w	80055dc <_malloc_r>
 80056da:	b92a      	cbnz	r2, 80056e8 <_realloc_r+0x24>
 80056dc:	f7ff ff12 	bl	8005504 <_free_r>
 80056e0:	4625      	mov	r5, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e8:	f000 f838 	bl	800575c <_malloc_usable_size_r>
 80056ec:	4284      	cmp	r4, r0
 80056ee:	4607      	mov	r7, r0
 80056f0:	d802      	bhi.n	80056f8 <_realloc_r+0x34>
 80056f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056f6:	d812      	bhi.n	800571e <_realloc_r+0x5a>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4640      	mov	r0, r8
 80056fc:	f7ff ff6e 	bl	80055dc <_malloc_r>
 8005700:	4605      	mov	r5, r0
 8005702:	2800      	cmp	r0, #0
 8005704:	d0ed      	beq.n	80056e2 <_realloc_r+0x1e>
 8005706:	42bc      	cmp	r4, r7
 8005708:	4622      	mov	r2, r4
 800570a:	4631      	mov	r1, r6
 800570c:	bf28      	it	cs
 800570e:	463a      	movcs	r2, r7
 8005710:	f7ff fed0 	bl	80054b4 <memcpy>
 8005714:	4631      	mov	r1, r6
 8005716:	4640      	mov	r0, r8
 8005718:	f7ff fef4 	bl	8005504 <_free_r>
 800571c:	e7e1      	b.n	80056e2 <_realloc_r+0x1e>
 800571e:	4635      	mov	r5, r6
 8005720:	e7df      	b.n	80056e2 <_realloc_r+0x1e>
	...

08005724 <_sbrk_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d06      	ldr	r5, [pc, #24]	; (8005740 <_sbrk_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fc fa74 	bl	8001c1c <_sbrk>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_sbrk_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_sbrk_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000264 	.word	0x20000264

08005744 <__malloc_lock>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__malloc_lock+0x8>)
 8005746:	f000 b811 	b.w	800576c <__retarget_lock_acquire_recursive>
 800574a:	bf00      	nop
 800574c:	20000268 	.word	0x20000268

08005750 <__malloc_unlock>:
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <__malloc_unlock+0x8>)
 8005752:	f000 b80c 	b.w	800576e <__retarget_lock_release_recursive>
 8005756:	bf00      	nop
 8005758:	20000268 	.word	0x20000268

0800575c <_malloc_usable_size_r>:
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f18      	subs	r0, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfbc      	itt	lt
 8005766:	580b      	ldrlt	r3, [r1, r0]
 8005768:	18c0      	addlt	r0, r0, r3
 800576a:	4770      	bx	lr

0800576c <__retarget_lock_acquire_recursive>:
 800576c:	4770      	bx	lr

0800576e <__retarget_lock_release_recursive>:
 800576e:	4770      	bx	lr

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
